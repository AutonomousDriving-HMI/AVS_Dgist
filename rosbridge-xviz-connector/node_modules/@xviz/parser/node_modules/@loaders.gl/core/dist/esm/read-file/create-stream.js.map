{"version":3,"sources":["../../../src/read-file/create-stream.js"],"names":["fs","http","https","resolvePath","isNode","Boolean","createReadStream","uri","options","isRequest","startsWith","Promise","resolve","reject","URL","request","response","fetch","then","res","body"],"mappings":";;;;AAAA;;AACA;AACA,OAAOA,EAAP,MAAe,IAAf,C,CAAqB;;AACrB,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAACL,EAAE,IAAIA,EAAE,CAACM,gBAAV,CAAtB;AAEA,gBAAsBA,gBAAtB;AAAA;AAAA;;;;;2BAAO,iBAAgCC,GAAhC,EAAqCC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLD,YAAAA,GAAG,GAAGJ,WAAW,CAACI,GAAD,CAAjB;AADK;AAGH;AACME,YAAAA,SAJH,GAIeF,GAAG,CAACG,UAAJ,CAAe,OAAf,KAA2BH,GAAG,CAACG,UAAJ,CAAe,QAAf,CAJ1C;;AAAA,iBAMCN,MAND;AAAA;AAAA;AAAA;;AAAA,iBAOGK,SAPH;AAAA;AAAA;AAAA;;AAAA,6CAQQ,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,cAAAA,OAAO,qBAAO,IAAIM,GAAJ,CAAQP,GAAR,CAAP,EAAwBC,OAAxB,CAAP;AACA,kBAAMO,OAAO,GAAGR,GAAG,CAACG,UAAJ,CAAe,QAAf,IAA2BR,KAAK,CAACa,OAAjC,GAA2Cd,IAAI,CAACc,OAAhE;AACAA,cAAAA,OAAO,CAACR,GAAD,EAAM,UAAAS,QAAQ;AAAA,uBAAIJ,OAAO,CAACI,QAAD,CAAX;AAAA,eAAd,CAAP;AACD,aAJM,CARR;;AAAA;AAAA,6CAeML,OAAO,CAACC,OAAR,CAAgBZ,EAAE,CAACM,gBAAH,CAAoBC,GAApB,EAAyBC,OAAzB,CAAhB,CAfN;;AAAA;AAAA,6CAkBIS,KAAK,CAACV,GAAD,EAAMC,OAAN,CAAL,CACL;AADK,aAEJU,IAFI,CAEC,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAR;AAAA,aAFJ,CAlBJ;;AAAA;AAAA;AAAA;AAAA,6CAsBIT,OAAO,CAACE,MAAR,aAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global fetch */\n/* global URL */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\n\nimport {resolvePath} from './file-aliases';\n\nconst isNode = Boolean(fs && fs.createReadStream);\n\nexport async function createReadStream(uri, options) {\n  uri = resolvePath(uri);\n  try {\n    // NODE\n    const isRequest = uri.startsWith('http:') || uri.startsWith('https:');\n\n    if (isNode) {\n      if (isRequest) {\n        return new Promise((resolve, reject) => {\n          options = {...new URL(uri), ...options};\n          const request = uri.startsWith('https:') ? https.request : http.request;\n          request(uri, response => resolve(response));\n        });\n      }\n\n      return Promise.resolve(fs.createReadStream(uri, options));\n    }\n\n    return fetch(uri, options)\n      // Retrieve body as a ReadableStream\n      .then(res => res.body);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n"],"file":"create-stream.js"}