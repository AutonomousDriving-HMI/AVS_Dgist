// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { parseStreamDataMessage } from './parse-stream-data-message';
import { postDeserialize } from './serialize';
import { getWorkerFarm, initializeWorkerFarm } from './parse-stream-workerfarm'; // Public function for initializing workers

export function initializeWorkers(_ref) {
  let worker = _ref.worker,
      _ref$maxConcurrency = _ref.maxConcurrency,
      maxConcurrency = _ref$maxConcurrency === void 0 ? 4 : _ref$maxConcurrency;
  initializeWorkerFarm({
    worker,
    maxConcurrency
  });
}
export function parseStreamMessage(_ref2) {
  let message = _ref2.message,
      onResult = _ref2.onResult,
      onError = _ref2.onError,
      debug = _ref2.debug,
      _ref2$worker = _ref2.worker,
      worker = _ref2$worker === void 0 ? false : _ref2$worker,
      _ref2$maxConcurrency = _ref2.maxConcurrency,
      maxConcurrency = _ref2$maxConcurrency === void 0 ? 4 : _ref2$maxConcurrency;

  if (worker) {
    if (!getWorkerFarm()) {
      initializeWorkers({
        worker,
        maxConcurrency
      });
    }

    const workerFarm = getWorkerFarm();

    if (debug) {
      workerFarm.debug = debug;
    }

    const onMessage = data => onResult(postDeserialize(data));

    workerFarm.process(message, onMessage, onError);
  } else {
    parseStreamDataMessage(message, onResult, onError);
  }
}
//# sourceMappingURL=parse-stream-message.js.map