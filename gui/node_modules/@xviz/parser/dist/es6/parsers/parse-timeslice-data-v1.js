function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Extracts a TIMESLICE message v1
import { getXVIZConfig } from '../config/xviz-config';
import { LOG_STREAM_MESSAGE } from '../constants';
import { parseStreamFutures, parseStreamPrimitive, parseStreamVariable } from './parse-xviz-stream';
export default function parseTimesliceData(data, convertPrimitive) {
  const _getXVIZConfig = getXVIZConfig(),
        PRIMARY_POSE_STREAM = _getXVIZConfig.PRIMARY_POSE_STREAM;

  const vehiclePose = data.vehicle_pose,
        stateUpdates = data.state_updates,
        otherInfo = _objectWithoutProperties(data, ["vehicle_pose", "state_updates"]);

  let timestamp;

  if (vehiclePose) {
    timestamp = vehiclePose.time;
  } else if (stateUpdates) {
    timestamp = stateUpdates.reduce((t, stateUpdate) => {
      return Math.max(t, stateUpdate.timestamp);
    }, 0);
  }

  if (!timestamp) {
    // Incomplete stream message, just tag it accordingly so client can ignore it
    return {
      type: LOG_STREAM_MESSAGE.INCOMPLETE
    };
  }

  const newStreams = {};

  const result = _objectSpread({}, otherInfo, {
    type: LOG_STREAM_MESSAGE.TIMESLICE,
    streams: newStreams,
    timestamp
  });

  if (stateUpdates) {
    const xvizStreams = parseStateUpdates(stateUpdates, timestamp, convertPrimitive);
    Object.assign(newStreams, xvizStreams);
  }

  if (vehiclePose) {
    // v1 -> v2
    newStreams[PRIMARY_POSE_STREAM] = vehiclePose;
  }

  return result;
}

function parseStateUpdates(stateUpdates, timestamp, convertPrimitive) {
  const _getXVIZConfig2 = getXVIZConfig(),
        STREAM_BLACKLIST = _getXVIZConfig2.STREAM_BLACKLIST;

  const newStreams = {};
  const primitives = {};
  const variables = {};
  const futures = {};

  for (const stateUpdate of stateUpdates) {
    Object.assign(primitives, stateUpdate.primitives);
    Object.assign(variables, stateUpdate.variables);
    Object.assign(futures, stateUpdate.futures);
  }

  Object.keys(primitives).filter(streamName => !STREAM_BLACKLIST.has(streamName)).forEach(primitive => {
    newStreams[primitive] = parseStreamPrimitive(primitives[primitive], primitive, timestamp, convertPrimitive);
  });
  Object.keys(variables).filter(streamName => !STREAM_BLACKLIST.has(streamName)).forEach(variable => {
    newStreams[variable] = parseStreamVariable(variables[variable], variable, timestamp);
  });
  Object.keys(futures).filter(streamName => !STREAM_BLACKLIST.has(streamName)).forEach(future => {
    newStreams[future] = parseStreamFutures(futures[future], future, timestamp, convertPrimitive);
  });
  return newStreams;
}
//# sourceMappingURL=parse-timeslice-data-v1.js.map