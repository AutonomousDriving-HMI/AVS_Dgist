{"version":3,"sources":["../../../src/loaders/xviz-websocket-loader.js"],"names":["XVIZWebsocketLoader","options","xvizHandler","XVIZController","socket","_debug","requestParams","_onOpen","message","type","LOG_STREAM_MESSAGE","METADATA","get","set","StreamSynchronizer","streamBuffer","_setMetadata","emit","TIMESLICE","oldVersion","valueOf","insert","bufferUpdated","getStreams","_onXVIZTimeslice","DONE","error","event","retrySettings","retries","minTimeout","randomize","XVIZStreamBuffer","WebSocketClass","WebSocket","timestamp","url","retry","Promise","resolve","reject","ws","binaryType","onmessage","hasMetadata","Boolean","getMetadata","data","onResult","_onWSMessage","onError","_onWSError","debug","bind","worker","maxConcurrency","onerror","onclose","_onWSClose","onopen","_onWSOpen","err","catch","isAbnormalClosure","code","close","Error","XVIZLoaderInterface"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global WebSocket,ArrayBuffer */\n/* eslint-disable camelcase */\nimport assert from 'assert';\nimport {\n  XVIZStreamBuffer,\n  StreamSynchronizer,\n  parseStreamMessage,\n  LOG_STREAM_MESSAGE\n} from '@xviz/parser';\nimport PromiseRetry from 'promise-retry';\n\nimport XVIZLoaderInterface from './xviz-loader-interface';\nimport XVIZController from './xviz-controller-v2';\n\n/**\n * Connect to XVIZ 2 websocket manage storage of XVIZ data into a XVIZStreamBuffer\n *\n * This class is a Websocket base class and is expected to be subclassed with\n * the following methods overridden:\n *\n * - _onOpen()\n * - _onXVIZTimeslice()\n */\nexport default class XVIZWebsocketLoader extends XVIZLoaderInterface {\n  /**\n   * constructor\n   * @params serverConfig {object}\n   *   - serverConfig.serverUrl {string}\n   *   - serverConfig.defaultLogLength {number, optional} - default 30\n   *   - serverConfig.queryParams {object, optional}\n   *   - serverConfig.retryAttempts {number, optional} - default 3\n   * @params worker {string|function, optional}\n   * @params maxConcurrency {number, optional} - default 3\n   * @params logGuid {string}\n   * @params logProfile {string, optional}\n   * @params duration {number, optional}\n   * @params timestamp {number, optional}\n   * @params bufferLength {number, optional}\n   */\n  constructor(options = {}) {\n    super(options);\n\n    this.socket = null;\n\n    this.retrySettings = {\n      retries: 3,\n      minTimeout: 500,\n      randomize: true\n    };\n\n    this.streamBuffer = new XVIZStreamBuffer();\n\n    // Handler object for the websocket events\n    // Note: needs to be last due to member dependencies\n    this.WebSocketClass = options.WebSocketClass || WebSocket;\n  }\n\n  isOpen() {\n    return this.socket; // && this.socket.readyState === WEB_SOCKET_OPEN_STATE;\n  }\n\n  seek(timestamp) {\n    super.seek(timestamp);\n  }\n\n  /**\n   * Open an XVIZ socket connection with automatic retry\n   *\n   * @returns {Promise} WebSocket connection\n   */\n  connect() {\n    assert(this.socket === null, 'Socket Manager still connected');\n\n    this._debug('stream_start');\n    const {url} = this.requestParams;\n\n    // Wrap retry logic around connection\n    return PromiseRetry(retry => {\n      return new Promise((resolve, reject) => {\n        try {\n          const ws = new this.WebSocketClass(url);\n          ws.binaryType = 'arraybuffer';\n\n          ws.onmessage = message => {\n            const hasMetadata = Boolean(this.getMetadata());\n\n            return parseStreamMessage({\n              message: message.data,\n              onResult: this._onWSMessage,\n              onError: this._onWSError,\n              debug: this._debug.bind('parse_message'),\n              worker: hasMetadata && this.options.worker,\n              maxConcurrency: this.options.maxConcurrency\n            });\n          };\n\n          ws.onerror = this._onWSError;\n          ws.onclose = event => {\n            this._onWSClose(event);\n            reject(event);\n          };\n\n          // On success, resolve the promise with the now ready socket\n          ws.onopen = () => {\n            this.socket = ws;\n            this._onWSOpen();\n            resolve(ws);\n          };\n        } catch (err) {\n          reject(err);\n        }\n      }).catch(event => {\n        this._onWSError(event);\n        const isAbnormalClosure = event.code > 1000 && event.code !== 1005;\n\n        // Retry if abnormal or connection never established\n        if (isAbnormalClosure || !this.socket) {\n          retry();\n        }\n      });\n    }, this.retrySettings).catch(this._onWSError);\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n\n  // Subclasses *MUST* implement these methods\n  _onOpen() {\n    throw new Error('_onOpen() method must be overridden');\n  }\n\n  /**\n   * Subclass hook for xviz message\n   *\n   * The messages will be inserted into the 'streamBuffer'\n   * prior to this hook being called.\n   *\n   * @params message {Object} Parsed XVIZ message\n   * @params bufferUpdated {Boolean} True if streamBuffer has changed\n   */\n  _onXVIZTimeslice(message, bufferUpdated) {}\n\n  // PRIVATE Methods\n\n  // Notifications and metric reporting\n  _onWSOpen = () => {\n    // Request data if we are restarting, otherwise wait for metadata\n    // TODO - protocol negotiation\n    this.xvizHandler = new XVIZController(this.socket);\n\n    this._debug('socket_open', this.requestParams);\n    this._onOpen();\n  };\n\n  // Handle dispatching events, triggering probes, and delegating to the XVIZ handler\n  /* eslint-disable complexity */\n  _onWSMessage = message => {\n    switch (message.type) {\n      case LOG_STREAM_MESSAGE.METADATA:\n        if (this.get('metadata')) {\n          // already has metadata\n          return;\n        }\n\n        this.set('logSynchronizer', new StreamSynchronizer(this.streamBuffer));\n        this._setMetadata(message);\n        this.emit('ready', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.TIMESLICE:\n        const oldVersion = this.streamBuffer.valueOf();\n        this.streamBuffer.insert(message);\n\n        const bufferUpdated = this.streamBuffer.valueOf() !== oldVersion;\n        if (bufferUpdated) {\n          this.set('streams', this.streamBuffer.getStreams());\n        }\n\n        this._onXVIZTimeslice(message, bufferUpdated);\n\n        this.emit('update', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.DONE:\n        this.emit('finish', message);\n        break;\n\n      default:\n        this.emit('error', message);\n    }\n  };\n  /* eslint-enable complexity */\n\n  _onWSError = error => {\n    this.emit('error', error);\n  };\n\n  _onWSClose = event => {\n    // Only called on connection closure, which would be an error case\n    this._debug('socket_closed', event);\n  };\n}\n"],"file":"xviz-websocket-loader.js"}