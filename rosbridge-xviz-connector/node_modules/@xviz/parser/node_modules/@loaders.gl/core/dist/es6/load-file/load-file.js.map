{"version":3,"sources":["../../../src/load-file/load-file.js"],"names":["readFile","readFileSync","parseFile","parseFileSync","autoDetectLoader","loadFile","url","loaders","options","loader","Array","isArray","loadAndParse","data","loadFileSync","result"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,YAAlB,QAAqC,wBAArC;AACA,SAAQC,SAAR,EAAmBC,aAAnB,QAAuC,0BAAvC;AACA,SAAQC,gBAAR,QAA+B,kCAA/B;AAEA,OAAO,eAAeC,QAAf,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+C;AACpD,QAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcJ,OAAd,IAAyBH,gBAAgB,CAACE,GAAD,EAAM,IAAN,EAAYC,OAAZ,CAAzC,GAAgEA,OAA/E,CADoD,CAEpD;;AACA,MAAIE,MAAM,CAACG,YAAX,EAAyB;AACvB,WAAO,MAAMH,MAAM,CAACG,YAAP,CAAoBN,GAApB,EAAyBE,OAAzB,CAAb;AACD,GALmD,CAMpD;;;AACA,QAAMK,IAAI,GAAG,MAAMb,QAAQ,CAACM,GAAD,EAAME,OAAN,CAA3B;AACA,SAAON,SAAS,CAACW,IAAD,EAAON,OAAP,EAAgBC,OAAhB,EAAyBF,GAAzB,CAAhB;AACD;AAED,OAAO,SAASQ,YAAT,CAAsBR,GAAtB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAClD,QAAMK,IAAI,GAAGZ,YAAY,CAACK,GAAD,EAAME,OAAN,CAAzB;AACA,QAAMO,MAAM,GAAGZ,aAAa,CAACU,IAAD,EAAON,OAAP,EAAgBC,OAAhB,EAAyBF,GAAzB,CAA5B,CAFkD,CAGlD;;AACA,SAAOS,MAAP;AACD","sourcesContent":["import {readFile, readFileSync} from '../read-file/read-file';\nimport {parseFile, parseFileSync} from '../parse-file/parse-file';\nimport {autoDetectLoader} from '../parse-file/auto-detect-loader';\n\nexport async function loadFile(url, loaders, options) {\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n  // Some loaders can not separate reading and parsing of data (e.g ImageLoader)\n  if (loader.loadAndParse) {\n    return await loader.loadAndParse(url, options);\n  }\n  // at this point, data can be binary or text\n  const data = await readFile(url, options);\n  return parseFile(data, loaders, options, url);\n}\n\nexport function loadFileSync(url, loaders, options) {\n  const data = readFileSync(url, options);\n  const result = parseFileSync(data, loaders, options, url);\n  // Separate return to facilitate breakpoint setting\n  return result;\n}\n"],"file":"load-file.js"}