"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Resizer = exports.TitleComponent = exports.ContentComponent = exports.Container = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _draggable = _interopRequireDefault(require("../shared/draggable"));

var _styled = _interopRequireDefault(require("@emotion/styled"));

var _theme = require("../shared/theme");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Container = _styled.default.div(function (props) {
  return _objectSpread({}, props.theme.__reset__, {
    position: 'absolute',
    boxSizing: 'content-box',
    boxShadow: props.theme.shadow,
    borderStyle: 'solid',
    borderWidth: 1,
    borderColor: props.isMoving || props.isResizing ? props.theme.controlColorActive : props.theme.backgroundAlt
  }, (0, _theme.evaluateStyle)(props.userStyle, props));
});

exports.Container = Container;

var ContentComponent = _styled.default.div(function (props) {
  return _objectSpread({
    overflow: 'hidden',
    lineHeight: 0,
    boxSizing: 'content-box',
    position: 'relative'
  }, (0, _theme.evaluateStyle)(props.userStyle, props));
});

exports.ContentComponent = ContentComponent;

var TitleComponent = _styled.default.div(function (props) {
  return _objectSpread({
    background: props.isMoving || props.isResizing ? props.theme.controlColorActive : props.theme.backgroundAlt,
    color: props.isMoving || props.isResizing ? props.theme.textColorInvert : props.theme.textColorPrimary,
    textAlign: 'center',
    fontWeight: 'bold',
    lineHeight: 2
  }, (0, _theme.evaluateStyle)(props.userStyle, props));
});

exports.TitleComponent = TitleComponent;

var Resizer = _styled.default.div(function (props) {
  return {
    position: 'absolute',
    width: 12,
    height: 12,
    right: 0,
    bottom: 0,
    zIndex: 1
  };
});
/**
 * @class
 */


exports.Resizer = Resizer;

var FloatPanel =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(FloatPanel, _PureComponent);

  /**
   * @constructor
   *
   * @property {string|Element} title content to display in the title bar.
   *  If empty, the title bar will be hidden.
   * @property {number} x position from the left in pixels
   * @property {number} y position from the top in pixels
   * @property {number} width width of the panel
   * @property {number} height height of the panel
   * @property {string} [className] additional class name for the container
   * @property {number} [parentWidth] width of the parent window
   * @property {number} [parentHeight]} height of the parent window
   *  If parent window size is specified, the panel cannot be moved outside of its bounds.
   * @property {boolean} [minimized] whether the panel is minimized (show only title bar)
   * @property {boolean} [movable] whether the panel can be moved, default true
   * @property {boolean} [resizable] whether the panel can be resized, default false
   * @property {boolean} [minimizable] whether the panel can be minimized, default true
   * @property {function} [onUpdate] callback when user move/resize/minimize the panel
   */
  function FloatPanel(props) {
    var _this;

    _classCallCheck(this, FloatPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FloatPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onMoveStart", function () {
      var _this$props = _this.props,
          x = _this$props.x,
          y = _this$props.y,
          width = _this$props.width,
          height = _this$props.height,
          minimized = _this$props.minimized;

      _this.setState({
        isMoving: true,
        startProps: {
          x: x,
          y: y,
          width: width,
          height: height,
          minimized: minimized
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onMoveDrag", function (_ref) {
      var deltaX = _ref.deltaX,
          deltaY = _ref.deltaY;
      var startProps = _this.state.startProps;

      _this.props.onUpdate(_objectSpread({}, startProps, {
        x: Math.max(0, startProps.x + deltaX),
        y: Math.max(0, startProps.y + deltaY)
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onMoveEnd", function (_ref2) {
      var hasDragged = _ref2.hasDragged;

      if (_this.props.minimizable && _this.props.title && !hasDragged) {
        var startProps = _this.state.startProps;

        _this.props.onUpdate(_objectSpread({}, startProps, {
          minimized: !startProps.minimized
        }));
      }

      _this.setState({
        isMoving: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onResizeStart", function () {
      var _this$props2 = _this.props,
          x = _this$props2.x,
          y = _this$props2.y,
          width = _this$props2.width,
          height = _this$props2.height,
          minimized = _this$props2.minimized;

      _this.setState({
        isResizing: true,
        startProps: {
          x: x,
          y: y,
          width: width,
          height: height,
          minimized: minimized
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onResizeDrag", function (_ref3) {
      var deltaX = _ref3.deltaX,
          deltaY = _ref3.deltaY;
      var startProps = _this.state.startProps;

      _this.props.onUpdate(_objectSpread({}, startProps, {
        width: Math.max(0, startProps.width + deltaX),
        height: Math.max(0, startProps.height + deltaY)
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onResizeEnd", function () {
      _this.setState({
        isResizing: false
      });
    });

    _this.state = {
      isMoving: false,
      isResizing: false,
      startProps: null
    };
    return _this;
  }

  _createClass(FloatPanel, [{
    key: "renderMover",
    value: function renderMover(children) {
      var movable = this.props.movable;

      if (movable) {
        return _react.default.createElement(_draggable.default, {
          onDragStart: this._onMoveStart,
          onDrag: this._onMoveDrag,
          onDragEnd: this._onMoveEnd
        }, children);
      }

      return children;
    }
  }, {
    key: "renderContent",
    value: function renderContent(styleProps) {
      var _this$props3 = this.props,
          style = _this$props3.style,
          height = _this$props3.height,
          minimized = _this$props3.minimized,
          minimizable = _this$props3.minimizable,
          resizable = _this$props3.resizable;

      if (minimizable && minimized) {
        return null;
      }

      return _react.default.createElement(ContentComponent, _extends({}, styleProps, {
        userStyle: style.content,
        style: {
          height: height
        }
      }), this.props.children, resizable && _react.default.createElement(_draggable.default, {
        onDragStart: this._onResizeStart,
        onDrag: this._onResizeDrag,
        onDragEnd: this._onResizeEnd,
        style: {
          cursor: 'nwse-resize'
        }
      }, _react.default.createElement(Resizer, _extends({}, styleProps, {
        userStyle: style.resizer
      }))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          theme = _this$props4.theme,
          style = _this$props4.style,
          title = _this$props4.title,
          x = _this$props4.x,
          y = _this$props4.y,
          width = _this$props4.width,
          height = _this$props4.height,
          className = _this$props4.className,
          parentWidth = _this$props4.parentWidth,
          parentHeight = _this$props4.parentHeight;
      var _this$state = this.state,
          isMoving = _this$state.isMoving,
          isResizing = _this$state.isResizing;
      var styleProps = {
        theme: theme,
        isMoving: isMoving,
        isResizing: isResizing
      };
      var wrapperStyle = {
        left: Math.min(x, Math.max(0, parentWidth - width)),
        top: Math.min(y, Math.max(0, parentHeight - height)),
        width: width
      }; // Only title bar is draggable

      return _react.default.createElement(Container, _extends({
        className: className
      }, styleProps, {
        userStyle: style.wrapper,
        style: wrapperStyle
      }), title ? this.renderMover(_react.default.createElement(TitleComponent, _extends({}, styleProps, {
        userStyle: style.title
      }), title)) : this.renderMover(this.renderContent(styleProps)), title && this.renderContent(styleProps));
    }
  }]);

  return FloatPanel;
}(_react.PureComponent);

_defineProperty(FloatPanel, "propTypes", {
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  // container
  parentWidth: _propTypes.default.number,
  parentHeight: _propTypes.default.number,
  // state
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  x: _propTypes.default.number.isRequired,
  y: _propTypes.default.number.isRequired,
  width: _propTypes.default.number.isRequired,
  height: _propTypes.default.number.isRequired,
  minimized: _propTypes.default.bool,
  // interactivity
  movable: _propTypes.default.bool,
  resizable: _propTypes.default.bool,
  minimizable: _propTypes.default.bool,
  // callbacks
  onUpdate: _propTypes.default.func
});

_defineProperty(FloatPanel, "defaultProps", {
  style: {},
  parentWidth: Infinity,
  parentHeight: Infinity,
  className: '',
  title: '',
  minimized: false,
  movable: true,
  resizable: false,
  minimizable: true,
  onUpdate: function onUpdate() {}
});

var _default = (0, _theme.withTheme)(FloatPanel);

exports.default = _default;
//# sourceMappingURL=index.js.map