{"version":3,"sources":["../../../../src/writers/xviz-writer/xviz-binary-writer.js"],"names":["encodeBinaryXVIZ","xvizJson","options","gltfBuilder","GLTFBuilder","packedData","addApplicationData","nopack","encodeAsGLB","writeBinaryXVIZtoFile","sink","directory","name","json","glbFileBuffer","writeSync","flag"],"mappings":";;;;;;;;AAcA;;AACA;;AACA;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMO,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAClD,MAAMC,WAAW,GAAG,IAAIC,iBAAJ,CAAgBF,OAAhB,CAApB,CADkD,CAGlD;;AACA,MAAMG,UAAU,GAAG,oCAAeJ,QAAf,EAAyBE,WAAzB,EAAsC,IAAtC,EAA4CD,OAA5C,CAAnB,CAJkD,CAMlD;;AACAC,EAAAA,WAAW,CAACG,kBAAZ,CAA+B,MAA/B,EAAuCD,UAAvC,EAAmD;AAACE,IAAAA,MAAM,EAAE;AAAT,GAAnD;AAEA,SAAOJ,WAAW,CAACK,WAAZ,CAAwBN,OAAxB,CAAP;AACD;;AAEM,SAASO,qBAAT,CAA+BC,IAA/B,EAAqCC,SAArC,EAAgDC,IAAhD,EAAsDC,IAAtD,EAA4DX,OAA5D,EAAqE;AAC1E,MAAMY,aAAa,GAAGd,gBAAgB,CAACa,IAAD,EAAOX,OAAP,CAAtC;AACAQ,EAAAA,IAAI,CAACK,SAAL,CAAeJ,SAAf,YAA6BC,IAA7B,WAAyC,oBAASE,aAAT,CAAzC,EAAkE;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAlE;AACA,SAAOF,aAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {GLTFBuilder} from '@loaders.gl/gltf';\nimport {toBuffer} from '@loaders.gl/core';\nimport {packBinaryJson} from './xviz-pack-binary';\n\nexport function encodeBinaryXVIZ(xvizJson, options) {\n  const gltfBuilder = new GLTFBuilder(options);\n\n  // Pack appropriate large data elements (point clouds and images) in binary\n  const packedData = packBinaryJson(xvizJson, gltfBuilder, null, options);\n\n  // As permitted by glTF, we put all XVIZ data in a top-level subfield.\n  gltfBuilder.addApplicationData('xviz', packedData, {nopack: true});\n\n  return gltfBuilder.encodeAsGLB(options);\n}\n\nexport function writeBinaryXVIZtoFile(sink, directory, name, json, options) {\n  const glbFileBuffer = encodeBinaryXVIZ(json, options);\n  sink.writeSync(directory, `${name}.glb`, toBuffer(glbFileBuffer), {flag: 'w'});\n  return glbFileBuffer;\n}\n"],"file":"xviz-binary-writer.js"}