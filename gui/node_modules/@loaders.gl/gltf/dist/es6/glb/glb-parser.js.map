{"version":3,"sources":["../../../src/glb/glb-parser.js"],"names":["unpackGLBBuffers","unpackBinaryJson","TextDecoder","padTo4Bytes","assert","ATTRIBUTE_TYPE_TO_COMPONENTS","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","MAGIC_glTF","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","LE","BE","getMagicString","dataView","String","fromCharCode","getUint8","GLBParser","isGLB","glbArrayBuffer","options","magic","DataView","magic1","getUint32","constructor","binaryByteOffset","packedJson","json","parse","result","_parse","getApplicationData","key","getJSON","getArrayBuffer","getBinaryByteOffset","getBufferView","glTFBufferView","byteOffset","Uint8Array","byteLength","getBuffer","glTFAccessor","ArrayType","componentType","components","type","bytesPerComponent","length","count","bufferViews","bufferView","arrayBuffer","getImageData","glTFImage","typedArray","mimeType","getImage","arrayBufferView","blob","Blob","urlCreator","self","URL","webkitURL","imageUrl","createObjectURL","img","Image","src","getImageAsync","Promise","resolve","onload","_parseBinary","unpackedBuffers","version","fileLength","valid","console","warn","jsonChunkLength","jsonChunkFormat","jsonChunkOffset","jsonChunk","textDecoder","jsonText","decode","JSON","binaryChunkStart","binChunkFormat"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport unpackGLBBuffers from './unpack-glb-buffers';\nimport unpackBinaryJson from '../packed-json/unpack-binary-json';\n\nimport {TextDecoder, padTo4Bytes, assert} from '@loaders.gl/core';\nimport {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} from '../utils/gltf-type-utils';\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nconst GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\nconst GLB_CHUNK_TYPE_BIN = 0x004E4942;\n\nconst LE = true; // Binary GLTF is little endian.\nconst BE = false; // Magic needs to be written as BE\n\nfunction getMagicString(dataView) {\n  return `\\\n${String.fromCharCode(dataView.getUint8(0))}\\\n${String.fromCharCode(dataView.getUint8(1))}\\\n${String.fromCharCode(dataView.getUint8(2))}\\\n${String.fromCharCode(dataView.getUint8(3))}`;\n}\n\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\nexport default class GLBParser {\n\n  static isGLB(glbArrayBuffer, options = {}) {\n    const {magic = MAGIC_glTF} = options;\n\n    // Check that GLB Header starts with the magic number\n    const dataView = new DataView(glbArrayBuffer);\n    const magic1 = dataView.getUint32(0, BE);\n    return magic1 === magic || magic1 === MAGIC_glTF;\n  }\n\n  constructor(options = {}) {\n    // Result\n    this.binaryByteOffset = null;\n    this.packedJson = null;\n    this.json = null;\n  }\n\n  // Return the gltf JSON and the original arrayBuffer\n  parse(glbArrayBuffer, options = {}) {\n    // Input\n    this.glbArrayBuffer = glbArrayBuffer;\n\n    // Only parse once\n    if (this.json === null && this.binaryByteOffset === null) {\n      this.result = this._parse(options);\n    }\n    return this;\n  }\n\n  // Returns application JSON data stored in `key`\n  getApplicationData(key) {\n    return this.json[key];\n  }\n\n  // Returns JSON envelope\n  getJSON() {\n    return this.json;\n  }\n\n  // Return binary chunk\n  getArrayBuffer() {\n    return this.glbArrayBuffer;\n  }\n\n  // Return index into binary chunk\n  getBinaryByteOffset() {\n    return this.binaryByteOffset;\n  }\n\n  // Unpacks a bufferview into a new Uint8Array that is a view into the binary chunk\n  getBufferView(glTFBufferView) {\n    const byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n    return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n  }\n\n  // Unpacks a glTF accessor into a new typed array that is a view into the binary chunk\n  getBuffer(glTFAccessor) {\n    // Decode the glTF accessor format\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n    const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n    const length = glTFAccessor.count * components;\n    const byteLength = glTFAccessor.count * components * bytesPerComponent;\n\n    // Get the boundaries of the binary sub-chunk for this bufferView\n    const glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n    assert(byteLength >= 0 && byteLength <= glTFBufferView.byteLength);\n\n    const byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset;\n    return new ArrayType(this.arrayBuffer, byteOffset, length);\n  }\n\n  // Unpacks an image into an HTML image\n  getImageData(glTFImage) {\n    return {\n      typedArray: this.getBufferView(glTFImage.bufferView),\n      mimeType: glTFImage.mimeType || 'image/jpeg'\n    };\n  }\n\n  getImage(glTFImage) {\n    /* global self, Blob, Image */\n    const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n    const mimeType = glTFImage.mimeType || 'image/jpeg';\n    const blob = new Blob([arrayBufferView], {type: mimeType});\n    const urlCreator = self.URL || self.webkitURL;\n    const imageUrl = urlCreator.createObjectURL(blob);\n    const img = new Image();\n    img.src = imageUrl;\n    return img;\n  }\n\n  getImageAsync(glTFImage) {\n    /* global self, Blob, Image */\n    return new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n      const mimeType = glTFImage.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], {type: mimeType});\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n\n  // PRIVATE\n\n  _parse(options) {\n    const result = this._parseBinary(options);\n    this.packedJson = result.json;\n    this.unpackedBuffers =\n      unpackGLBBuffers(this.glbArrayBuffer, this.json, this.binaryByteOffset);\n    this.json = unpackBinaryJson(this.json, this.unpackedBuffers);\n  }\n\n  _parseBinary(options) {\n    const {magic = MAGIC_glTF} = options;\n\n    // GLB Header\n    const dataView = new DataView(this.glbArrayBuffer);\n    const magic1 = dataView.getUint32(0, BE); // Magic number (the ASCII string 'glTF').\n    const version = dataView.getUint32(4, LE); // Version 2 of binary glTF container format\n    const fileLength = dataView.getUint32(8, LE); // Total byte length of generated file\n\n    let valid = magic1 === MAGIC_glTF || magic1 === magic;\n    if (!valid) {\n      console.warn(`Invalid GLB magic string ${getMagicString(dataView)}`); // eslint-disable-line\n    }\n\n    assert(version === 2, `Invalid GLB version ${version}. Only .glb v2 supported`);\n    assert(fileLength > 20);\n\n    // Write the JSON chunk\n    const jsonChunkLength = dataView.getUint32(12, LE); // Byte length of json chunk\n    const jsonChunkFormat = dataView.getUint32(16, LE); // Chunk format as uint32\n\n    valid = jsonChunkFormat === GLB_CHUNK_TYPE_JSON || jsonChunkFormat === 0; // Back compat\n    assert(valid, `JSON chunk format ${jsonChunkFormat}`);\n\n    // Create a \"view\" of the binary encoded JSON data\n    const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n    const jsonChunk = new Uint8Array(this.glbArrayBuffer, jsonChunkOffset, jsonChunkLength);\n\n    // Decode the JSON binary array into clear text\n    const textDecoder = new TextDecoder('utf8');\n    const jsonText = textDecoder.decode(jsonChunk);\n\n    // Parse the JSON text into a JavaScript data structure\n    this.json = JSON.parse(jsonText);\n\n    // TODO - BIN chunk can be optional\n    const binaryChunkStart = jsonChunkOffset + padTo4Bytes(jsonChunkLength);\n    this.binaryByteOffset = binaryChunkStart + GLB_CHUNK_HEADER_SIZE;\n\n    const binChunkFormat = dataView.getUint32(binaryChunkStart + 4, LE); // Chunk format as uint32\n    valid = binChunkFormat === GLB_CHUNK_TYPE_BIN || binChunkFormat === 1; // Back compat\n    assert(valid, `BIN chunk format ${binChunkFormat}`);\n\n    return {\n      arrayBuffer: this.glbArrayBuffer,\n      binaryByteOffset: this.binaryByteOffset,\n      json: this.json\n    };\n  }\n}\n"],"file":"glb-parser.js"}