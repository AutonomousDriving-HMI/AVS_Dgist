function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable camelcase, max-statements */
import { isImage as _isImage, padTo4Bytes, copyArrayBuffer, copyToArray, TextEncoder, getAccessorTypeFromSize, getComponentTypeFromArray } from '@loaders.gl/core';
import packBinaryJson from '../packed-json/pack-binary-json';
var MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII

var LE = true; // Binary GLTF is little endian.

var BE = false; // Magic needs to be written as BE

var GLB_FILE_HEADER_SIZE = 12;
var GLB_CHUNK_HEADER_SIZE = 8;

var GLBBuilder =
/*#__PURE__*/
function () {
  function GLBBuilder() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, GLBBuilder);

    // Lets us keep track of how large the body will be, as well as the offset for each of the
    // original buffers.
    this.byteLength = 0;
    this.json = {
      buffers: [{
        // Just the single BIN chunk buffer
        byteLength: 0 // Updated at end of conversion

      }],
      bufferViews: [],
      accessors: [],
      images: [],
      meshes: []
    }; // list of binary buffers to be written to the BIN chunk
    // (Each call to addBuffer, addImage etc adds an entry here)

    this.sourceBuffers = [];
    this.log = options.log || console; // eslint-disable-line
  } // ACCESSORS


  _createClass(GLBBuilder, [{
    key: "getByteLength",
    value: function getByteLength() {
      return this.byteLength;
    } // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)

  }, {
    key: "isImage",
    value: function isImage(imageData) {
      return _isImage(imageData);
    } // MODIFERS
    // Encode the full glTF file as a binary GLB file
    // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file

  }, {
    key: "encodeAsGLB",
    value: function encodeAsGLB() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this._createGLBBuffer(options);
    } // Add an extra application-defined key to the top-level data structure
    // By default packs JSON by extracting binary data and replacing it with JSON pointers

  }, {
    key: "addApplicationData",
    value: function addApplicationData(key, data) {
      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var jsonData = packOptions.nopack ? data : packBinaryJson(data, this, packOptions);
      this.json[key] = jsonData;
      return this;
    } // Add a binary buffer. Builds glTF "JSON metadata" and saves buffer reference
    // Buffer will be copied into BIN chunk during "pack"
    // Currently encodes buffers as glTF accessors, but this could be optimized

  }, {
    key: "addBuffer",
    value: function addBuffer(sourceBuffer) {
      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        size: 3
      };
      var bufferViewIndex = this.addBufferView(sourceBuffer);
      var accessorDefaults = {
        size: accessor.size,
        componentType: getComponentTypeFromArray(sourceBuffer),
        count: Math.round(sourceBuffer.length / accessor.size)
      };
      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));
    } // Basic glTF adders: basic memory buffer/image type fields
    // Scenegraph specific adders are placed in glTFBuilder
    // TODO: These should be moved to glTFBuilder once addBuffer
    // have been rewritten to not depend on these.
    // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index

  }, {
    key: "addBufferView",
    value: function addBufferView(buffer) {
      var byteLength = buffer.byteLength || buffer.length; // Add a bufferView indicating start and length of this binary sub-chunk

      this.json.bufferViews.push({
        buffer: 0,
        // Write offset from the start of the binary body
        byteOffset: this.byteLength,
        byteLength: byteLength
      }); // We've now written the contents to the body, so update the total length
      // Every sub-chunk needs to be 4-byte aligned

      this.byteLength += padTo4Bytes(byteLength); // Add this buffer to the list of buffers to be written to the body.

      this.sourceBuffers.push(buffer); // Return the index to the just created bufferView

      return this.json.bufferViews.length - 1;
    } // Adds an accessor to a bufferView

  }, {
    key: "addAccessor",
    value: function addAccessor(bufferViewIndex, accessor) {
      // Add an accessor pointing to the new buffer view
      this.json.accessors.push({
        bufferView: bufferViewIndex,
        type: getAccessorTypeFromSize(accessor.size),
        componentType: accessor.componentType,
        count: accessor.count
      });
      return this.json.accessors.length - 1;
    } // PRIVATE
    // For testing

  }, {
    key: "_pack",
    value: function _pack() {
      this._packBinaryChunk();

      return {
        arrayBuffer: this.arrayBuffer,
        json: this.json
      };
    } // Pack the binary chunk

  }, {
    key: "_packBinaryChunk",
    value: function _packBinaryChunk() {
      // Already packed
      if (this.arrayBuffer) {
        return;
      } // Allocate total array


      var totalByteLength = this.byteLength;
      var arrayBuffer = new ArrayBuffer(totalByteLength);
      var targetArray = new Uint8Array(arrayBuffer); // Copy each array into

      var dstByteOffset = 0;

      for (var i = 0; i < this.sourceBuffers.length; i++) {
        var sourceBuffer = this.sourceBuffers[i];
        dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);
      } // Update the glTF BIN CHUNK byte length


      this.json.buffers[0].byteLength = totalByteLength; // Save generated arrayBuffer

      this.arrayBuffer = arrayBuffer; // Clear out sourceBuffers

      this.sourceBuffers = [];
    } // Encode the full GLB buffer with header etc
    // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#
    // glb-file-format-specification

  }, {
    key: "_createGLBBuffer",
    value: function _createGLBBuffer() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // TODO - avoid double array buffer creation
      this._packBinaryChunk();

      var binChunk = this.arrayBuffer;

      if (options.magic) {
        console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line
      }

      var jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes

      var jsonChunk = this._convertObjectToJsonChunk(this.json); // As body is 4-byte aligned, the scene length must be padded to have a multiple of 4.


      var jsonChunkLength = padTo4Bytes(jsonChunk.byteLength);
      var binChunkOffset = jsonChunkLength + jsonChunkOffset;
      var fileLength = binChunkOffset + GLB_CHUNK_HEADER_SIZE + padTo4Bytes(binChunk.byteLength); // Length is know, we can create the GLB memory buffer!

      var glbArrayBuffer = new ArrayBuffer(fileLength);
      var dataView = new DataView(glbArrayBuffer); // GLB Header

      dataView.setUint32(0, MAGIC_glTF, BE); // Magic number (the ASCII string 'glTF').

      dataView.setUint32(4, 2, LE); // Version 2 of binary glTF container format uint32

      dataView.setUint32(8, fileLength, LE); // Total byte length of generated file (uint32)
      // Write the JSON chunk

      dataView.setUint32(12, jsonChunk.byteLength, LE); // Byte length of json chunk (uint32)

      dataView.setUint32(16, 0, LE); // Chunk format as uint32 (JSON is 0)

      copyArrayBuffer(glbArrayBuffer, jsonChunk, jsonChunkOffset); // TODO - Add spaces as padding to ensure scene is a multiple of 4 bytes.
      // for (let i = jsonChunkLength + 20; i < binChunkOffset; ++i) {
      //   glbFileArray[i] = 0x20;
      // }
      // Write the BIN chunk

      var binChunkLengthPadded = padTo4Bytes(binChunk.byteLength);
      dataView.setUint32(binChunkOffset + 0, binChunkLengthPadded, LE); // Byte length BIN (uint32)

      dataView.setUint32(binChunkOffset + 4, 1, LE); // Chunk format as uint32 (BIN is 1)

      copyArrayBuffer(glbArrayBuffer, binChunk, binChunkOffset + GLB_CHUNK_HEADER_SIZE);
      return glbArrayBuffer;
    } // Report internal buffer sizes for debug and testing purposes

  }, {
    key: "_getInternalCounts",
    value: function _getInternalCounts() {
      return {
        buffers: this.json.buffers.length,
        bufferViews: this.json.bufferViews.length,
        accessors: this.json.accessors.length,
        images: this.json.images.length
      };
    }
  }, {
    key: "_convertObjectToJsonChunk",
    value: function _convertObjectToJsonChunk(json) {
      var jsonChunkString = JSON.stringify(json);
      var textEncoder = new TextEncoder('utf8');
      return textEncoder.encode(jsonChunkString);
    }
  }]);

  return GLBBuilder;
}();

export { GLBBuilder as default };
//# sourceMappingURL=glb-builder.js.map