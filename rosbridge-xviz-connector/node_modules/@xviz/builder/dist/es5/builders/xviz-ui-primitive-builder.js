"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _xvizBaseBuilder = _interopRequireDefault(require("./xviz-base-builder"));

var _constant = require("./constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var XVIZTreeTableRowBuilder =
/*#__PURE__*/
function () {
  function XVIZTreeTableRowBuilder(id, values) {
    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, XVIZTreeTableRowBuilder);

    this._parent = parent;
    this._id = id;
    this._values = values;
    this._children = [];
  }

  _createClass(XVIZTreeTableRowBuilder, [{
    key: "child",
    value: function child(id, values) {
      var row = new XVIZTreeTableRowBuilder(id, values, this._id);

      this._children.push(row);

      return row;
    }
  }, {
    key: "getData",
    value: function getData() {
      var obj = {
        id: this._id
      };

      if (this._values) {
        obj.column_values = this._values;
      }

      if (this._parent !== null) {
        obj.parent = this._parent;
      }

      return [].concat.apply([obj], this._children.map(function (row) {
        return row.getData();
      }));
    }
  }]);

  return XVIZTreeTableRowBuilder;
}();

var XVIZUIPrimitiveBuilder =
/*#__PURE__*/
function (_XVIZBaseBuilder) {
  _inherits(XVIZUIPrimitiveBuilder, _XVIZBaseBuilder);

  function XVIZUIPrimitiveBuilder(props) {
    var _this;

    _classCallCheck(this, XVIZUIPrimitiveBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(XVIZUIPrimitiveBuilder).call(this, _objectSpread({}, props, {
      category: _constant.CATEGORY.ui_primitive
    })));

    _this.reset(); // primitives: {[streamId]: []}


    _this._primitives = {};
    return _this;
  }

  _createClass(XVIZUIPrimitiveBuilder, [{
    key: "treetable",
    value: function treetable(columns) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_columns');
      this._columns = columns;
      this._type = _constant.PRIMITIVE_TYPES.treetable;
      return this;
    }
  }, {
    key: "row",
    value: function row(id, values) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_id');
      this._row = new XVIZTreeTableRowBuilder(id, values);
      this._type = _constant.PRIMITIVE_TYPES.treetable;
      return this._row;
    }
  }, {
    key: "_validate",
    value: function _validate() {
      _get(_getPrototypeOf(XVIZUIPrimitiveBuilder.prototype), "_validate", this).call(this);
    }
  }, {
    key: "_flush",
    value: function _flush() {
      this._validate();

      this._flushPrimitives();
    }
  }, {
    key: "getData",
    value: function getData() {
      if (this._type) {
        this._flush();
      }

      if (Object.keys(this._primitives).length) {
        return this._primitives;
      }

      return null;
    }
  }, {
    key: "_flushPrimitives",
    value: function _flushPrimitives() {
      var stream = this._primitives[this._streamId];

      if (!stream) {
        stream = {};
        this._primitives[this._streamId] = stream;
      }

      var fieldName;
      var primitiveArray;

      switch (this._type) {
        case _constant.PRIMITIVE_TYPES.treetable:
          fieldName = this._type;

          if (!stream[fieldName]) {
            // column must be set before adding rows
            this._validator.hasProp(this, '_columns');

            stream[fieldName] = {
              columns: this._columns,
              nodes: []
            };
          }

          primitiveArray = stream[fieldName].nodes;
          break;

        default:
      }

      var primitives = this._formatPrimitives();

      if (primitives) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = primitives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var primitive = _step.value;
            primitiveArray.push(primitive);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      this.reset();
    }
  }, {
    key: "_formatPrimitives",
    value: function _formatPrimitives() {
      switch (this._type) {
        case _constant.PRIMITIVE_TYPES.treetable:
          if (this._row !== null) {
            return this._row.getData();
          }

          break;

        default:
      }

      return null;
    }
  }, {
    key: "reset",
    value: function reset() {
      this._type = null;
      this._columns = null;
      this._row = null;
    }
  }]);

  return XVIZUIPrimitiveBuilder;
}(_xvizBaseBuilder.default);

exports.default = XVIZUIPrimitiveBuilder;
//# sourceMappingURL=xviz-ui-primitive-builder.js.map