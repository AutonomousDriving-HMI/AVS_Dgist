{"version":3,"sources":["../../../src/load-file/load-file.js"],"names":["loadFile","url","loaders","options","loader","Array","isArray","loadAndParse","data","loadFileSync","result"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;SAEsBA,Q;;;;;;;4BAAf,iBAAwBC,GAAxB,EAA6BC,OAA7B,EAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUC,KAAK,CAACC,OAAN,CAAcJ,OAAd,IAAyB,wCAAiBD,GAAjB,EAAsB,IAAtB,EAA4BC,OAA5B,CAAzB,GAAgEA,OAD1E,EAEL;;AAFK,iBAGDE,MAAM,CAACG,YAHN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIUH,MAAM,CAACG,YAAP,CAAoBN,GAApB,EAAyBE,OAAzB,CAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAOc,wBAASF,GAAT,EAAcE,OAAd,CAPd;;AAAA;AAOCK,YAAAA,IAPD;AAAA,6CAQE,0BAAUA,IAAV,EAAgBN,OAAhB,EAAyBC,OAAzB,EAAkCF,GAAlC,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAWA,SAASQ,YAAT,CAAsBR,GAAtB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAClD,MAAMK,IAAI,GAAG,4BAAaP,GAAb,EAAkBE,OAAlB,CAAb;AACA,MAAMO,MAAM,GAAG,8BAAcF,IAAd,EAAoBN,OAApB,EAA6BC,OAA7B,EAAsCF,GAAtC,CAAf,CAFkD,CAGlD;;AACA,SAAOS,MAAP;AACD","sourcesContent":["import {readFile, readFileSync} from '../read-file/read-file';\nimport {parseFile, parseFileSync} from '../parse-file/parse-file';\nimport {autoDetectLoader} from '../parse-file/auto-detect-loader';\n\nexport async function loadFile(url, loaders, options) {\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n  // Some loaders can not separate reading and parsing of data (e.g ImageLoader)\n  if (loader.loadAndParse) {\n    return await loader.loadAndParse(url, options);\n  }\n  // at this point, data can be binary or text\n  const data = await readFile(url, options);\n  return parseFile(data, loaders, options, url);\n}\n\nexport function loadFileSync(url, loaders, options) {\n  const data = readFileSync(url, options);\n  const result = parseFileSync(data, loaders, options, url);\n  // Separate return to facilitate breakpoint setting\n  return result;\n}\n"],"file":"load-file.js"}