{"version":3,"sources":["../../../src/table/tree-table-row.js"],"names":["React","PureComponent","PropTypes","TableRowComponent","TableCell","Expander","TreeTableRow","id","index","depth","key","data","style","props","indentSize","columns","theme","userStyle","renderCell","getIsExpanded","isExpanded","hasChildren","children","length","indent","row","expander","marginLeft","_toggleExpansion","iconExpanded","iconCollapsed","flexShrink","width","map","colValue","colIndex","column","name","cell","value","srcObject","columnIndex","rowId","rowIndex","_renderItem","toggleExpansion","render","string","shape","array","object","number","func"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {TableRowComponent, TableCell, Expander} from './styled-components';\n\n/**\n * A stateless component that renders a data row in the TreeTable component\n */\nexport default class TreeTableRow extends PureComponent {\n  static propTypes = {\n    id: PropTypes.string,\n    data: PropTypes.shape({\n      data: PropTypes.array,\n      children: PropTypes.array\n    }),\n    style: PropTypes.object,\n    indentSize: PropTypes.number,\n    renderCell: PropTypes.func,\n    columns: PropTypes.array,\n    getIsExpanded: PropTypes.func,\n    toggleExpansion: PropTypes.func\n  };\n\n  _toggleExpansion(id) {\n    this.props.toggleExpansion(id, this.props.id);\n  }\n\n  _renderItem = ({id, index, depth = 0, key, data, style}) => {\n    const {indentSize, columns, theme, userStyle, renderCell, getIsExpanded} = this.props;\n\n    const isExpanded = getIsExpanded(id);\n    const hasChildren = data.children.length > 0;\n    const indent = indentSize * (depth + 1);\n\n    return (\n      <div key={key} style={style}>\n        <TableRowComponent theme={theme} index={index} userStyle={userStyle.row}>\n          {hasChildren && (\n            <Expander\n              key=\"toggle\"\n              isExpanded={isExpanded}\n              theme={theme}\n              userStyle={userStyle.expander}\n              style={{marginLeft: indent}}\n              onClick={() => this._toggleExpansion(id)}\n            >\n              {isExpanded ? userStyle.iconExpanded || '▾' : userStyle.iconCollapsed || '▸'}\n            </Expander>\n          )}\n\n          <div style={{flexShrink: 0, width: indent}} />\n\n          {data.data.map((colValue, colIndex) => {\n            const column = columns[colIndex];\n            const width = colIndex === 0 ? column.width - indent : column.width;\n\n            return (\n              <TableCell\n                key={colIndex}\n                index={colIndex}\n                style={{width}}\n                title={`${column.name}: ${colValue}`}\n                theme={theme}\n                userStyle={userStyle.cell}\n              >\n                {renderCell({\n                  value: colValue,\n                  column: column.srcObject,\n                  columnIndex: colIndex,\n                  row: data.srcObject,\n                  rowId: id\n                })}\n              </TableCell>\n            );\n          })}\n        </TableRowComponent>\n\n        {hasChildren &&\n          isExpanded &&\n          data.children.map((row, rowIndex) =>\n            this._renderItem({\n              depth: depth + 1,\n              id: `${id}.${rowIndex}`,\n              index: rowIndex,\n              key: rowIndex,\n              data: row\n            })\n          )}\n      </div>\n    );\n  };\n\n  render() {\n    return this._renderItem({...this.props});\n  }\n}\n"],"file":"tree-table-row.js"}