"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseSynchronizer = _interopRequireDefault(require("./base-synchronizer"));

var _assert = _interopRequireDefault(require("../utils/assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var LogSynchronizer =
/*#__PURE__*/
function (_BaseSynchronizer) {
  _inherits(LogSynchronizer, _BaseSynchronizer);

  /**
   * @classdesc
   * The log streams are arrays of timestamped data objects, and the app
   * will access the data object from each stream that is in the time range
   * covering our current timestep.
   *
   * @class
   * @param {Object} logs - Map of logs (arrays) with elements
   * - Keys will be used as names of logs, and the extracted data will be
   *   placed in a field with that name.
   * - Each log is expected to be an array of objects.
   * - Each log object must contain a GPS timestamp
   *   either in the `attributes.transmission_time` or the `time` fields
   */
  function LogSynchronizer() {
    var _this;

    var logs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 ? arguments[1] : undefined;

    _classCallCheck(this, LogSynchronizer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LogSynchronizer).call(this, opts)); // Set up log state for all logs, so that we can move forward and back

    _this.logs = {};

    for (var logName in logs) {
      var data = logs[logName];
      (0, _assert.default)(Array.isArray(data) && data.length > 0, 'Invalid log data');

      var logStartTime = _this._getTimeFromObject(data[0]);

      _this.logs[logName] = {
        data: data,
        index: null,
        // index holds the indices to process
        time: logStartTime // used to optimize lookup

      };
    }

    return _this;
  }

  _createClass(LogSynchronizer, [{
    key: "_empty",
    value: function _empty() {
      return !this.logs || Object.keys(this.logs).length === 0;
    }
    /**
     * Find and process stream data in the range (start, end] for process
     * Returns a list of streams sorted by decending time
     *
     * Since we have all samples and can find the correct datum for every stream
     * and only send back an array of 1 element. To do this we will apply the
     * reverse search here, stopping when we find the entry closest to endTime.
     *
     * @param Number startTime - The time to start from.
     * @param Number endTime - The time to end at.
     */

  }, {
    key: "_getTimeRangeInReverse",
    value: function _getTimeRangeInReverse(startTime, endTime) {
      var streams = {}; // Set index based on time range for each stream

      for (var logName in this.logs) {
        var datum = this._lookupStreamDatum(logName, startTime, endTime);

        if (datum) {
          streams[logName] = datum;
        }
      }

      return [streams];
    }
    /**
     * @private
     * Lookups the datum for a stream within the time range.
     *
     * This is a mutating function as it tracks last lookup state to
     * optimize for sequential lookups
     *
     * @param {String} logName - which log to sync
     * @param {Number} startTime - start of time to include data from
     * @param {Number} endTime - end time to limit data within
     * @return {Object} - returns datum for this log or null
     */

  }, {
    key: "_lookupStreamDatum",
    value: function _lookupStreamDatum(logName, startTime, endTime) {
      var log = this.logs[logName];
      (0, _assert.default)(log, 'Invalid log'); // This is an optimization for positive time deltas (playing forward)
      // If going backwards, just reset and perform full search.

      if (endTime < log.time) {
        log.time = 0;
        log.index = null;
      }

      var startIndex = log.index || 0;
      var endIndex = null;
      var endTimestamp; // invalidate

      log.index = null; // Find the range of indices for the given start and end time

      for (var i = startIndex; i < log.data.length; ++i) {
        var timestamp = this._getTimeFromObject(log.data[i]); // If timestamp < startTime, sample before our target window, so don't update index


        if (timestamp > startTime && timestamp <= endTime) {
          // Within our target window, so update index
          endIndex = i;
          endTimestamp = timestamp;
        } else if (timestamp > endTime) {
          // Beyond our target window, so exit early
          break;
        }
      } // Found no entry


      if (endIndex === null) {
        return null;
      }

      log.index = endIndex;
      log.time = endTimestamp;
      return log.data[endIndex];
    }
  }, {
    key: "_getTimeFromObject",
    value: function _getTimeFromObject(object) {
      return object.time || object.attributes && object.attributes.transmission_time;
    }
  }]);

  return LogSynchronizer;
}(_baseSynchronizer.default);

exports.default = LogSynchronizer;
//# sourceMappingURL=log-synchronizer.js.map