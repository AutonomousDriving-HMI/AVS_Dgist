function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* eslint-disable no-console no-undef */
import XVIZStyleProperty from './xviz-style-property';
var SELECTOR_REGEX = /\S+/g;
var OPERATOR_REGEX = /([=:~\*\^]+)/;

var NULL_VALIDATOR = function NULL_VALIDATOR() {
  return true;
};
/* Parser for single stylesheet */


var Stylesheet =
/*#__PURE__*/
function () {
  function Stylesheet() {
    var _this = this;

    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, Stylesheet);

    var rules = data.slice() // Newer rules override older ones
    .reverse().map(function (rule) {
      var _this$_parseSelector = _this._parseSelector(rule.name || '*'),
          selectors = _this$_parseSelector.selectors,
          validate = _this$_parseSelector.validate;

      var properties = _this._parseProperties(rule);

      return {
        selectors: selectors,
        validate: validate,
        properties: properties
      };
    });
    this.properties = {};
    rules.forEach(function (rule) {
      for (var key in rule.properties) {
        var p = _this.properties[key];

        if (!p) {
          p = [];
          _this.properties[key] = p;
        }

        p.push(rule);
      }
    });
    this.rules = rules;
  } // Public methods

  /**
   * get style by property name for an object
   * @param {String} propertyName - name of the style
   * @param {Object} state - state descriptor of the object, used to match selectors
   * @returns {Number|String|Array} style property value
   */


  _createClass(Stylesheet, [{
    key: "getProperty",
    value: function getProperty(propertyName) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // inline style override any generic rules
      var inlineProp = state.base && state.base.style && state.base.style[propertyName];

      if (inlineProp !== undefined) {
        return XVIZStyleProperty.formatValue(propertyName, inlineProp);
      }

      var rules = this.properties[propertyName];
      var match = rules && rules.find(function (rule) {
        return rule.validate(state);
      });
      return match ? match.properties[propertyName].getValue(state) : null;
    }
    /**
     * get default style by property name
     * @param {String} propertyName - name of the style
     * @returns {Number|String|Array} style property default value
     */

  }, {
    key: "getPropertyDefault",
    value: function getPropertyDefault(propertyName) {
      var value = XVIZStyleProperty.getDefault(propertyName);

      if (typeof value === 'function') {
        return value(this);
      }

      return value;
    }
    /**
     * get a list of attribute names that a property depends on.
     * @param {String} propertyName - name of the style
     * @returns {Array} - attribute names
     */

  }, {
    key: "getPropertyDependencies",
    value: function getPropertyDependencies(propertyName) {
      var attributes = {};
      var rules = this.properties[propertyName];

      if (!rules) {
        return [];
      }

      rules.forEach(function (rule) {
        rule.selectors.forEach(function (selector) {
          if (selector !== '*') {
            var _selector$split = selector.split(OPERATOR_REGEX),
                _selector$split2 = _slicedToArray(_selector$split, 1),
                name = _selector$split2[0];

            attributes[name] = 1;
          }
        });
      });
      return Object.keys(attributes);
    } // Private methods
    // Returns a function that checks if an object matches the given selector expressions

  }, {
    key: "_getValidator",
    value: function _getValidator(selector) {
      if (selector === '*') {
        return NULL_VALIDATOR;
      }

      var _selector$split3 = selector.split(OPERATOR_REGEX),
          _selector$split4 = _slicedToArray(_selector$split3, 3),
          name = _selector$split4[0],
          operator = _selector$split4[1],
          value = _selector$split4[2];

      switch (operator) {
        case '=':
          return function (object) {
            return object && object[name] === value;
          };

        default:
          {
            return function (object) {
              var classes = object && object.base && object.base.classes;
              return object && (classes && classes.includes(name) || object[name]);
            };
          }
      }
    } // Parses a selectorString (space-separated selector expressions)

  }, {
    key: "_parseSelector",
    value: function _parseSelector(selectorString) {
      var selectors = selectorString.match(SELECTOR_REGEX);
      var validate; // Special case handling
      // Better perf than Array.every

      if (selectors.length === 0 || selectors.includes('*')) {
        validate = NULL_VALIDATOR;
      } else if (selectors.length === 1) {
        var match = this._getValidator(selectors[0]);

        validate = function validate(object) {
          return match(object) || match(object.state);
        };
      } else {
        var validators = selectors.map(this._getValidator);

        validate = function validate(object) {
          return validators.every(function (match) {
            return match(object) || match(object.state);
          });
        };
      }

      return {
        selectors: selectors,
        validate: validate
      };
    } // Parses property values

  }, {
    key: "_parseProperties",
    value: function _parseProperties(properties) {
      var result = {};

      for (var key in properties.style) {
        result[key] = new XVIZStyleProperty(key, properties.style[key]);
      }

      return result;
    }
  }]);

  return Stylesheet;
}();

export { Stylesheet as default };
//# sourceMappingURL=stylesheet.js.map