function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { withTheme } from '../shared/theme';
import { ExpandedIcon, CollapsedIcon } from '../shared/icons';
import Input from './input';
import { Container, Expander } from './styled-components';
const SETTING_STYLES = {
  position: 'relative'
};

class Form extends PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      collapsed: {}
    });

    _defineProperty(this, "_onChange", (settingName, newValue) => {
      this.props.onChange({
        [settingName]: newValue
      });
    });
  }

  toggleCollapsed(_ref) {
    let settingName = _ref.settingName,
        collapsed = _ref.collapsed;

    const newCollapsedState = _objectSpread({}, this.state.collapsed, {
      [settingName]: !collapsed
    });

    this.setState({
      collapsed: newCollapsedState
    });
  }
  /* eslint-disable complexity */


  _renderSetting(_ref2) {
    let settingName = _ref2.settingName,
        setting = _ref2.setting,
        value = _ref2.value,
        _ref2$isEnabled = _ref2.isEnabled,
        isEnabled = _ref2$isEnabled === void 0 ? true : _ref2$isEnabled,
        level = _ref2.level;
    const _this$props = this.props,
          theme = _this$props.theme,
          style = _this$props.style;
    const _setting$enabled = setting.enabled,
          enabled = _setting$enabled === void 0 ? true : _setting$enabled,
          _setting$visible = setting.visible,
          visible = _setting$visible === void 0 ? true : _setting$visible,
          children = setting.children;
    let isVisible;

    if (typeof enabled === 'function') {
      isEnabled = isEnabled && enabled(this.props.values);
    } else {
      isEnabled = isEnabled && Boolean(enabled);
    }

    if (typeof visible === 'function') {
      isVisible = visible(this.props.values);
    } else {
      isVisible = Boolean(visible);
    }

    if (!isVisible) {
      return null;
    }

    const collapsed = typeof this.state.collapsed[settingName] !== 'undefined' ? this.state.collapsed[settingName] : false;
    const input = React.createElement(Input, _extends({
      key: settingName
    }, setting, {
      label: setting.title || settingName,
      name: settingName,
      value: value,
      theme: theme,
      style: style,
      level: level,
      isEnabled: isEnabled,
      onChange: this._onChange
    }));

    if (!children) {
      return input;
    }

    return React.createElement("div", {
      key: settingName,
      style: SETTING_STYLES
    }, setting.collapsible && React.createElement(Expander, {
      theme: theme,
      userStyle: style.expander,
      onClick: () => this.toggleCollapsed({
        settingName,
        collapsed
      }),
      isExpanded: !collapsed
    }, collapsed ? style.iconCollapsed || React.createElement(CollapsedIcon, null) : style.iconExpanded || React.createElement(ExpandedIcon, null)), input, !collapsed && this._renderSettings(children, {
      isEnabled,
      level: level + 1
    }));
  }
  /* eslint-enable complexity */


  _renderSettings(settings) {
    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const values = this.props.values;
    const children = [];

    for (const settingName of Object.keys(settings)) {
      const setting = settings[settingName];
      const value = values[settingName];
      const collapsed = this.state.collapsed[settingName];
      const level = opts.level || 0;

      const child = this._renderSetting(_objectSpread({}, opts, {
        settingName,
        setting,
        value,
        collapsed,
        level
      }));

      children.push(child);
    }

    return children;
  }

  render() {
    const _this$props2 = this.props,
          theme = _this$props2.theme,
          style = _this$props2.style,
          data = _this$props2.data;
    return React.createElement(Container, {
      theme: theme,
      userStyle: style.wrapper
    }, this._renderSettings(data));
  }

}

_defineProperty(Form, "propTypes", {
  data: PropTypes.object.isRequired,
  style: PropTypes.object,
  values: PropTypes.object.isRequired,
  onChange: PropTypes.func.isRequired
});

_defineProperty(Form, "defaultProps", {
  style: {}
});

export default withTheme(Form);
//# sourceMappingURL=form.js.map