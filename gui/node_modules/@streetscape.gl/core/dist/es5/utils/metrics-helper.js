"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTimeSeries = getTimeSeries;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// TODO add documentation and tests
function getTimeSeriesForStream(_ref) {
  var metadata = _ref.metadata,
      streamName = _ref.streamName,
      stream = _ref.stream;

  // See if we have some metadata for this metric
  if (!metadata || metadata.nograph) {
    return null;
  }

  var mapper = metadata.valueMap;
  var scale = metadata.scale || 1;

  var getX = function getX(d) {
    return d.time;
  };

  var getY = mapper ? function (d) {
    return mapper[d.variable];
  } : function (d) {
    return d.variable * scale;
  };
  var sampleDatum = stream[0];

  if (!sampleDatum || !Number.isFinite(getY(sampleDatum))) {
    return null;
  }

  var metrics = {};
  metrics[streamName] = _objectSpread({
    id: streamName
  }, metadata, {
    getX: getX,
    getY: getY,
    title: metadata.title || streamName,
    unit: metadata.unit || '',
    valueSeries: stream
  });
  return metrics;
}
/**
 * Get the time series for given streams
 * @param logMetadata {object} log metadata
 * @param streams array of streams data
 * @returns {Array} array of time series data
 */


function getTimeSeries(_ref2) {
  var _ref2$metadata = _ref2.metadata,
      metadata = _ref2$metadata === void 0 ? {} : _ref2$metadata,
      streams = _ref2.streams;
  var timeSeries = {};

  for (var streamName in streams) {
    // if there is ui configuration for this stream
    if (streams.hasOwnProperty(streamName) && metadata.streams && metadata.streams[streamName]) {
      var stream = streams[streamName];
      var streamTimeSeries = getTimeSeriesForStream({
        metadata: metadata.streams[streamName],
        streamName: streamName,
        stream: stream
      });
      Object.assign(timeSeries, streamTimeSeries);
    }
  }

  return timeSeries;
}
//# sourceMappingURL=metrics-helper.js.map