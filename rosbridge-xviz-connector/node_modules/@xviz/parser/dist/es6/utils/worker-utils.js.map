{"version":3,"sources":["../../../src/utils/worker-utils.js"],"names":["getTransferList","object","recursive","transfers","transfersSet","Set","ArrayBuffer","add","buffer","key","undefined","Array","from","WorkerThread","constructor","url","metadata","worker","Worker","isBusy","process","data","Promise","resolve","reject","onmessage","e","onerror","err","postMessage","terminate","WorkerFarm","workerURL","maxConcurrency","debug","initialMessage","workers","queue","i","name","broadcast","destroy","forEach","getAvailableWorker","find","count","length","next","job","shift","message","backlog","then","onResult","catch","onError","push"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global Worker */\n\nexport function getTransferList(object, recursive = true, transfers) {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n\n  if (!object) {\n    // ignore\n  } else if (object instanceof ArrayBuffer) {\n    transfersSet.add(object);\n  } else if (object.buffer && object.buffer instanceof ArrayBuffer) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], false, transfersSet);\n    }\n  }\n\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : null;\n}\n\n/**\n * A worker in the WorkerFarm\n */\nclass WorkerThread {\n  constructor({url, metadata}) {\n    this.worker = new Worker(url);\n    this.isBusy = false;\n    this.metadata = metadata;\n  }\n\n  process(data) {\n    const {worker} = this;\n\n    return new Promise((resolve, reject) => {\n      worker.onmessage = e => {\n        this.isBusy = false;\n        // console.log(e.data._size, `${Date.now() - e.data._sentAt}ms`);\n        resolve(e.data);\n      };\n\n      worker.onerror = err => {\n        this.isBusy = false;\n        reject(err);\n      };\n\n      this.isBusy = true;\n      worker.postMessage(data, getTransferList(data));\n    });\n  }\n\n  terminate() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n\n/**\n * Process multiple data messages with a fleet of workers\n */\nexport class WorkerFarm {\n  /**\n   * @param workerURL {function | string} - worker function\n   * @param maxConcurrency {number} - max count of workers\n   */\n  constructor({workerURL, maxConcurrency = 1, debug = () => {}, initialMessage = null}) {\n    this.workerURL = workerURL;\n    this.workers = [];\n    this.queue = [];\n    this.debug = debug;\n\n    for (let i = 0; i < maxConcurrency; i++) {\n      this.workers[i] = new WorkerThread({\n        url: this.workerURL,\n        metadata: {name: `${i}/${maxConcurrency}`}\n      });\n    }\n\n    if (initialMessage) {\n      this.broadcast(initialMessage);\n    }\n  }\n\n  destroy() {\n    this.workers.forEach(worker => worker.terminate());\n  }\n\n  getAvailableWorker() {\n    return this.workers.find(worker => !worker.isBusy);\n  }\n\n  broadcast(data) {\n    const count = this.workers.length;\n    // queue in reverse order as bias worker searching in getAvailableWorker()\n    for (let i = count - 1; i >= 0; i--) {\n      this.workers[i].worker.postMessage(data, getTransferList(data));\n    }\n  }\n\n  next() {\n    const {queue} = this;\n\n    while (queue.length) {\n      const worker = this.getAvailableWorker();\n      if (!worker) {\n        break;\n      }\n      const job = queue.shift();\n\n      this.debug({\n        message: 'processing',\n        worker: worker.metadata.name,\n        backlog: queue.length\n      });\n\n      worker\n        .process(job.data)\n        .then(job.onResult)\n        .catch(job.onError)\n        .then(() => this.next());\n    }\n  }\n\n  process(data, onResult, onError) {\n    this.queue.push({data, onResult, onError});\n    this.next();\n  }\n}\n"],"file":"worker-utils.js"}