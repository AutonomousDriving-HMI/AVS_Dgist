"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _theme = require("../shared/theme");

var _icons = require("../shared/icons");

var _metricChart = _interopRequireDefault(require("./metric-chart"));

var _styledComponents = require("./styled-components");

var _d3Scale = require("d3-scale");

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_COLORS = (0, _d3Scale.scaleOrdinal)().range(['#12939A', '#DDB27C', '#88572C', '#FF991F', '#F15C17', '#223F9A', '#DA70BF', '#125C77', '#4DC19C', '#776E57', '#17B8BE', '#F6D18A', '#B7885E', '#FFCB99', '#F89570', '#829AE3', '#E79FD5', '#1E96BE', '#89DAC1', '#B3AD9E']);
/**
 * A component that visualizes the multiple data series. Features:
 * Each data series is shown as a line series
 * Clicking on the legend toggles the visibility of that data series
 * Legends are sorted by prominence (maximum value in the look ahead window)
 * A show all/show less button to toggle only showing the top 5 data series by value
 */

var MetricChartWithLegends =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(MetricChartWithLegends, _PureComponent);

  function MetricChartWithLegends(props) {
    var _this;

    _classCallCheck(this, MetricChartWithLegends);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MetricChartWithLegends).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_isDataVisible", function (key) {
      var _this$state = _this.state,
          showTopSeriesOnly = _this$state.showTopSeriesOnly,
          dataSeries = _this$state.dataSeries,
          dataVisibility = _this$state.dataVisibility;

      if (dataVisibility[key] === false) {
        // turned of by the user
        return false;
      }

      if (showTopSeriesOnly) {
        var topSeriesCount = _this.props.topSeriesCount;
        return dataSeries.findIndex(function (s) {
          return s.key === key;
        }) < topSeriesCount;
      }

      return true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_setHoveredDataName", function (key) {
      _this.setState({
        hoveredSeriesName: key
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_toggleDataVisibility", function (key) {
      var dataVisibility = _this.state.dataVisibility;

      _this.setState({
        dataVisibility: _objectSpread({}, dataVisibility, _defineProperty({}, key, dataVisibility[key] === false))
      });
    });

    _this.state = {
      dataSeries: _this._extractDataSeries(props),
      dataVisibility: {},
      showTopSeriesOnly: true,
      hoveredSeriesName: null
    };
    return _this;
  }

  _createClass(MetricChartWithLegends, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.data !== nextProps.data) {
        this.setState({
          dataSeries: this._extractDataSeries(nextProps)
        });
      }
    }
  }, {
    key: "_getColor",
    value: function _getColor(key) {
      var getColor = this.props.getColor;

      switch (_typeof(getColor)) {
        case 'object':
          return getColor[key];

        case 'function':
          return getColor(key);

        default:
          return getColor;
      }
    } // Extract subset of streams from all variable streams
    // Format stream data for render

  }, {
    key: "_extractDataSeries",
    value: function _extractDataSeries(_ref) {
      var data = _ref.data,
          formatTitle = _ref.formatTitle,
          getY = _ref.getY;
      var series = [];

      for (var key in data) {
        var value = data[key];

        if (Array.isArray(value)) {
          var displayName = this.props.formatTitle(key);
          var yExtent = (0, _d3Array.extent)(value, getY);
          series.push({
            key: key,
            displayName: displayName,
            color: this._getColor(key),
            data: value,
            extent: yExtent,
            max: Math.max(Math.abs(yExtent[0]), Math.abs(yExtent[1]))
          });
        }
      } // Sort data series by max value


      series.sort(function (s1, s2) {
        return s2.max - s1.max;
      });
      return series;
    } // Check if a certain data series is turned on by user settings

  }, {
    key: "_renderDataFilters",
    // Legends (also as visibility toggle) of the data streams
    value: function _renderDataFilters() {
      var _this2 = this;

      var _this$state2 = this.state,
          dataSeries = _this$state2.dataSeries,
          showTopSeriesOnly = _this$state2.showTopSeriesOnly,
          hoveredSeriesName = _this$state2.hoveredSeriesName;
      var _this$props = this.props,
          theme = _this$props.theme,
          style = _this$props.style,
          topSeriesCount = _this$props.topSeriesCount;
      var series = showTopSeriesOnly ? dataSeries.slice(0, topSeriesCount) : dataSeries;
      return _react.default.createElement(_styledComponents.FilterContainer, {
        theme: theme,
        userStyle: style.filter,
        isExpanded: !showTopSeriesOnly
      }, dataSeries.length > topSeriesCount && _react.default.createElement(_styledComponents.FilterToggle, {
        theme: theme,
        userStyle: style.filterToggle,
        isExpanded: !showTopSeriesOnly,
        onClick: function onClick() {
          return _this2.setState({
            showTopSeriesOnly: !showTopSeriesOnly
          });
        }
      }, showTopSeriesOnly ? style.iconCollapsed || _react.default.createElement(_icons.CollapsedIcon, null) : style.iconExpanded || _react.default.createElement(_icons.ExpandedIcon, null)), series.map(function (s) {
        var styleProps = {
          theme: theme,
          name: s.key,
          displayName: s.displayName,
          color: s.color,
          isHovered: hoveredSeriesName === s.key,
          isActive: _this2._isDataVisible(s.key)
        };
        return _react.default.createElement(_styledComponents.FilterItem, _extends({
          userStyle: style.filterItem
        }, styleProps, {
          key: "multiplot-".concat(s.key),
          onMouseOver: function onMouseOver() {
            return _this2._setHoveredDataName(s.key);
          },
          onMouseOut: function onMouseOut() {
            return _this2._setHoveredDataName(null);
          },
          onClick: function onClick() {
            return _this2._toggleDataVisibility(s.key);
          }
        }), _react.default.createElement(_styledComponents.FilterLegend, _extends({}, styleProps, {
          userStyle: style.filterLegend
        }), styleProps.isActive ? style.iconOn || _react.default.createElement(_icons.CheckAltIcon, null) : style.iconOff), _react.default.createElement("span", null, s.displayName));
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react.default.createElement("div", null, _react.default.createElement(_metricChart.default, _extends({}, this.props, {
        highlightSeries: this.state.hoveredSeriesName,
        onSeriesMouseOver: function onSeriesMouseOver(key) {
          return _this3._setHoveredDataName(key);
        },
        onMouseLeave: function onMouseLeave() {
          return _this3._setHoveredDataName(null);
        },
        dataFilter: this._isDataVisible
      })), this._renderDataFilters());
    }
  }]);

  return MetricChartWithLegends;
}(_react.PureComponent);

_defineProperty(MetricChartWithLegends, "propTypes", Object.assign({}, _metricChart.default.propTypes, {
  topSeriesCount: _propTypes.default.number
}));

_defineProperty(MetricChartWithLegends, "defaultProps", Object.assign({}, _metricChart.default.defaultProps, {
  topSeriesCount: 5,
  getColor: DEFAULT_COLORS
}));

var _default = (0, _theme.withTheme)(MetricChartWithLegends);

exports.default = _default;
//# sourceMappingURL=rich-metric-chart.js.map