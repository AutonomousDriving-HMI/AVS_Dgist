function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import styled from '@emotion/styled';
import { evaluateStyle } from '../theme';
const RadioItem = styled.div(props => _objectSpread({
  outline: 'none',
  cursor: 'pointer',
  pointerEvents: props.isEnabled ? 'all' : 'none',
  display: 'flex',
  width: '100%',
  alignItems: 'center',
  justifyContent: 'space-between',
  marginTop: props.theme.spacingTiny,
  marginBottom: props.theme.spacingTiny
}, evaluateStyle(props.userStyle, props)));
const RadioButton = styled.div(props => {
  let color = props.theme.controlColorPrimary;

  if (!props.isEnabled) {
    color = props.theme.controlColorDisabled;
  } else if (props.hasFocus) {
    color = props.theme.controlColorActive;
  } else if (props.isHovered) {
    color = props.theme.controlColorHovered;
  }

  return _objectSpread({
    position: 'relative',
    boxSizing: 'border-box',
    borderRadius: '50%',
    width: props.size,
    height: props.size,
    marginLeft: props.theme.spacingSmall,
    background: props.theme.background,
    borderStyle: 'solid',
    borderWidth: 2,
    borderColor: color,
    color,
    flexShrink: 0
  }, evaluateStyle(props.userStyle, props));
});
const RadioIcon = styled.div(props => _objectSpread({
  position: 'absolute',
  left: '50%',
  top: '50%',
  transform: 'translate(-50%,-50%)',
  width: 16,
  height: 16,
  textAlign: 'center',
  lineHeight: '16px',
  path: {
    fill: 'currentColor'
  }
}, evaluateStyle(props.userStyle, props))); // Select component that takes an array and accessors and populates a
// radio inputs group

export default class RadioBoxItem extends PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      hasFocus: false,
      isHovered: false
    });

    _defineProperty(this, "_onMouseEnter", () => this.setState({
      isHovered: true
    }));

    _defineProperty(this, "_onMouseLeave", () => this.setState({
      isHovered: false
    }));

    _defineProperty(this, "_onFocus", () => this.setState({
      hasFocus: true
    }));

    _defineProperty(this, "_onBlur", () => this.setState({
      hasFocus: false
    }));

    _defineProperty(this, "_onKeyDown", evt => {
      if (evt.keyCode === 32) {
        // space
        this.props.onClick(evt);
      }
    });
  }

  render() {
    const _this$props = this.props,
          theme = _this$props.theme,
          style = _this$props.style,
          size = _this$props.size,
          isSelected = _this$props.isSelected,
          label = _this$props.label,
          isEnabled = _this$props.isEnabled;
    const styleProps = {
      theme,
      size,
      isSelected,
      hasFocus: this.state.hasFocus,
      isHovered: this.state.isHovered,
      isEnabled
    };
    return React.createElement(RadioItem, _extends({}, styleProps, {
      userStyle: style.item,
      tabIndex: isEnabled ? 0 : -1,
      onMouseEnter: this._onMouseEnter,
      onMouseLeave: this._onMouseLeave,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onKeyDown: this._onKeyDown,
      onClick: this.props.onClick
    }), label, React.createElement(RadioButton, _extends({}, styleProps, {
      userStyle: style.button
    }), React.createElement(RadioIcon, _extends({}, styleProps, {
      userStyle: style.icon
    }), isSelected ? style.iconSelected || '●' : null)));
  }

}

_defineProperty(RadioBoxItem, "propTypes", {
  onClick: PropTypes.func,
  label: PropTypes.string,
  style: PropTypes.object,
  isEnabled: PropTypes.bool,
  isSelected: PropTypes.bool
});

_defineProperty(RadioBoxItem, "defaultProps", {
  style: {},
  isEnabled: true,
  onClick: () => {}
});
//# sourceMappingURL=radio-box-item.js.map