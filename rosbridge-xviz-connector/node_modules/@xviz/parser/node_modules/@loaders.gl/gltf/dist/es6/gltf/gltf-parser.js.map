{"version":3,"sources":["../../../src/gltf/gltf-parser.js"],"names":["getBytesFromComponentType","getSizeFromAccessorType","GLBParser","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_OPTIONS","createImages","GLTFParser","constructor","options","log","console","out","Object","assign","DracoDecoder","parse","gltf","optionsParam","ArrayBuffer","glbParser","json","_resolveToTree","parseAsync","_loadLinkedAssets","then","getApplicationData","key","data","getExtraData","extras","getExtension","extensionName","extensions","getRequiredExtensions","extensionsRequired","getUsedExtensions","extensionsUsed","unpackMesh","mesh","primitives","map","unpackPrimitive","bind","primitive","compressedMesh","UBER_draco_mesh_compression","compressedPointCloud","UBER_draco_point_cloud_compression","unpackedPrimitive","mode","material","dracoDecoder","decodedData","decodeMesh","destroy","indices","attributes","decodePointCloud","getScene","index","_get","getNode","getSkin","getMesh","getDecompressedMesh","Error","_decompressUberDracoPointCloud","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","warn","_getFullUri","uri","base","startsWith","substr","lastIndexOf","promises","buffers","forEach","buffer","push","window","fetch","res","arrayBuffer","Promise","all","_postProcessGLTF","images","image","parseImage","filter","Boolean","scenes","scene","parseScene","undefined","bufferViews","bufView","i","_resolveBufferView","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","_resolveMaterial","meshes","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","_resolveScene","id","children","child","camera","inverseBindMatrices","attribute","normalTexture","occlusionTexture","emissiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","components","bytesPerElement","source","parameters","glEnum","_enumSamplerParameter","getImageAsync","resolve","img","Image","crossOrigin","onload","src","byteOffset","Uint8Array","byteLength","bufferViewIndex","compressedData","decodedPrimitive","decode","header","drawMode","_resolveCamera","perspective","orthographic"],"mappings":"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","sourcesContent":["import {getBytesFromComponentType, getSizeFromAccessorType} from '../utils/gltf-type-utils';\nimport GLBParser from '../glb/glb-parser';\n\nconst GL_SAMPLER = {\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\nconst DEFAULT_OPTIONS = {\n  createImages: false\n};\n\nexport default class GLTFParser {\n  constructor(options = {}) {\n    // TODO - move parsing to parse\n    this.log = console; // eslint-disable-line\n    this.out = {};\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // Soft dependency on Draco, needs to be imported and supplied by app\n    this.DracoDecoder = this.options.DracoDecoder || null;\n  }\n\n  parse(gltf, optionsParam = {}) {\n    const options = Object.assign({}, this.options, optionsParam);\n\n    // GLTF can be JSON or binary (GLB)\n    if (gltf instanceof ArrayBuffer) {\n      this.glbParser = new GLBParser();\n      this.gltf = this.glbParser.parse(gltf).json;\n      this.json = this.gltf;\n    } else {\n      this.glbParser = null;\n      this.gltf = gltf;\n      this.json = gltf;\n    }\n\n    this._resolveToTree(options);\n\n    return this.gltf;\n  }\n\n  parseAsync(gltf, optionsParam = {}) {\n    const options = Object.assign({}, this.options, optionsParam);\n\n    // GLTF can be JSON or binary (GLB)\n    if (gltf instanceof ArrayBuffer) {\n      this.glbParser = new GLBParser();\n      this.gltf = this.glbParser.parse(gltf).json;\n      this.json = this.gltf;\n    } else {\n      this.glbParser = null;\n      this.gltf = gltf;\n      this.json = gltf;\n    }\n\n    // TODO: consider using async\n    return this._loadLinkedAssets(options).then(() => {\n      this._resolveToTree(options);\n      return this.gltf;\n    });\n  }\n\n  // Accessors\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    // TODO - Data is already unpacked by GLBParser\n    return this.json.extensions[extensionName];\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired;\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed;\n  }\n\n  // DATA UNPACKING\n\n  // Unpacks all the primitives in a mesh\n  unpackMesh(mesh) {\n    return mesh.primitives.map(this.unpackPrimitive.bind(this));\n  }\n\n  // Unpacks one mesh primitive\n  unpackPrimitive(primitive) {\n    const compressedMesh =\n      primitive.extensions && primitive.extensions.UBER_draco_mesh_compression;\n    const compressedPointCloud =\n      primitive.extensions && primitive.extensions.UBER_draco_point_cloud_compression;\n\n    const unpackedPrimitive = {\n      mode: primitive.mode,\n      material: primitive.material\n    };\n\n    if (compressedMesh) {\n      const dracoDecoder = new this.DracoDecoder();\n      const decodedData = dracoDecoder.decodeMesh(compressedMesh);\n      dracoDecoder.destroy();\n\n      Object.assign(unpackedPrimitive, {\n        indices: decodedData.indices,\n        attributes: decodedData.attributes\n      });\n\n    } else if (compressedPointCloud) {\n      const dracoDecoder = new this.DracoDecoder();\n      const decodedData = dracoDecoder.decodePointCloud(compressedPointCloud);\n      dracoDecoder.destroy();\n\n      Object.assign(unpackedPrimitive, {\n        mode: 0,\n        attributes: decodedData.attributes\n      });\n    } else {\n      // No compression - just a glTF mesh primitive\n      // TODO - Resolve all accessors\n    }\n  }\n\n  // PRIVATE\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getDecompressedMesh(index) {\n    if (!this.DracoDecoder) {\n      throw new Error('DracoDecoder not available');\n    }\n\n    const mesh = this._get('meshes', index);\n\n    for (const primitive of mesh.primitives) {\n      // TODO: DracoMesh extension\n\n      const extensions = primitive.extensions;\n      if ('UBER_draco_point_cloud_compression' in extensions) {\n        this._decompressUberDracoPointCloud(primitive, extensions);\n      }\n    }\n\n    return mesh;\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _getFullUri(uri, base) {\n    if (uri.startsWith('data:') || uri.startsWith('http:') || uri.startsWith('https:')) {\n      return uri;\n    }\n\n    return base.substr(0, base.lastIndexOf('/') + 1) + uri;\n  }\n\n  // Start loading linked assets\n  _loadLinkedAssets(options) {\n    const promises = [];\n\n    if (!this.glbParser) {\n      this.gltf.buffers.forEach(buffer => {\n        // TODO: handle base64 encoded files in the non-async path\n        if (buffer.uri) {\n          // TODO: Use loaders.gl readFile API so that this works on node.js as well\n          promises.push(window\n            .fetch(this._getFullUri(buffer.uri, options.uri))\n            .then(res => res.arrayBuffer())\n            .then(data => {\n              buffer.data = data;\n            }));\n        }\n      });\n    }\n\n    return Promise.all(promises);\n  }\n\n  _postProcessGLTF(options = {}) {\n    // Create all images (if requested)\n    this.out.images = (this.gltf.images || [])\n      .map(image => this.parseImage(image, options))\n      .filter(Boolean);\n\n    // Normalize all scenes\n    this.out.scenes = (this.gltf.scenes || [])\n      .map(scene => this.parseScene(scene, options))\n      .filter(Boolean);\n\n    if (this.gltf.scene !== undefined) {\n      this.out.scene = this.gltf.scenes[this.gltf.scene];\n    }\n\n    return this;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // PREPARATION STEP: CROSS-LINK INDEX RESOLUTION, ENUM LOOKUP, CONVENIENCE CALCULATIONS\n  /* eslint-disable complexity */\n  _resolveToTree(options = {}) {\n    const {gltf} = this;\n\n    (gltf.bufferViews || []).forEach((bufView, i) => this._resolveBufferView(bufView, i));\n\n    (gltf.images || []).forEach((image, i) => this._resolveImage(image, i, options));\n    (gltf.samplers || []).forEach((sampler, i) => this._resolveSampler(sampler, i));\n    (gltf.textures || []).forEach((texture, i) => this._resolveTexture(texture, i));\n\n    (gltf.accessors || []).forEach((accessor, i) => this._resolveAccessor(accessor, i));\n    (gltf.materials || []).forEach((material, i) => this._resolveMaterial(material, i));\n    (gltf.meshes || []).forEach((mesh, i) => this._resolveMesh(mesh, i));\n\n    (gltf.nodes || []).forEach((node, i) => this._resolveNode(node, i));\n\n    (gltf.skins || []).forEach((skin, i) => this._resolveSkin(skin, i));\n\n    (gltf.scenes || []).forEach((scene, i) => this._resolveScene(scene, i));\n\n    if (gltf.scene !== undefined) {\n      gltf.scene = gltf.scenes[this.gltf.scene];\n    }\n\n    return gltf;\n  }\n  /* eslint-enable complexity */\n\n  _resolveScene(scene, index) {\n    scene.id = `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n  }\n\n  _resolveNode(node, index) {\n    node.id = `node-${index}`;\n    node.children = (node.children || []).map(child => this.getNode(child));\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n  }\n\n  _resolveSkin(skin, index) {\n    skin.id = `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh.id = `mesh-${index}`;\n    for (const primitive of mesh.primitives) {\n      for (const attribute in primitive.attributes) {\n        primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n      }\n      if (primitive.indices !== undefined) {\n        primitive.indices = this.getAccessor(primitive.indices);\n      }\n      if (primitive.material !== undefined) {\n        primitive.material = this.getMaterial(primitive.material);\n      }\n    }\n  }\n\n  _resolveMaterial(material, index) {\n    material.id = `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor.id = `accessor-${index}`;\n    accessor.bufferView = this.getBufferView(accessor.bufferView);\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor);\n    accessor.components = getSizeFromAccessorType(accessor);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n  }\n\n  _resolveTexture(texture, index) {\n    texture.id = `texture-${index}`;\n    texture.sampler = this.getSampler(texture.sampler);\n    texture.source = this.getImage(texture.source);\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler.id = `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index, options) {\n    image.id = `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n    // TODO - Image creation could be done on getImage instead of during load\n    const {createImages = true} = options;\n    if (createImages) {\n      image.image = this.glbParser.getImage(image);\n    } else {\n      image.getImageAsync = () => {\n        if (this.glbParser) {\n          return this.glbParser.getImageAsync(image);\n        } else if (image.uri) {\n          // TODO: Maybe just return the URL?\n          // TODO: Maybe use loaders.gl/core loadImage?\n          return new Promise(resolve => {\n            /* global Image */\n            const img = new Image();\n            img.crossOrigin = 'anonymous';\n            img.onload = () => resolve(img);\n            img.src = this._getFullUri(image.uri, options.uri);\n          });\n        }\n\n        // cannot get image\n        return null;\n      };\n    }\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView.id = `bufferView-${index}`;\n    bufferView.buffer = this.getBuffer(bufferView.buffer);\n\n    if (this.glbParser) {\n      bufferView.data = this.glbParser.getBufferView(bufferView);\n    } else {\n      const byteOffset = bufferView.byteOffset || 0;\n      bufferView.data = new Uint8Array(bufferView.buffer.data, byteOffset, bufferView.byteLength);\n    }\n  }\n\n  _decompressUberDracoPointCloud(primitive, extensions) {\n    const bufferViewIndex = extensions.UBER_draco_point_cloud_compression.bufferView;\n    const bufferView = this.getBufferView(bufferViewIndex);\n\n    // TODO: change to getArrayFromBufferView()\n    const compressedData = this.glbParser.getBufferView(bufferView);\n\n    const dracoDecoder = new this.DracoDecoder();\n    const decodedPrimitive = dracoDecoder.decode(compressedData);\n\n    // TODO: what to do about original attributes\n    primitive.attributes = decodedPrimitive.attributes;\n    // TODO: stashing header on primitive, not sure if necessary\n    primitive.header = decodedPrimitive.header;\n\n    // TODO: drawmode is currently undefined, look into dracodecoder to set to 0 for point cloud\n    primitive.drawMode = decodedPrimitive.drawMode || 0;\n  }\n\n  // PREPROC\n\n  _resolveCamera(camera) {\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n  }\n\n}\n"],"file":"gltf-parser.js"}