"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseSynchronizer = _interopRequireDefault(require("./base-synchronizer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var StreamSynchronizer =
/*#__PURE__*/
function (_BaseSynchronizer) {
  _inherits(StreamSynchronizer, _BaseSynchronizer);

  /**
   * @classdesc
   * Lets the application do synchronized walks through a set of time slices
   * and allows the app to get the data object closes to a given time.
   *
   * @class
   * @param Number startTime - The starting GPS time
   * @param {XVIZStreamBuffer} streamBuffer - The stream buffer
   * - Each timeslice object must contain a GPS timestamp
   */
  function StreamSynchronizer(streamBuffer, opts) {
    var _this;

    _classCallCheck(this, StreamSynchronizer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamSynchronizer).call(this, opts));
    _this.streamBuffer = streamBuffer;
    return _this;
  }

  _createClass(StreamSynchronizer, [{
    key: "_empty",
    value: function _empty() {
      return !this.streamBuffer || !this.streamBuffer.size;
    }
    /**
     * Find and process stream data in the range (start, end] for process
     * Returns a list of streams sorted by decending time
     *
     * @param Number startTime - The time to start from.
     * @param Number endTime - The time to end at.
     */

  }, {
    key: "_getTimeRangeInReverse",
    value: function _getTimeRangeInReverse(startTime, endTime) {
      var slices = this.streamBuffer.getTimeslices({
        start: startTime,
        end: endTime
      }).reverse();
      return slices.map(function (timeslice) {
        return timeslice.streams;
      }).filter(Boolean);
    }
  }]);

  return StreamSynchronizer;
}(_baseSynchronizer.default);

exports.default = StreamSynchronizer;
//# sourceMappingURL=stream-synchronizer.js.map