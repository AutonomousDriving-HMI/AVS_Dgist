{"version":3,"sources":["../../../src/imagery-layer/imagery-layer.js"],"names":["Layer","Model","Geometry","loadTextures","Texture2D","IMAGERY_VERTEX_SHADER","IMAGERY_FRAGMENT_SHADER","GridGeometry","getTexture","gl","src","opts","urls","then","textures","catch","error","Error","Promise","resolve","getTextureFromData","data","defaultProps","heightMap","heightMapBounds","type","value","compare","heightRange","imagery","imageryBounds","uCount","min","vCount","desaturate","max","transparentColor","tintColor","ImageryLayer","initializeState","context","getExtension","setState","model","getModel","updateState","props","oldProps","changeFlags","state","texture","setUniforms","heightMapTexture","hasHeightMap","imageryTexture","geometry","setGeometry","setVertexCount","getVertexCount","propsChanged","id","vs","fs","modules","shaderCache","vertexCount","isIndexed","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport {Model, Geometry, loadTextures, Texture2D} from 'luma.gl';\n\nimport IMAGERY_VERTEX_SHADER from './imagery-layer-vertex';\nimport IMAGERY_FRAGMENT_SHADER from './imagery-layer-fragment';\n\nimport GridGeometry from './grid-geometry';\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadTextures(gl, {urls: [src], ...opts})\n      .then(textures => textures[0])\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src, opts)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, {data, ...opts});\n}\n\nconst defaultProps = {\n  heightMap: null,\n  heightMapBounds: {type: 'array', value: [0, 0, 1, 1], compare: true},\n  heightRange: {type: 'array', value: [0, 1], compare: true},\n  imagery: null,\n  imageryBounds: {type: 'array', value: [0, 0, 1, 1], compare: true},\n  uCount: {type: 'number', value: 1, min: 0},\n  vCount: {type: 'number', value: 1, min: 0},\n  desaturate: {type: 'number', value: 0, min: 0, max: 1},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class ImageryLayer extends Layer {\n  initializeState() {\n    const {gl} = this.context;\n    // TODO/ib - Enabled to allow debugging of heightmaps, not perfect but really helps\n    gl.getExtension('OES_standard_derivatives');\n    this.setState({model: this.getModel(gl)});\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    const {gl} = this.context;\n    const {model} = this.state;\n\n    const {heightMap, imagery, uCount, vCount} = props;\n    if (heightMap && heightMap !== oldProps.heightMap) {\n      getTexture(gl, heightMap).then(texture => {\n        model.setUniforms({heightMapTexture: texture, hasHeightMap: true});\n      });\n    }\n    if (imagery !== oldProps.imagery) {\n      getTexture(gl, imagery).then(texture => {\n        model.setUniforms({imageryTexture: texture});\n      });\n    }\n    if (uCount !== oldProps.uCount || vCount !== oldProps.vCount) {\n      const geometry = new GridGeometry({uCount, vCount});\n      model.setGeometry(geometry);\n      model.setVertexCount(geometry.getVertexCount());\n    }\n    if (changeFlags.propsChanged) {\n      const {\n        heightMapBounds,\n        heightRange,\n        imageryBounds,\n        desaturate,\n        transparentColor,\n        tintColor\n      } = props;\n      model.setUniforms({\n        heightMapBounds,\n        heightRange,\n        imageryBounds,\n        desaturate,\n        transparentColor,\n        tintColor\n      });\n    }\n  }\n\n  getModel(gl) {\n    // 3d surface\n    return new Model(gl, {\n      id: this.props.id,\n      vs: IMAGERY_VERTEX_SHADER,\n      fs: IMAGERY_FRAGMENT_SHADER,\n      modules: ['picking'],\n      shaderCache: this.context.shaderCache,\n      geometry: new Geometry(),\n      vertexCount: 0,\n      isIndexed: true\n    });\n  }\n}\n\nImageryLayer.layerName = 'ImageryLayer';\nImageryLayer.defaultProps = defaultProps;\n"],"file":"imagery-layer.js"}