"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constant = require("./constant");

var _xvizBaseBuilder = _interopRequireDefault(require("./xviz-base-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * XVIZVariableBuilder manages a dictionary of streams -> variables, where
 * variables is an array of objects with values & id.
 *
 * This is the shape returned from getData()
 *
 * {
 *   /plan/time: {
 *     variables: [
 *       {
 *         base: {
 *           object_id: '123'
 *         },
 *         values: [1, 2, 3, 4],
 *       }
 *     ]
 *   }
 * }
 */
var XVIZVariableBuilder =
/*#__PURE__*/
function (_XVIZBaseBuilder) {
  _inherits(XVIZVariableBuilder, _XVIZBaseBuilder);

  function XVIZVariableBuilder(props) {
    var _this;

    _classCallCheck(this, XVIZVariableBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(XVIZVariableBuilder).call(this, _objectSpread({}, props, {
      category: _constant.CATEGORY.variable
    }))); // Stores variable data by stream then id
    // They will then be group when constructing final object

    _this._data = new Map(); // inflight builder data

    _this._id = null;
    _this._values = null;
    return _this;
  }

  _createClass(XVIZVariableBuilder, [{
    key: "id",
    value: function id(identifier) {
      this.validatePropSetOnce('_id');
      this._id = identifier;
      return this;
    }
  }, {
    key: "values",
    value: function values(_values) {
      this.validatePropSetOnce('_values');

      if (!(_values instanceof Array)) {
        this.validateError('Input `values` must be array');
      }

      this._values = _values;
      return this;
    }
  }, {
    key: "getData",
    value: function getData() {
      this._flush();

      if (this._data.size === 0) {
        return null;
      }

      var variablesData = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var _step$value = _slicedToArray(_step.value, 2),
              streamId = _step$value[0],
              ids = _step$value[1];

          var variables = [];
          ids.forEach(function (entry) {
            return variables.push(entry);
          });
          variablesData[streamId] = {
            variables: variables
          };
        };

        for (var _iterator = this._data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return variablesData;
    } // Lookup by stream, then id to store [values, id]]

  }, {
    key: "_addVariableEntry",
    value: function _addVariableEntry() {
      if (!this._dataPending()) {
        return;
      } // Lookup where to put the value


      var fieldName = 'doubles';
      var value = this._values[0];

      if (typeof value === 'string' || value instanceof String) {
        fieldName = 'strings';
      } else if (typeof value === 'boolean') {
        fieldName = 'bools';
      }

      var entry = {
        values: _defineProperty({}, fieldName, this._values)
      };

      if (this._id) {
        entry.base = {
          object_id: this._id
        }; // eslint-disable-line camelcase
      }

      var streamEntry = this._data.get(this._streamId);

      if (streamEntry) {
        // We have stream, now get id
        var idEntry = streamEntry.get(this._id);

        if (idEntry) {
          // already have values for this objet
          this.validateError("Input `values` already set for id ".concat(this._id));
        } else {
          // create new mapping of id -> entry
          streamEntry.set(this._id, entry);
        }
      } else {
        // No stream
        // create new stream -> id
        var _idEntry = new Map();

        _idEntry.set(this._id, entry); // create stream entry


        this._data.set(this._streamId, _idEntry);
      }
    }
  }, {
    key: "_dataPending",
    value: function _dataPending() {
      return this._values !== null || this._id !== null;
    }
  }, {
    key: "_validate",
    value: function _validate() {
      if (this._dataPending()) {
        _get(_getPrototypeOf(XVIZVariableBuilder.prototype), "_validate", this).call(this);

        if (this._values === null) {
          this.validateWarn("Stream".concat(this._streamId, " values are not provided."));
        }
      }
    }
  }, {
    key: "_flush",
    value: function _flush() {
      this._validate();

      this._addVariableEntry();

      this._reset();
    } // reset the inflight values

  }, {
    key: "_reset",
    value: function _reset() {
      this._id = null;
      this._values = null;
    }
  }]);

  return XVIZVariableBuilder;
}(_xvizBaseBuilder.default);

exports.default = XVIZVariableBuilder;
//# sourceMappingURL=xviz-variable-builder.js.map