function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import styled from '@emotion/styled';
import { withTheme, evaluateStyle } from '../theme';
import RadioBoxItem from './radio-box-item';
const WrapperComponent = styled.div(props => _objectSpread({}, props.theme.__reset__, {
  color: props.isEnabled ? props.theme.textColorPrimary : props.theme.textColorDisabled
}, evaluateStyle(props.userStyle, props))); // Select component that takes an array and accessors and populates a
// radio inputs group

class RadioBox extends PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_onClick", value => {
      this.props.onChange(value);
    });
  }

  render() {
    const _this$props = this.props,
          theme = _this$props.theme,
          className = _this$props.className,
          style = _this$props.style,
          data = _this$props.data,
          value = _this$props.value,
          isEnabled = _this$props.isEnabled;
    const _style$size = style.size,
          size = _style$size === void 0 ? theme.controlSize : _style$size;
    const styleProps = {
      theme,
      size,
      value,
      isEnabled
    };
    return React.createElement(WrapperComponent, _extends({
      className: className
    }, styleProps, {
      userStyle: style.wrapper
    }), Object.keys(data).map(key => React.createElement(RadioBoxItem, {
      key: key,
      label: data[key],
      theme: theme,
      size: size,
      style: style,
      isSelected: key === value,
      isEnabled: isEnabled,
      onClick: () => this._onClick(key)
    })));
  }

}

_defineProperty(RadioBox, "propTypes", {
  value: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  data: PropTypes.object.isRequired,
  className: PropTypes.string,
  style: PropTypes.object,
  isEnabled: PropTypes.bool
});

_defineProperty(RadioBox, "defaultProps", {
  className: '',
  style: {},
  isEnabled: true,
  onChange: () => {}
});

export default withTheme(RadioBox);
//# sourceMappingURL=index.js.map