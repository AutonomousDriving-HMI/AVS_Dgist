function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import XVIZObject from './xviz-object';

var XVIZObjectCollection =
/*#__PURE__*/
function () {
  function XVIZObjectCollection() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$ObjectType = _ref.ObjectType,
        ObjectType = _ref$ObjectType === void 0 ? XVIZObject : _ref$ObjectType;

    _classCallCheck(this, XVIZObjectCollection);

    // A map of all XVIZ objects, across time
    this.objects = new Map();
    this.ObjectType = ObjectType;
  } // Drop all XVIZ objects


  _createClass(XVIZObjectCollection, [{
    key: "clear",
    value: function clear() {
      this.objects.clear();
    }
  }, {
    key: "count",
    value: function count() {
      return this.objects.size;
    } // Create a new XVIZ object at timestamp if it does not exist.

  }, {
    key: "observe",
    value: function observe(id, timestamp) {
      if (id === undefined || id === null) {
        return;
      } // Map keys use strict equal


      id = id.toString();

      if (this.objects.has(id)) {
        var object = this.objects.get(id);

        object._observe(timestamp);
      } else {
        var _object = new this.ObjectType({
          id: id,
          timestamp: timestamp
        });

        this.objects.set(id, _object);
      }
    }
  }, {
    key: "get",
    value: function get(id) {
      if (id === undefined || id === null) {
        return null;
      } // Map keys use strict equal


      id = id.toString();
      return this.objects.get(id) || null;
    } // Clears all XVIZ object props for a fresh new frame.

  }, {
    key: "resetAll",
    value: function resetAll() {
      this.objects.forEach(function (object) {
        return object._reset();
      });
    } // Returns all XVIZ objects

  }, {
    key: "getAll",
    value: function getAll() {
      var result = {};
      this.objects.forEach(function (object, id) {
        result[id] = object;
      });
      return result;
    } // Returns all XVIZ objects present in current frame

  }, {
    key: "getAllInCurrentFrame",
    value: function getAllInCurrentFrame() {
      var result = {};
      this.objects.forEach(function (object, id) {
        if (object.isValid) {
          result[id] = object;
        }
      });
      return result;
    } // Removes XVIZ objects that are outside of a time window

  }, {
    key: "prune",
    value: function prune(startTime, endTime) {
      var objects = this.objects;
      var idsToRemove = [];
      objects.forEach(function (object, id) {
        if (object.endTime < startTime || object.startTime > endTime) {
          idsToRemove.push(id);
        }
      });
      idsToRemove.forEach(function (id) {
        objects.delete(id);
      });
    }
  }]);

  return XVIZObjectCollection;
}();

export { XVIZObjectCollection as default };
//# sourceMappingURL=xviz-object-collection.js.map