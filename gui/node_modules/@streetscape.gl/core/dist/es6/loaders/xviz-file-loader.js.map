{"version":3,"sources":["../../../src/loaders/xviz-file-loader.js"],"names":["assert","LOG_STREAM_MESSAGE","parseStreamMessage","StreamSynchronizer","XVIZStreamBuffer","XVIZLoaderInterface","DEFUALT_BATCH_SIZE","XVIZFileLoader","constructor","options","message","type","METADATA","set","streamBuffer","_setMetadata","emit","TIMESLICE","oldVersion","valueOf","insert","getStreams","DONE","error","timingsFilePath","getFilePath","_timingsFilePath","_getFilePath","_batchSize","maxConcurrency","_isOpen","isOpen","connect","_loadTimings","then","data","_numberOfFrames","timing","length","_loadMetadata","_loadNextBatch","close","getBufferRange","range","getLoadedTimeRange","start","end","seek","timestamp","fetch","resp","json","metadataPath","_loadFile","worker","startFrame","promises","i","filePath","push","Promise","all","filter","Boolean","fileFormat","toLowerCase","match","file","arrayBuffer","reject","onResult","_onMessage","onError","_onError"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global fetch */\nimport assert from 'assert';\nimport {\n  LOG_STREAM_MESSAGE,\n  parseStreamMessage,\n  StreamSynchronizer,\n  XVIZStreamBuffer\n} from '@xviz/parser';\n\nimport XVIZLoaderInterface from './xviz-loader-interface';\n\nconst DEFUALT_BATCH_SIZE = 4;\n\nexport default class XVIZFileLoader extends XVIZLoaderInterface {\n  constructor(options) {\n    super(options);\n\n    assert(options.timingsFilePath && options.getFilePath);\n\n    this._timingsFilePath = options.timingsFilePath;\n    this._getFilePath = options.getFilePath;\n    this._batchSize = options.maxConcurrency || DEFUALT_BATCH_SIZE;\n\n    this.streamBuffer = new XVIZStreamBuffer();\n    this._isOpen = false;\n  }\n\n  isOpen() {\n    return this._isOpen;\n  }\n\n  connect() {\n    this._isOpen = true;\n    this._loadTimings().then(data => {\n      // Adding 1 is to account for the metadata file\n      this._numberOfFrames = data.timing.length + 1;\n      this._loadMetadata().then(() => this._loadNextBatch(1));\n    });\n  }\n\n  close() {\n    // Stop file loading\n    this._isOpen = false;\n  }\n\n  getBufferRange() {\n    const range = this.streamBuffer.getLoadedTimeRange();\n    if (range) {\n      return [[range.start, range.end]];\n    }\n    return [];\n  }\n\n  seek(timestamp) {\n    // TODO incomplete\n    super.seek(timestamp);\n  }\n\n  _loadTimings() {\n    return fetch(this._timingsFilePath).then(resp => resp.json());\n  }\n\n  _loadMetadata() {\n    const metadataPath = this._getFilePath(0);\n    assert(metadataPath);\n    return this._loadFile(metadataPath, {worker: false});\n  }\n\n  _loadNextBatch(startFrame) {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    if (startFrame >= this._numberOfFrames) {\n      return;\n    }\n\n    const promises = [];\n    for (let i = 0; i < this._batchSize && startFrame + i < this._numberOfFrames; i++) {\n      const filePath = this._getFilePath(startFrame + i);\n      assert(filePath);\n      promises.push(this._loadFile(filePath, this.options));\n    }\n\n    // if there are more frames need to fetch\n    Promise.all(promises.filter(Boolean)).then(() => {\n      this._loadNextBatch(startFrame + this._batchSize);\n    });\n  }\n\n  _loadFile(filePath, options) {\n    const fileFormat = filePath.toLowerCase().match(/[^\\.]*$/)[0];\n\n    let file;\n    switch (fileFormat) {\n      case 'glb':\n        file = fetch(filePath).then(resp => resp.arrayBuffer());\n        break;\n\n      case 'json':\n        file = fetch(filePath).then(resp => resp.json());\n        break;\n\n      default:\n        return Promise.reject('Unknown file format');\n    }\n\n    return file.then(data => {\n      // if not open, do not parse the message\n      if (this._isOpen) {\n        parseStreamMessage({\n          message: data,\n          onResult: this._onMessage,\n          onError: this._onError,\n          worker: options.worker,\n          maxConcurrency: options.maxConcurrency\n        });\n      }\n    });\n  }\n\n  _onMessage = message => {\n    switch (message.type) {\n      case LOG_STREAM_MESSAGE.METADATA:\n        this.set('logSynchronizer', new StreamSynchronizer(this.streamBuffer));\n        this._setMetadata(message);\n        this.emit('ready', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.TIMESLICE:\n        const oldVersion = this.streamBuffer.valueOf();\n        this.streamBuffer.insert(message);\n        if (this.streamBuffer.valueOf() !== oldVersion) {\n          this.set('streams', this.streamBuffer.getStreams());\n        }\n        this.emit('update', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.DONE:\n        this.emit('finish', message);\n        break;\n\n      default:\n        this.emit('error', message);\n    }\n  };\n\n  _onError = error => {\n    this.emit('error', error);\n  };\n}\n"],"file":"xviz-file-loader.js"}