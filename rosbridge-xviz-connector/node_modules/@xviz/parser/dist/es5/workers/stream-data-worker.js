"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _xvizConfig = require("../config/xviz-config");

var _parseStreamDataMessage = require("../parsers/parse-stream-data-message");

var _serialize = require("../parsers/serialize");

var _workerUtils = require("../utils/worker-utils");

var _constants = require("../constants");

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var _default = function _default(config) {
  return function (self) {
    (0, _xvizConfig.setXVIZConfig)(config);

    function onResult(message) {
      var transfers = new Set();

      switch (message.type) {
        case _constants.LOG_STREAM_MESSAGE.TIMESLICE:
          for (var streamName in message.streams) {
            var stream = message.streams[streamName];
            (0, _workerUtils.getTransferList)(stream.pointCloud, true, transfers);

            if (stream.images && stream.images.length) {
              stream.images.forEach(function (image) {
                return (0, _workerUtils.getTransferList)(image, true, transfers);
              });
            }
          }

          break;

        case _constants.LOG_STREAM_MESSAGE.VIDEO_FRAME:
          // v1 video stream
          (0, _workerUtils.getTransferList)(message.imageData, false, transfers);
          break;

        default:
      }

      message = (0, _serialize.preSerialize)(message);
      /* uncomment for debug */
      // message._size = {
      //   arraybuffer: transfers.size
      // };
      // message._sentAt = Date.now();

      self.postMessage(message, Array.from(transfers));
    }

    function onError(error) {
      throw error;
    }

    self.onmessage = function (e) {
      if (e.data && e.data.xvizConfig) {
        (0, _xvizConfig.setXVIZConfig)(e.data.xvizConfig);
      } else if (e.data) {
        (0, _parseStreamDataMessage.parseStreamDataMessage)(e.data, onResult, onError);
      }
    };
  };
};

exports.default = _default;
//# sourceMappingURL=stream-data-worker.js.map