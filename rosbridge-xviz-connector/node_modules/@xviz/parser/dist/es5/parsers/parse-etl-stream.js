"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseEtlStream = parseEtlStream;

var _parseXvizStream = require("./parse-xviz-stream");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function noop() {}
/**
 * Extract primitives and variables from an XVIZ stream
 *
 * @param {Array} data - datums with shape {primitives, variables}
 * @param {Object} opts - callbacks for event notification
 * @return {Array} - parsed data with shape {time, features, lookAheads, variables, labels}
 */


function parseEtlStream(data) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // Callbacks to enable instrumentation
  var _opts$onData = opts.onData,
      onData = _opts$onData === void 0 ? noop : _opts$onData,
      _opts$onDone = opts.onDone,
      onDone = _opts$onDone === void 0 ? noop : _opts$onDone;
  var context = onData(opts) || opts.context;
  var stream = (0, _parseXvizStream.parseXVIZStream)(data, opts.convertPrimitive);
  onDone(_objectSpread({}, opts, {
    context: context
  }));
  return stream;
}
//# sourceMappingURL=parse-etl-stream.js.map