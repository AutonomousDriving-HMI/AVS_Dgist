{"version":3,"sources":["../../../src/glb/glb-parser.js"],"names":["unpackGLBBuffers","unpackBinaryJson","TextDecoder","padTo4Bytes","assert","ATTRIBUTE_TYPE_TO_COMPONENTS","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","MAGIC_glTF","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","LE","BE","getMagicString","dataView","String","fromCharCode","getUint8","GLBParser","glbArrayBuffer","options","magic","DataView","magic1","getUint32","binaryByteOffset","packedJson","json","result","_parse","key","glTFBufferView","byteOffset","Uint8Array","byteLength","glTFAccessor","ArrayType","componentType","components","type","bytesPerComponent","length","count","bufferViews","bufferView","arrayBuffer","glTFImage","typedArray","getBufferView","mimeType","arrayBufferView","blob","Blob","urlCreator","self","URL","webkitURL","imageUrl","createObjectURL","img","Image","src","Promise","resolve","onload","_parseBinary","unpackedBuffers","version","fileLength","valid","console","warn","jsonChunkLength","jsonChunkFormat","jsonChunkOffset","jsonChunk","textDecoder","jsonText","decode","JSON","parse","binaryChunkStart","binChunkFormat"],"mappings":";;;;;;AAAA;AACA,OAAOA,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AAEA,SAAQC,WAAR,EAAqBC,WAArB,EAAkCC,MAAlC,QAA+C,kBAA/C;AACA,SACEC,4BADF,EAEEC,qCAFF,EAGEC,iCAHF,QAIO,0BAJP;AAMA,IAAMC,UAAU,GAAG,UAAnB,C,CAA+B;;AAE/B,IAAMC,oBAAoB,GAAG,EAA7B;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AAEA,IAAMC,mBAAmB,GAAG,UAA5B;AACA,IAAMC,kBAAkB,GAAG,UAA3B;AAEA,IAAMC,EAAE,GAAG,IAAX,C,CAAiB;;AACjB,IAAMC,EAAE,GAAG,KAAX,C,CAAkB;;AAElB,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,mBACAC,MAAM,CAACC,YAAP,CAAoBF,QAAQ,CAACG,QAAT,CAAkB,CAAlB,CAApB,CADA,SAEAF,MAAM,CAACC,YAAP,CAAoBF,QAAQ,CAACG,QAAT,CAAkB,CAAlB,CAApB,CAFA,SAGAF,MAAM,CAACC,YAAP,CAAoBF,QAAQ,CAACG,QAAT,CAAkB,CAAlB,CAApB,CAHA,SAIAF,MAAM,CAACC,YAAP,CAAoBF,QAAQ,CAACG,QAAT,CAAkB,CAAlB,CAApB,CAJA;AAKD,C,CAED;;;IACqBC,S;;;;;0BAENC,c,EAA8B;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAAA,2BACZA,OADY,CAClCC,KADkC;AAAA,UAClCA,KADkC,+BAC1Bf,UAD0B,mBAGzC;;AACA,UAAMQ,QAAQ,GAAG,IAAIQ,QAAJ,CAAaH,cAAb,CAAjB;AACA,UAAMI,MAAM,GAAGT,QAAQ,CAACU,SAAT,CAAmB,CAAnB,EAAsBZ,EAAtB,CAAf;AACA,aAAOW,MAAM,KAAKF,KAAX,IAAoBE,MAAM,KAAKjB,UAAtC;AACD;;;AAED,uBAA0B;AAAA,QAAdc,OAAc,uEAAJ,EAAI;;AAAA;;AACxB;AACA,SAAKK,gBAAL,GAAwB,IAAxB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD,G,CAED;;;;;0BACMR,c,EAA8B;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAClC;AACA,WAAKD,cAAL,GAAsBA,cAAtB,CAFkC,CAIlC;;AACA,UAAI,KAAKQ,IAAL,KAAc,IAAd,IAAsB,KAAKF,gBAAL,KAA0B,IAApD,EAA0D;AACxD,aAAKG,MAAL,GAAc,KAAKC,MAAL,CAAYT,OAAZ,CAAd;AACD;;AACD,aAAO,IAAP;AACD,K,CAED;;;;uCACmBU,G,EAAK;AACtB,aAAO,KAAKH,IAAL,CAAUG,GAAV,CAAP;AACD,K,CAED;;;;8BACU;AACR,aAAO,KAAKH,IAAZ;AACD,K,CAED;;;;qCACiB;AACf,aAAO,KAAKR,cAAZ;AACD,K,CAED;;;;0CACsB;AACpB,aAAO,KAAKM,gBAAZ;AACD,K,CAED;;;;kCACcM,c,EAAgB;AAC5B,UAAMC,UAAU,GAAG,CAACD,cAAc,CAACC,UAAf,IAA6B,CAA9B,IAAmC,KAAKP,gBAA3D;AACA,aAAO,IAAIQ,UAAJ,CAAe,KAAKd,cAApB,EAAoCa,UAApC,EAAgDD,cAAc,CAACG,UAA/D,CAAP;AACD,K,CAED;;;;8BACUC,Y,EAAc;AACtB;AACA,UAAMC,SAAS,GAAG/B,iCAAiC,CAAC8B,YAAY,CAACE,aAAd,CAAnD;AACA,UAAMC,UAAU,GAAGnC,4BAA4B,CAACgC,YAAY,CAACI,IAAd,CAA/C;AACA,UAAMC,iBAAiB,GAAGpC,qCAAqC,CAAC+B,YAAY,CAACE,aAAd,CAA/D;AACA,UAAMI,MAAM,GAAGN,YAAY,CAACO,KAAb,GAAqBJ,UAApC;AACA,UAAMJ,UAAU,GAAGC,YAAY,CAACO,KAAb,GAAqBJ,UAArB,GAAkCE,iBAArD,CANsB,CAQtB;;AACA,UAAMT,cAAc,GAAG,KAAKJ,IAAL,CAAUgB,WAAV,CAAsBR,YAAY,CAACS,UAAnC,CAAvB;AACA1C,MAAAA,MAAM,CAACgC,UAAU,IAAI,CAAd,IAAmBA,UAAU,IAAIH,cAAc,CAACG,UAAjD,CAAN;AAEA,UAAMF,UAAU,GAAGD,cAAc,CAACC,UAAf,GAA4B,KAAKP,gBAApD;AACA,aAAO,IAAIW,SAAJ,CAAc,KAAKS,WAAnB,EAAgCb,UAAhC,EAA4CS,MAA5C,CAAP;AACD,K,CAED;;;;iCACaK,S,EAAW;AACtB,aAAO;AACLC,QAAAA,UAAU,EAAE,KAAKC,aAAL,CAAmBF,SAAS,CAACF,UAA7B,CADP;AAELK,QAAAA,QAAQ,EAAEH,SAAS,CAACG,QAAV,IAAsB;AAF3B,OAAP;AAID;;;6BAEQH,S,EAAW;AAClB;AACA,UAAMI,eAAe,GAAG,KAAKF,aAAL,CAAmBF,SAAS,CAACF,UAA7B,CAAxB;AACA,UAAMK,QAAQ,GAAGH,SAAS,CAACG,QAAV,IAAsB,YAAvC;AACA,UAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACF,eAAD,CAAT,EAA4B;AAACX,QAAAA,IAAI,EAAEU;AAAP,OAA5B,CAAb;AACA,UAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,IAAYD,IAAI,CAACE,SAApC;AACA,UAAMC,QAAQ,GAAGJ,UAAU,CAACK,eAAX,CAA2BP,IAA3B,CAAjB;AACA,UAAMQ,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUJ,QAAV;AACA,aAAOE,GAAP;AACD;;;kCAEab,S,EAAW;AAAA;;AACvB;AACA,aAAO,IAAIgB,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,YAAMb,eAAe,GAAG,KAAI,CAACF,aAAL,CAAmBF,SAAS,CAACF,UAA7B,CAAxB;;AACA,YAAMK,QAAQ,GAAGH,SAAS,CAACG,QAAV,IAAsB,YAAvC;AACA,YAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACF,eAAD,CAAT,EAA4B;AAACX,UAAAA,IAAI,EAAEU;AAAP,SAA5B,CAAb;AACA,YAAMI,UAAU,GAAGC,IAAI,CAACC,GAAL,IAAYD,IAAI,CAACE,SAApC;AACA,YAAMC,QAAQ,GAAGJ,UAAU,CAACK,eAAX,CAA2BP,IAA3B,CAAjB;AACA,YAAMQ,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;AACAD,QAAAA,GAAG,CAACK,MAAJ,GAAa;AAAA,iBAAMD,OAAO,CAACJ,GAAD,CAAb;AAAA,SAAb;;AACAA,QAAAA,GAAG,CAACE,GAAJ,GAAUJ,QAAV;AACD,OATM,CAAP;AAUD,K,CAED;;;;2BAEOrC,O,EAAS;AACd,UAAMQ,MAAM,GAAG,KAAKqC,YAAL,CAAkB7C,OAAlB,CAAf;;AACA,WAAKM,UAAL,GAAkBE,MAAM,CAACD,IAAzB;AACA,WAAKuC,eAAL,GACEpE,gBAAgB,CAAC,KAAKqB,cAAN,EAAsB,KAAKQ,IAA3B,EAAiC,KAAKF,gBAAtC,CADlB;AAEA,WAAKE,IAAL,GAAY5B,gBAAgB,CAAC,KAAK4B,IAAN,EAAY,KAAKuC,eAAjB,CAA5B;AACD;;;iCAEY9C,O,EAAS;AAAA,4BACSA,OADT,CACbC,KADa;AAAA,UACbA,KADa,gCACLf,UADK,oBAGpB;;AACA,UAAMQ,QAAQ,GAAG,IAAIQ,QAAJ,CAAa,KAAKH,cAAlB,CAAjB;AACA,UAAMI,MAAM,GAAGT,QAAQ,CAACU,SAAT,CAAmB,CAAnB,EAAsBZ,EAAtB,CAAf,CALoB,CAKsB;;AAC1C,UAAMuD,OAAO,GAAGrD,QAAQ,CAACU,SAAT,CAAmB,CAAnB,EAAsBb,EAAtB,CAAhB,CANoB,CAMuB;;AAC3C,UAAMyD,UAAU,GAAGtD,QAAQ,CAACU,SAAT,CAAmB,CAAnB,EAAsBb,EAAtB,CAAnB,CAPoB,CAO0B;;AAE9C,UAAI0D,KAAK,GAAG9C,MAAM,KAAKjB,UAAX,IAAyBiB,MAAM,KAAKF,KAAhD;;AACA,UAAI,CAACgD,KAAL,EAAY;AACVC,QAAAA,OAAO,CAACC,IAAR,oCAAyC1D,cAAc,CAACC,QAAD,CAAvD,GADU,CAC4D;AACvE;;AAEDZ,MAAAA,MAAM,CAACiE,OAAO,KAAK,CAAb,gCAAuCA,OAAvC,8BAAN;AACAjE,MAAAA,MAAM,CAACkE,UAAU,GAAG,EAAd,CAAN,CAfoB,CAiBpB;;AACA,UAAMI,eAAe,GAAG1D,QAAQ,CAACU,SAAT,CAAmB,EAAnB,EAAuBb,EAAvB,CAAxB,CAlBoB,CAkBgC;;AACpD,UAAM8D,eAAe,GAAG3D,QAAQ,CAACU,SAAT,CAAmB,EAAnB,EAAuBb,EAAvB,CAAxB,CAnBoB,CAmBgC;;AAEpD0D,MAAAA,KAAK,GAAGI,eAAe,KAAKhE,mBAApB,IAA2CgE,eAAe,KAAK,CAAvE,CArBoB,CAqBsD;;AAC1EvE,MAAAA,MAAM,CAACmE,KAAD,8BAA6BI,eAA7B,EAAN,CAtBoB,CAwBpB;;AACA,UAAMC,eAAe,GAAGnE,oBAAoB,GAAGC,qBAA/C,CAzBoB,CAyBkD;;AACtE,UAAMmE,SAAS,GAAG,IAAI1C,UAAJ,CAAe,KAAKd,cAApB,EAAoCuD,eAApC,EAAqDF,eAArD,CAAlB,CA1BoB,CA4BpB;;AACA,UAAMI,WAAW,GAAG,IAAI5E,WAAJ,CAAgB,MAAhB,CAApB;AACA,UAAM6E,QAAQ,GAAGD,WAAW,CAACE,MAAZ,CAAmBH,SAAnB,CAAjB,CA9BoB,CAgCpB;;AACA,WAAKhD,IAAL,GAAYoD,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAZ,CAjCoB,CAmCpB;;AACA,UAAMI,gBAAgB,GAAGP,eAAe,GAAGzE,WAAW,CAACuE,eAAD,CAAtD;AACA,WAAK/C,gBAAL,GAAwBwD,gBAAgB,GAAGzE,qBAA3C;AAEA,UAAM0E,cAAc,GAAGpE,QAAQ,CAACU,SAAT,CAAmByD,gBAAgB,GAAG,CAAtC,EAAyCtE,EAAzC,CAAvB,CAvCoB,CAuCiD;;AACrE0D,MAAAA,KAAK,GAAGa,cAAc,KAAKxE,kBAAnB,IAAyCwE,cAAc,KAAK,CAApE,CAxCoB,CAwCmD;;AACvEhF,MAAAA,MAAM,CAACmE,KAAD,6BAA4Ba,cAA5B,EAAN;AAEA,aAAO;AACLrC,QAAAA,WAAW,EAAE,KAAK1B,cADb;AAELM,QAAAA,gBAAgB,EAAE,KAAKA,gBAFlB;AAGLE,QAAAA,IAAI,EAAE,KAAKA;AAHN,OAAP;AAKD;;;;;;SArKkBT,S","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport unpackGLBBuffers from './unpack-glb-buffers';\nimport unpackBinaryJson from '../packed-json/unpack-binary-json';\n\nimport {TextDecoder, padTo4Bytes, assert} from '@loaders.gl/core';\nimport {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} from '../utils/gltf-type-utils';\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nconst GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\nconst GLB_CHUNK_TYPE_BIN = 0x004E4942;\n\nconst LE = true; // Binary GLTF is little endian.\nconst BE = false; // Magic needs to be written as BE\n\nfunction getMagicString(dataView) {\n  return `\\\n${String.fromCharCode(dataView.getUint8(0))}\\\n${String.fromCharCode(dataView.getUint8(1))}\\\n${String.fromCharCode(dataView.getUint8(2))}\\\n${String.fromCharCode(dataView.getUint8(3))}`;\n}\n\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\nexport default class GLBParser {\n\n  static isGLB(glbArrayBuffer, options = {}) {\n    const {magic = MAGIC_glTF} = options;\n\n    // Check that GLB Header starts with the magic number\n    const dataView = new DataView(glbArrayBuffer);\n    const magic1 = dataView.getUint32(0, BE);\n    return magic1 === magic || magic1 === MAGIC_glTF;\n  }\n\n  constructor(options = {}) {\n    // Result\n    this.binaryByteOffset = null;\n    this.packedJson = null;\n    this.json = null;\n  }\n\n  // Return the gltf JSON and the original arrayBuffer\n  parse(glbArrayBuffer, options = {}) {\n    // Input\n    this.glbArrayBuffer = glbArrayBuffer;\n\n    // Only parse once\n    if (this.json === null && this.binaryByteOffset === null) {\n      this.result = this._parse(options);\n    }\n    return this;\n  }\n\n  // Returns application JSON data stored in `key`\n  getApplicationData(key) {\n    return this.json[key];\n  }\n\n  // Returns JSON envelope\n  getJSON() {\n    return this.json;\n  }\n\n  // Return binary chunk\n  getArrayBuffer() {\n    return this.glbArrayBuffer;\n  }\n\n  // Return index into binary chunk\n  getBinaryByteOffset() {\n    return this.binaryByteOffset;\n  }\n\n  // Unpacks a bufferview into a new Uint8Array that is a view into the binary chunk\n  getBufferView(glTFBufferView) {\n    const byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n    return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n  }\n\n  // Unpacks a glTF accessor into a new typed array that is a view into the binary chunk\n  getBuffer(glTFAccessor) {\n    // Decode the glTF accessor format\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n    const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n    const length = glTFAccessor.count * components;\n    const byteLength = glTFAccessor.count * components * bytesPerComponent;\n\n    // Get the boundaries of the binary sub-chunk for this bufferView\n    const glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n    assert(byteLength >= 0 && byteLength <= glTFBufferView.byteLength);\n\n    const byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset;\n    return new ArrayType(this.arrayBuffer, byteOffset, length);\n  }\n\n  // Unpacks an image into an HTML image\n  getImageData(glTFImage) {\n    return {\n      typedArray: this.getBufferView(glTFImage.bufferView),\n      mimeType: glTFImage.mimeType || 'image/jpeg'\n    };\n  }\n\n  getImage(glTFImage) {\n    /* global self, Blob, Image */\n    const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n    const mimeType = glTFImage.mimeType || 'image/jpeg';\n    const blob = new Blob([arrayBufferView], {type: mimeType});\n    const urlCreator = self.URL || self.webkitURL;\n    const imageUrl = urlCreator.createObjectURL(blob);\n    const img = new Image();\n    img.src = imageUrl;\n    return img;\n  }\n\n  getImageAsync(glTFImage) {\n    /* global self, Blob, Image */\n    return new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n      const mimeType = glTFImage.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], {type: mimeType});\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n\n  // PRIVATE\n\n  _parse(options) {\n    const result = this._parseBinary(options);\n    this.packedJson = result.json;\n    this.unpackedBuffers =\n      unpackGLBBuffers(this.glbArrayBuffer, this.json, this.binaryByteOffset);\n    this.json = unpackBinaryJson(this.json, this.unpackedBuffers);\n  }\n\n  _parseBinary(options) {\n    const {magic = MAGIC_glTF} = options;\n\n    // GLB Header\n    const dataView = new DataView(this.glbArrayBuffer);\n    const magic1 = dataView.getUint32(0, BE); // Magic number (the ASCII string 'glTF').\n    const version = dataView.getUint32(4, LE); // Version 2 of binary glTF container format\n    const fileLength = dataView.getUint32(8, LE); // Total byte length of generated file\n\n    let valid = magic1 === MAGIC_glTF || magic1 === magic;\n    if (!valid) {\n      console.warn(`Invalid GLB magic string ${getMagicString(dataView)}`); // eslint-disable-line\n    }\n\n    assert(version === 2, `Invalid GLB version ${version}. Only .glb v2 supported`);\n    assert(fileLength > 20);\n\n    // Write the JSON chunk\n    const jsonChunkLength = dataView.getUint32(12, LE); // Byte length of json chunk\n    const jsonChunkFormat = dataView.getUint32(16, LE); // Chunk format as uint32\n\n    valid = jsonChunkFormat === GLB_CHUNK_TYPE_JSON || jsonChunkFormat === 0; // Back compat\n    assert(valid, `JSON chunk format ${jsonChunkFormat}`);\n\n    // Create a \"view\" of the binary encoded JSON data\n    const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n    const jsonChunk = new Uint8Array(this.glbArrayBuffer, jsonChunkOffset, jsonChunkLength);\n\n    // Decode the JSON binary array into clear text\n    const textDecoder = new TextDecoder('utf8');\n    const jsonText = textDecoder.decode(jsonChunk);\n\n    // Parse the JSON text into a JavaScript data structure\n    this.json = JSON.parse(jsonText);\n\n    // TODO - BIN chunk can be optional\n    const binaryChunkStart = jsonChunkOffset + padTo4Bytes(jsonChunkLength);\n    this.binaryByteOffset = binaryChunkStart + GLB_CHUNK_HEADER_SIZE;\n\n    const binChunkFormat = dataView.getUint32(binaryChunkStart + 4, LE); // Chunk format as uint32\n    valid = binChunkFormat === GLB_CHUNK_TYPE_BIN || binChunkFormat === 1; // Back compat\n    assert(valid, `BIN chunk format ${binChunkFormat}`);\n\n    return {\n      arrayBuffer: this.glbArrayBuffer,\n      binaryByteOffset: this.binaryByteOffset,\n      json: this.json\n    };\n  }\n}\n"],"file":"glb-parser.js"}