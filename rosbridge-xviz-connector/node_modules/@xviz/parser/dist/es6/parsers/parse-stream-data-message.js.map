{"version":3,"sources":["../../../src/parsers/parse-stream-data-message.js"],"names":["LOG_STREAM_MESSAGE","parseBinaryXVIZ","isBinaryXVIZ","parseLogMetadata","parseStreamVideoMessage","TextDecoder","parseTimesliceDataV1","parseTimesliceDataV2","getXVIZConfig","isJSONString","str","firstChar","lastChar","length","Number","isFinite","String","fromCharCode","XVIZ_TYPE_PATTERN","isXVIZJSONString","firstChunk","slice","lastChunk","apply","test","getDataType","data","undefined","ArrayBuffer","isView","decode","recursive","Uint8Array","jsonString","JSON","parse","key","isXVIZMessage","type","startsWith","unpackEnvelope","parts","split","namespace","join","isEnvelope","parseStreamDataMessage","message","onResult","onError","opts","Blob","v2Type","parseData","unpacked","result","parseStreamLogData","error","typeKey","update_type","parseTimesliceData","convertPrimitive","METADATA","DONE","ERROR","currentMajorVersion"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * This file contains parsers for XVIZ log stream protocol.\n * Naming conventions:\n  `message` refers to the raw message received via webSocket.onmessage\n * `data` refers to pre-processed data objects (blob, arraybuffer, JSON object)\n */\n/* global Blob, Uint8Array */\nimport {LOG_STREAM_MESSAGE} from '../constants';\nimport {parseBinaryXVIZ, isBinaryXVIZ} from '../loaders/xviz-loader/xviz-binary-loader';\nimport {parseLogMetadata} from './parse-log-metadata';\nimport {parseStreamVideoMessage} from './parse-stream-video-message';\nimport {TextDecoder} from '../utils/text-encoding';\nimport parseTimesliceDataV1 from './parse-timeslice-data-v1';\nimport parseTimesliceDataV2 from './parse-timeslice-data-v2';\nimport {getXVIZConfig} from '../config/xviz-config';\n\n// returns true if the input represents a JSON string.\n// Can be either string or Uint8Array\nfunction isJSONString(str) {\n  let firstChar = str[0];\n  let lastChar = str[str.length - 1];\n\n  if (Number.isFinite(firstChar)) {\n    firstChar = String.fromCharCode(firstChar);\n    lastChar = String.fromCharCode(lastChar);\n  }\n\n  return (firstChar === '{' && lastChar === '}') || (firstChar === '[' && lastChar === ']');\n}\n\nconst XVIZ_TYPE_PATTERN = /\"type\":\\s*\"xviz\\//;\n\n// returns true if the input represents an enveloped XVIZ object as a JSON string.\n// Can be either string or Uint8Array\nfunction isXVIZJSONString(str) {\n  // {\"type\":\"xviz/\n  let firstChunk = str.slice(0, 14);\n  // \"type\":\"xviz/*\"}\n  let lastChunk = str.slice(-36);\n\n  if (Number.isFinite(firstChunk[0])) {\n    firstChunk = String.fromCharCode.apply(null, firstChunk);\n    lastChunk = String.fromCharCode.apply(null, lastChunk);\n  }\n\n  return XVIZ_TYPE_PATTERN.test(firstChunk) || XVIZ_TYPE_PATTERN.test(lastChunk);\n}\n\nfunction getDataType(data) {\n  if (data === null || data === undefined) {\n    return null;\n  }\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return 'binary';\n  }\n  return typeof data;\n}\n\n// get JSON from binary\nfunction decode(data, recursive) {\n  switch (getDataType(data)) {\n    case 'binary':\n      if (isBinaryXVIZ(data)) {\n        return parseBinaryXVIZ(data);\n      }\n      if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data);\n      }\n      if (isJSONString(data)) {\n        const jsonString = new TextDecoder('utf8').decode(data);\n        return JSON.parse(jsonString);\n      }\n      break;\n\n    case 'string':\n      if (isJSONString(data)) {\n        return JSON.parse(data);\n      }\n      break;\n\n    case 'object':\n      if (recursive) {\n        for (const key in data) {\n          // Only peek one-level deep\n          data[key] = decode(data[key], false);\n        }\n      }\n      break;\n\n    default:\n  }\n\n  return data;\n}\n\n// Efficiently check if an object is a supported XVIZ message, without decoding it.\n// Returns true for the following formats: XVIZ binary (GLB), eveloped JSON object,\n// eveloped JSON string, eveloped JSON string as arraybuffer\nexport function isXVIZMessage(data) {\n  switch (getDataType(data)) {\n    case 'binary':\n      if (isBinaryXVIZ(data)) {\n        return true;\n      }\n      if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data);\n      }\n      return isXVIZJSONString(data);\n\n    case 'string':\n      return isXVIZJSONString(data);\n\n    case 'object':\n      return data.type ? data.type.startsWith('xviz/') : false;\n\n    default:\n  }\n  return false;\n}\n\n// Parse apart the namespace and type for the enveloped data\nexport function unpackEnvelope(data) {\n  const parts = data.type.split('/');\n  return {\n    namespace: parts[0],\n    type: parts.slice(1).join('/'),\n    data: data.data\n  };\n}\n\n// Sniff out whether the JSON data provided is in the XVIZ envelope format\nexport function isEnvelope(data) {\n  return data.type && data.data;\n}\n\n// Post processes a stream message to make it easy to use for JavaScript applications\nexport function parseStreamDataMessage(message, onResult, onError, opts) {\n  // TODO(twojtasz): better message dispatching\n  // here, not all arraybuffer may be image (packed point cloud)\n  // TODO(jlisee): Node.js support for blobs for better unit testing\n  if (typeof Blob !== 'undefined' && message instanceof Blob) {\n    parseStreamVideoMessage(message, onResult, onError);\n    return;\n  }\n\n  try {\n    let data = decode(message, true);\n    let v2Type;\n    let parseData = true;\n    if (isEnvelope(data)) {\n      const unpacked = unpackEnvelope(data);\n      if (unpacked.namespace === 'xviz') {\n        v2Type = unpacked.type;\n        data = unpacked.data;\n      } else {\n        parseData = false;\n      }\n    }\n\n    if (parseData) {\n      const result = parseStreamLogData(data, {...opts, v2Type});\n      onResult(result);\n    }\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport function parseStreamLogData(data, opts = {}) {\n  // TODO(twojtasz): this data.message is due an\n  // uncoordinated change on the XVIZ server, temporary.\n  const typeKey = opts.v2Type || data.type || data.message || data.update_type;\n\n  switch (typeKey) {\n    case 'state_update':\n      return parseTimesliceData(data, opts.convertPrimitive);\n    case 'metadata':\n      return {\n        ...parseLogMetadata(data),\n        // ensure application sees the metadata type set to the uppercase version\n        type: LOG_STREAM_MESSAGE.METADATA\n      };\n    case 'transform_log_done':\n      return {...data, type: LOG_STREAM_MESSAGE.DONE};\n    case 'error':\n      return {...data, message: 'Stream server error', type: LOG_STREAM_MESSAGE.ERROR};\n\n    // v1 types\n    case 'done':\n      return {...data, type: LOG_STREAM_MESSAGE.DONE};\n    default:\n      //  TODO(twojtasz): XVIZ should be tagging this with a type\n      return parseTimesliceData(data, opts.convertPrimitive);\n  }\n}\n\nfunction parseTimesliceData(data, convertPrimitive) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  return currentMajorVersion === 1\n    ? parseTimesliceDataV1(data, convertPrimitive)\n    : parseTimesliceDataV2(data, convertPrimitive);\n}\n"],"file":"parse-stream-data-message.js"}