"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadFile = loadFile;
exports.loadFileSync = loadFileSync;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _readFile = require("../read-file/read-file");

var _parseFile = require("../parse-file/parse-file");

var _autoDetectLoader = require("../parse-file/auto-detect-loader");

function loadFile(_x, _x2, _x3) {
  return _loadFile.apply(this, arguments);
}

function _loadFile() {
  _loadFile = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(url, loaders, options) {
    var loader, data;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, null, loaders) : loaders; // Some loaders can not separate reading and parsing of data (e.g ImageLoader)

            if (!loader.loadAndParse) {
              _context.next = 5;
              break;
            }

            _context.next = 4;
            return loader.loadAndParse(url, options);

          case 4:
            return _context.abrupt("return", _context.sent);

          case 5:
            _context.next = 7;
            return (0, _readFile.readFile)(url, options);

          case 7:
            data = _context.sent;
            return _context.abrupt("return", (0, _parseFile.parseFile)(data, loaders, options, url));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadFile.apply(this, arguments);
}

function loadFileSync(url, loaders, options) {
  var data = (0, _readFile.readFileSync)(url, options);
  var result = (0, _parseFile.parseFileSync)(data, loaders, options, url); // Separate return to facilitate breakpoint setting

  return result;
}
//# sourceMappingURL=load-file.js.map