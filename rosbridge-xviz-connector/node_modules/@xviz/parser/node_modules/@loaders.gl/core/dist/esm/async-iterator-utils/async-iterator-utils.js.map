{"version":3,"sources":["../../../src/async-iterator-utils/async-iterator-utils.js"],"names":["concatenateArrayBuffers","TextDecoder","TextEncoder","isPromise","x","then","isIterable","Symbol","iterator","isAsyncIterable","asyncIterator","forEach","visitor","next","done","value","return","cancel","concatenateAsyncIterator","arrayBuffer","ArrayBuffer","string","chunk","textDecoderAsyncIterator","arrayBufferIterator","options","textDecoder","decode","stream","textEncoderAsyncIterator","textIterator","textEncoder","text","encode","lineAsyncIterator","previous","textChunk","eolIndex","indexOf","line","slice","length","numberedLineAsyncIterator","lineIterator","counter"],"mappings":"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","sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/memory-copy-utils';\nimport {TextDecoder, TextEncoder} from '../binary-utils/text-encoding';\n\nexport const isPromise = x => x && (typeof x === 'object' || typeof x === 'function') &&\n  typeof x.then === 'function';\n\nexport const isIterable = x => x && typeof x[Symbol.iterator] === 'function';\n\nexport const isAsyncIterable = x => x && typeof x[Symbol.asyncIterator] === 'function';\n\n// GENERAL UTILITIES\n\n// Iterate over async iterator, without resetting iterator if end is not reached\n// - forEach does not reset iterator if exiting loop prematurely\n//   so that iteration can continue in a second loop\n// - It is recommended to use a standard for await as last loop to ensure\n//   iterator gets properly reset\n// TODO - optimize using sync iteration if argument is an Iterable?\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Concatenates all data chunks yielded by an async iterator\nexport async function concatenateAsyncIterator(asyncIterator) {\n  let arrayBuffer = new ArrayBuffer();\n  let string = '';\n  for await (const chunk of asyncIterator) {\n    if (typeof chunk === 'string') {\n      string += chunk;\n    } else {\n      arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n    }\n  }\n  return arrayBuffer || string;\n}\n\n// ITERATOR GENERATORS\n\n// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\n\nexport async function* textDecoderAsyncIterator(arrayBufferIterator, options) {\n  const textDecoder = new TextDecoder(options);\n  for await (const arrayBuffer of arrayBufferIterator) {\n    yield typeof arrayBuffer === 'string' ?\n      arrayBuffer : textDecoder.decode(arrayBuffer, {stream: true});\n  }\n}\n\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\n\nexport async function* textEncoderAsyncIterator(textIterator, options) {\n  const textEncoder = new TextEncoder();\n  for await (const text of textIterator) {\n    yield typeof text === 'string' ? textEncoder.encode(text) : text;\n  }\n}\n\n// Input: async iterable over strings\n// Returns: an async iterable over lines\n// See http://2ality.com/2018/04/async-iter-nodejs.html\n\nexport async function* lineAsyncIterator(textIterator) {\n  let previous = '';\n  for await (const textChunk of textIterator) {\n    previous += textChunk;\n    let eolIndex;\n    while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n      // line includes the EOL\n      const line = previous.slice(0, eolIndex + 1);\n      previous = previous.slice(eolIndex + 1);\n      yield line;\n    }\n  }\n\n  if (previous.length > 0) {\n    yield previous;\n  }\n}\n\n/**\n * Parameter: async iterable of lines\n * Result: async iterable of numbered lines\n */\n// See http://2ality.com/2018/04/async-iter-nodejs.html\n// eslint-disable-next-line no-shadow\nexport async function* numberedLineAsyncIterator(lineIterator) {\n  let counter = 1;\n  for await (const line of lineIterator) {\n    yield {counter, line};\n    counter++;\n  }\n}\n"],"file":"async-iterator-utils.js"}