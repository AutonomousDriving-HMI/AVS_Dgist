const EXT_PATTERN = /[^\.]+$/; // Find a loader that works for extension/text
// Search the loaders array argument for a loader that matches extension or text

export function autoDetectLoader() {
  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let text = arguments.length > 1 ? arguments[1] : undefined;
  let loaders = arguments.length > 2 ? arguments[2] : undefined;
  // Get extension without
  let extension = url.match(EXT_PATTERN) || url;

  if (extension.length && extension[0] === '.') {
    extension = extension.substr(1).toLowerCase();
  }

  for (const loader of loaders) {
    if (loader.extension === extension) {
      return loader;
    }
  }

  for (const loader of loaders) {
    if (loader.name.toLowerCase === extension) {
      return loader;
    }
  }

  for (const loader of loaders) {
    if (loader.testText && loader.testText(text)) {
      return loader;
    }
  }

  return null;
}
//# sourceMappingURL=auto-detect-loader.js.map