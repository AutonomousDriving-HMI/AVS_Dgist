function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import styled from '@emotion/styled';
import { withTheme, evaluateStyle } from '../theme';
import { InfoIcon } from '../icons';
import { Tooltip } from '../popover';
var LabelComponent = styled.label(function (props) {
  return _objectSpread({}, props.theme.__reset__, {
    display: 'flex',
    alignItems: 'center',
    cursor: 'inherit',
    color: props.isEnabled ? props.theme.textColorPrimary : props.theme.textColorDisabled,
    '>*': {
      marginLeft: props.theme.spacingNormal
    }
  }, evaluateStyle(props.userStyle, props));
});
var LabelInfo = styled.div(function (props) {
  return _objectSpread({
    display: 'inline-block',
    color: props.isEnabled ? props.theme.controlColorPrimary : props.theme.controlColorDisabled,
    cursor: 'default',
    verticalAlign: 'middle',
    width: 16,
    height: 16,
    lineHeight: '16px',
    textAlign: 'center',
    path: {
      fill: 'currentColor'
    }
  }, evaluateStyle(props.userStyle, props));
}); // Input component that can be toggled on and off

var Label =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Label, _PureComponent);

  function Label() {
    _classCallCheck(this, Label);

    return _possibleConstructorReturn(this, _getPrototypeOf(Label).apply(this, arguments));
  }

  _createClass(Label, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          isEnabled = _this$props.isEnabled,
          htmlFor = _this$props.for,
          style = _this$props.style,
          children = _this$props.children,
          tooltip = _this$props.tooltip,
          badge = _this$props.badge;
      var labelProps = {};

      if (htmlFor) {
        labelProps.htmlFor = htmlFor;
      }

      var styleProps = {
        theme: theme,
        isEnabled: isEnabled
      };
      return React.createElement(LabelComponent, _extends({}, styleProps, {
        userStyle: style.label
      }), children, tooltip && React.createElement(Tooltip, {
        style: style.tooltip,
        content: tooltip
      }, React.createElement(LabelInfo, _extends({}, styleProps, {
        userStyle: style.tooltipTarget
      }), style.iconInfo || React.createElement(InfoIcon, null))), badge);
    }
  }]);

  return Label;
}(PureComponent);

_defineProperty(Label, "propTypes", {
  for: PropTypes.string,
  style: PropTypes.object,
  tooltip: PropTypes.string,
  badge: PropTypes.element,
  isEnabled: PropTypes.bool
});

_defineProperty(Label, "defaultProps", {
  style: {},
  isEnabled: true
});

export default withTheme(Label);
//# sourceMappingURL=index.js.map