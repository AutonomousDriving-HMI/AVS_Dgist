"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = packBinaryJson;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _core = require("@loaders.gl/core");

// Recursively packs (replaces) binary objects
// Replaces "typed arrays" with "JSON pointers" to binary chunks tracked by glbBuilder
//
function packBinaryJson(json, glbBuilder) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$flattenArray = options.flattenArrays,
      flattenArrays = _options$flattenArray === void 0 ? false : _options$flattenArray;
  var object = json; // Check if string has same syntax as our "JSON pointers", if so "escape it".

  if (typeof object === 'string' && object.indexOf('#/') === 0) {
    return "#".concat(object);
  }

  if (Array.isArray(object)) {
    // TODO - handle numeric arrays, flatten them etc.
    var typedArray = flattenArrays && (0, _core.flattenToTypedArray)(object);

    if (typedArray) {
      object = typedArray;
    } else {
      return object.map(function (element) {
        return packBinaryJson(element, glbBuilder, options);
      });
    }
  } // Typed arrays, pack them as binary


  if (ArrayBuffer.isView(object) && glbBuilder) {
    if (glbBuilder.isImage(object)) {
      var imageIndex = glbBuilder.addImage(object);
      return "#/images/".concat(imageIndex);
    } // if not an image, pack as accessor


    var bufferIndex = glbBuilder.addBuffer(object);
    return "#/accessors/".concat(bufferIndex);
  }

  if (object !== null && (0, _typeof2.default)(object) === 'object') {
    var newObject = {};

    for (var key in object) {
      newObject[key] = packBinaryJson(object[key], glbBuilder, options);
    }

    return newObject;
  }

  return object;
}
//# sourceMappingURL=pack-binary-json.js.map