"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preSerialize = preSerialize;
exports.postDeserialize = postDeserialize;

var _constants = require("../constants");

var _xvizConfig = require("../config/xviz-config");

var _xvizObject = _interopRequireDefault(require("../objects/xviz-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Convert stream messages for safe transfer between threads
 */

/**
 * placeholder
 */
function preSerialize(message) {
  return message;
} // Populate global object metadata
// ParseXVIZPrimitive did the same thing on the thread that it's run


function observeObjects(objects, timestamp) {
  if (objects) {
    objects.features.forEach(function (f) {
      _xvizObject.default.observe(f.id, timestamp);
    });
  }
}
/**
 * Restore message after deserialization (received via postMessage)
 * @params message {object} - received dehydrated message from other threads
 */


function postDeserialize(message) {
  if (message.type !== _constants.LOG_STREAM_MESSAGE.TIMESLICE) {
    return message;
  }

  var _getXVIZConfig = (0, _xvizConfig.getXVIZConfig)(),
      OBJECT_STREAM = _getXVIZConfig.OBJECT_STREAM;

  var streams = message.streams,
      timestamp = message.timestamp; // OBJECT_STREAM is deprecated, only keeping for backward compatibility

  if (OBJECT_STREAM) {
    observeObjects(streams[OBJECT_STREAM], timestamp);
    return message;
  }

  for (var streamName in streams) {
    var objects = streams[streamName];

    if (objects.features && objects.features.length && objects.features[0].id) {
      observeObjects(objects, timestamp);
    }
  }

  return message;
}
//# sourceMappingURL=serialize.js.map