{"version":3,"sources":["../../../../src/writers/xviz-writer/xviz-pack-binary.js"],"names":["packBinaryJsonTypedArray","gltfBuilder","object","objectKey","isImage","imageIndex","addImage","opts","size","bufferIndex","addBuffer","packBinaryJson","json","options","flattenArrays","indexOf","Array","isArray","typedArray","map","element","ArrayBuffer","isView","newObject","key"],"mappings":";;;;;;;AAcA;;;;AAEA,SAASA,wBAAT,CAAkCC,WAAlC,EAA+CC,MAA/C,EAAuDC,SAAvD,EAAkE;AAChE,MAAIF,WAAW,CAACG,OAAZ,CAAoBF,MAApB,CAAJ,EAAiC;AAC/B,QAAMG,UAAU,GAAGJ,WAAW,CAACK,QAAZ,CAAqBJ,MAArB,CAAnB;AACA,8BAAmBG,UAAnB;AACD,GAJ+D,CAKhE;;;AACA,MAAME,IAAI,GAAGJ,SAAS,KAAK,QAAd,GAAyB;AAACK,IAAAA,IAAI,EAAE;AAAP,GAAzB,GAAqC;AAACA,IAAAA,IAAI,EAAE;AAAP,GAAlD;AACA,MAAMC,WAAW,GAAGR,WAAW,CAACS,SAAZ,CAAsBR,MAAtB,EAA8BK,IAA9B,CAApB;AACA,+BAAsBE,WAAtB;AACD,C,CAED;AACA;AACA;;;AACO,SAASE,cAAT,CAAwBC,IAAxB,EAA8BX,WAA9B,EAA2E;AAAA,MAAhCE,SAAgC,uEAApB,IAAoB;AAAA,MAAdU,OAAc,uEAAJ,EAAI;AAAA,8BAChDA,OADgD,CACzEC,aADyE;AAAA,MACzEA,aADyE,sCACzD,KADyD;AAEhF,MAAIZ,MAAM,GAAGU,IAAb,CAFgF,CAIhF;;AACA,MAAI,OAAOV,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACa,OAAP,CAAe,IAAf,MAAyB,CAA3D,EAA8D;AAC5D,sBAAWb,MAAX;AACD;;AAED,MAAIc,KAAK,CAACC,OAAN,CAAcf,MAAd,CAAJ,EAA2B;AACzB;AACA,QAAMgB,UAAU,GAAGJ,aAAa,IAAI,+BAAoBZ,MAApB,CAApC;;AACA,QAAIgB,UAAJ,EAAgB;AACdhB,MAAAA,MAAM,GAAGgB,UAAT;AACD,KAFD,MAEO;AACL,aAAOhB,MAAM,CAACiB,GAAP,CAAW,UAAAC,OAAO;AAAA,eAAIT,cAAc,CAACS,OAAD,EAAUnB,WAAV,EAAuBY,OAAvB,CAAlB;AAAA,OAAlB,CAAP;AACD;AACF,GAjB+E,CAmBhF;;;AACA,MAAIQ,WAAW,CAACC,MAAZ,CAAmBpB,MAAnB,KAA8BD,WAAlC,EAA+C;AAC7C,WAAOD,wBAAwB,CAACC,WAAD,EAAcC,MAAd,EAAsBC,SAAtB,CAA/B;AACD;;AAED,MAAID,MAAM,KAAK,IAAX,IAAmB,QAAOA,MAAP,MAAkB,QAAzC,EAAmD;AACjD,QAAMqB,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAMC,GAAX,IAAkBtB,MAAlB,EAA0B;AACxBqB,MAAAA,SAAS,CAACC,GAAD,CAAT,GAAiBb,cAAc,CAACT,MAAM,CAACsB,GAAD,CAAP,EAAcvB,WAAd,EAA2BuB,GAA3B,EAAgCX,OAAhC,CAA/B;AACD;;AACD,WAAOU,SAAP;AACD;;AAED,SAAOrB,MAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {flattenToTypedArray} from '@loaders.gl/core';\n\nfunction packBinaryJsonTypedArray(gltfBuilder, object, objectKey) {\n  if (gltfBuilder.isImage(object)) {\n    const imageIndex = gltfBuilder.addImage(object);\n    return `#/images/${imageIndex}`;\n  }\n  // if not an image, pack as accessor\n  const opts = objectKey === 'colors' ? {size: 4} : {size: 3};\n  const bufferIndex = gltfBuilder.addBuffer(object, opts);\n  return `#/accessors/${bufferIndex}`;\n}\n\n// Follows a convention used by @loaders.gl to use JSONPointers\n// to encode where the binary data for a XVIZ element resides.\n// The unpacking is handled automatically by @loaders.gl\nexport function packBinaryJson(json, gltfBuilder, objectKey = null, options = {}) {\n  const {flattenArrays = false} = options;\n  let object = json;\n\n  // Check if string has same syntax as our \"JSON pointers\", if so \"escape it\".\n  if (typeof object === 'string' && object.indexOf('#/') === 0) {\n    return `#${object}`;\n  }\n\n  if (Array.isArray(object)) {\n    // TODO - handle numeric arrays, flatten them etc.\n    const typedArray = flattenArrays && flattenToTypedArray(object);\n    if (typedArray) {\n      object = typedArray;\n    } else {\n      return object.map(element => packBinaryJson(element, gltfBuilder, options));\n    }\n  }\n\n  // Typed arrays, pack them as binary\n  if (ArrayBuffer.isView(object) && gltfBuilder) {\n    return packBinaryJsonTypedArray(gltfBuilder, object, objectKey);\n  }\n\n  if (object !== null && typeof object === 'object') {\n    const newObject = {};\n    for (const key in object) {\n      newObject[key] = packBinaryJson(object[key], gltfBuilder, key, options);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n"],"file":"xviz-pack-binary.js"}