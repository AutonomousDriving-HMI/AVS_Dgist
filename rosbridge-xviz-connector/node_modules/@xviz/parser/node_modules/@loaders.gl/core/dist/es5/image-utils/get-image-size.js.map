{"version":3,"sources":["../../../src/image-utils/get-image-size.js"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","mimeTypeMap","Map","getPngSize","getJpegSize","getGifSize","getBmpSize","ERR_INVALID_TYPE","Array","from","keys","join","isImage","contents","result","_getImageSize","mimeType","getImageSize","handler","get","Error","entries","supportedMimeType","dataView","byteLength","getUint32","width","height","getUint16","getJpegMarkers","tableMarkers","sofMarkers","i","marker","has","Set","add"],"mappings":"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","sourcesContent":["// Attributions\n// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\nimport {toDataView} from '@loaders.gl/core';\n\nconst BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\nconst mimeTypeMap = new Map([\n  ['image/png', getPngSize],\n  ['image/jpeg', getJpegSize],\n  ['image/gif', getGifSize],\n  ['image/bmp', getBmpSize]\n]);\n\nconst ERR_INVALID_TYPE = `Invalid MIME type. Supported MIME types are: ${Array.from(\n  mimeTypeMap.keys()\n).join(', ')}`;\n\nexport function isImage(contents) {\n  const result = _getImageSize(contents);\n  if (result) {\n    // Seems not :(\n    return result.mimeType;\n  }\n  return false;\n}\n\n/**\n * Sniffs the contents of a file to attempt to deduce the image type and extract image size.\n * Supported image types are PNG, JPEG, GIF and BMP.\n *\n * @param {Buffer} contents\n * @param {string} [mimeType]\n */\nexport function getImageSize(contents, mimeType) {\n  // Looking for only a specific MIME type.\n  if (mimeType) {\n    const handler = mimeTypeMap.get(mimeType);\n    if (!handler) {\n      throw new Error(ERR_INVALID_TYPE);\n    }\n\n    const result = handler(contents);\n    if (!result) {\n      throw new Error(`invalid image data for type: ${mimeType}`);\n    }\n    return result;\n  }\n\n  const result = _getImageSize(contents, mimeType);\n  if (!result) {\n    // Seems not :(\n    throw new Error(ERR_INVALID_TYPE);\n  }\n  return result;\n}\n\nfunction _getImageSize(contents, mimeType) {\n  // Loop through each file type and see if they work.\n  for (const [supportedMimeType, handler] of mimeTypeMap.entries()) {\n    const result = handler(contents);\n    if (result) {\n      result.mimeType = supportedMimeType;\n      return result;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Extract size from a binary PNG file\n * @param {Buffer} contents\n */\nfunction getPngSize(contents) {\n  const dataView = toDataView(contents);\n\n  // Check file contains the first 4 bytes of the PNG signature.\n  if (dataView.byteLength < 24 || dataView.getUint32(0, BIG_ENDIAN) !== 0x89504e47) {\n    return null;\n  }\n\n  return {\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\n/**\n * Extract size from a binary GIF file\n * @param {Buffer} contents\n * TODO: GIF is not this simple\n */\nfunction getGifSize(contents) {\n  const dataView = toDataView(contents);\n\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  if (dataView.byteLength < 10 || dataView.getUint32(0, BIG_ENDIAN) !== 0x47494638) {\n    return null;\n  }\n\n  // GIF is little endian.\n  return {\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\n/**\n * @param {Buffer} contents\n * TODO: BMP is not this simple\n */\nfunction getBmpSize(contents) {\n  const dataView = toDataView(contents);\n\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  if (dataView.getUint16(0, BIG_ENDIAN) !== 0x424d) {\n    return null;\n  }\n\n  // BMP is little endian.\n  return {\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\n/**\n * Extract size from a binary JPEG file\n * @param {Buffer} contents\n */\nfunction getJpegSize(contents) {\n  const dataView = toDataView(contents);\n\n  // Check file contains the JPEG \"start of image\" (SOI) marker.\n  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines\n        width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0,\n    0xffc1,\n    0xffc2,\n    0xffc3,\n    0xffc5,\n    0xffc6,\n    0xffc7,\n    0xffc9,\n    0xffca,\n    0xffcb,\n    0xffcd,\n    0xffce,\n    0xffcf,\n    0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n"],"file":"get-image-size.js"}