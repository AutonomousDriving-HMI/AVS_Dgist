{"version":3,"sources":["../../../src/binary-utils/binary-utils.js"],"names":["assert","TextEncoder","isArrayBuffer","x","ArrayBuffer","isBlob","Blob","isBuffer","Buffer","toArrayBuffer","data","typedArray","Uint8Array","buffer","isView","text","uint8Array","encode","blobToArrayBuffer","blob","Promise","resolve","reject","arrayBuffer","fileReader","FileReader","onload","event","target","result","onloadend","onerror","readAsArrayBuffer","toBuffer","binaryData","byteLength","view","i","length","toDataView","DataView"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,WAAR,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,aAAa,GAAGC,CAAC,IAAIA,CAAC,IAAIA,CAAC,YAAYC,WAA7C;AACP,OAAO,MAAMC,MAAM,GAAGF,CAAC,IAAIA,CAAC,IAAI,OAAOG,IAAP,KAAgB,WAArB,IAAoCH,CAAC,YAAYG,IAArE;AACP,OAAO,MAAMC,QAAQ,GAAGJ,CAAC,IAAIA,CAAC,IAAIA,CAAC,YAAYK,MAAxC;AAEP,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAIR,aAAa,CAACQ,IAAD,CAAjB,EAAyB;AACvB,WAAOA,IAAP;AACD,GAHiC,CAKlC;;;AACA,MAAIH,QAAQ,CAACG,IAAD,CAAZ,EAAoB;AAClB,UAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,IAAf,CAAnB;AACA,WAAOC,UAAU,CAACE,MAAlB;AACD,GATiC,CAWlC;;;AACA,MAAIT,WAAW,CAACU,MAAZ,CAAmBJ,IAAnB,CAAJ,EAA8B;AAC5B,WAAOA,IAAI,CAACG,MAAZ;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAMK,IAAI,GAAGL,IAAb;AACA,UAAMM,UAAU,GAAG,IAAIf,WAAJ,GAAkBgB,MAAlB,CAAyBF,IAAzB,CAAnB;AACA,WAAOC,UAAU,CAACH,MAAlB;AACD;;AAED,SAAOb,MAAM,CAAC,KAAD,CAAb;AACD;AAED,OAAO,SAASkB,iBAAT,CAA2BC,IAA3B,EAAiC;AACtC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,WAAJ;AACA,UAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,IAAAA,UAAU,CAACE,MAAX,GAAoBC,KAAK,IAAI;AAC3BJ,MAAAA,WAAW,GAAGI,KAAK,CAACC,MAAN,CAAaC,MAA3B;AACD,KAFD;;AAGAL,IAAAA,UAAU,CAACM,SAAX,GAAuBH,KAAK,IAAIN,OAAO,CAACE,WAAD,CAAvC;;AACAC,IAAAA,UAAU,CAACO,OAAX,GAAqBT,MAArB;AACAE,IAAAA,UAAU,CAACQ,iBAAX,CAA6Bb,IAA7B;AACD,GATM,CAAP;AAUD,C,CAED;;AACA,OAAO,SAASc,QAAT,CAAkBC,UAAlB,EAA8B;AACnC,MAAI9B,WAAW,CAACU,MAAZ,CAAmBoB,UAAnB,CAAJ,EAAoC;AAClCA,IAAAA,UAAU,GAAGA,UAAU,CAACrB,MAAxB;AACD;;AAED,MAAI,OAAOL,MAAP,KAAkB,WAAlB,IAAiC0B,UAAU,YAAY9B,WAA3D,EAAwE;AACtE;AACA,UAAMS,MAAM,GAAG,IAAIL,MAAJ,CAAW0B,UAAU,CAACC,UAAtB,CAAf;AACA,UAAMC,IAAI,GAAG,IAAIxB,UAAJ,CAAesB,UAAf,CAAb;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,MAAM,CAACyB,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtCxB,MAAAA,MAAM,CAACwB,CAAD,CAAN,GAAYD,IAAI,CAACC,CAAD,CAAhB;AACD;;AACD,WAAOxB,MAAP;AACD;;AAED,SAAOb,MAAM,CAAC,KAAD,CAAb;AACD;AAED,OAAO,SAASuC,UAAT,CAAoB1B,MAApB,EAA4B;AACjC,SAAO,IAAI2B,QAAJ,CAAa/B,aAAa,CAACI,MAAD,CAA1B,CAAP;AACD,C,CAED","sourcesContent":["/* global FileReader, Blob, ArrayBuffer, Buffer */\nimport assert from '../utils/assert';\nimport {TextEncoder} from './text-encoding';\n\nexport const isArrayBuffer = x => x && x instanceof ArrayBuffer;\nexport const isBlob = x => x && typeof Blob !== 'undefined' && x instanceof Blob;\nexport const isBuffer = x => x && x instanceof Buffer;\n\nexport function toArrayBuffer(data) {\n  if (isArrayBuffer(data)) {\n    return data;\n  }\n\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  if (isBuffer(data)) {\n    const typedArray = new Uint8Array(data);\n    return typedArray.buffer;\n  }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (ArrayBuffer.isView(data)) {\n    return data.buffer;\n  }\n\n  if (typeof data === 'string') {\n    const text = data;\n    const uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  return assert(false);\n}\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise((resolve, reject) => {\n    let arrayBuffer;\n    const fileReader = new FileReader();\n    fileReader.onload = event => {\n      arrayBuffer = event.target.result;\n    };\n    fileReader.onloadend = event => resolve(arrayBuffer);\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n\n// Convert (copy) ArrayBuffer to Buffer\nexport function toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  return assert(false);\n}\n\nexport function toDataView(buffer) {\n  return new DataView(toArrayBuffer(buffer));\n}\n\n// Helper functions\n\n"],"file":"binary-utils.js"}