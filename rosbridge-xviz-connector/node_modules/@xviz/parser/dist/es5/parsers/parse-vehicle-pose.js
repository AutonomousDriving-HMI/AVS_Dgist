"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseVehiclePose = parseVehiclePose;
exports.getTransformsFromPose = getTransformsFromPose;

var _math = require("math.gl");

var _viewportMercatorProject = require("viewport-mercator-project");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function noop() {}
/**
 * Post-processes vehicle pose
 * covered by the trip in this log.
 * @param {Object} vehiclePose
 */


function parseVehiclePose(vehiclePose) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // Callbacks to enable instrumentation
  var _opts$onData = opts.onData,
      onData = _opts$onData === void 0 ? noop : _opts$onData,
      _opts$onDone = opts.onDone,
      onDone = _opts$onDone === void 0 ? noop : _opts$onDone,
      postProcessVehiclePose = opts.postProcessVehiclePose;
  var context = onData(opts) || opts.context;

  if (postProcessVehiclePose) {
    vehiclePose = vehiclePose.map(postProcessVehiclePose) // Remove invalid poses.
    .filter(Boolean);
  }

  onDone(_objectSpread({}, opts, {
    context: context
  }));
  return vehiclePose;
}

function getTransformsFromPose(vehiclePose) {
  var longitude = vehiclePose.longitude,
      latitude = vehiclePose.latitude,
      _vehiclePose$altitude = vehiclePose.altitude,
      altitude = _vehiclePose$altitude === void 0 ? 0 : _vehiclePose$altitude;
  var origin = Number.isFinite(vehiclePose.longitude) && Number.isFinite(vehiclePose.latitude) ? [longitude, latitude, altitude] : null;
  var pose = new _math._Pose(vehiclePose);
  var vehicleRelativeTransform = pose.getTransformationMatrix(); // If mapOrigin is not specified, use a faux position of [0, 0, 0]
  // deck.gl needs a lon/lat position to target the camera

  var trackPosition = (0, _viewportMercatorProject.addMetersToLngLat)(origin || [0, 0, 0], vehicleRelativeTransform.transformVector([0, 0, 0]));
  return {
    origin: origin,
    vehicleRelativeTransform: vehicleRelativeTransform,
    trackPosition: trackPosition,
    heading: pose.yaw / Math.PI * 180
  };
}
//# sourceMappingURL=parse-vehicle-pose.js.map