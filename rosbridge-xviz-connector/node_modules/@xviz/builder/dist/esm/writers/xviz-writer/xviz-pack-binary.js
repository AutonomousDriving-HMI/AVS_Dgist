function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { flattenToTypedArray } from '@loaders.gl/core';

function packBinaryJsonTypedArray(gltfBuilder, object, objectKey) {
  if (gltfBuilder.isImage(object)) {
    var imageIndex = gltfBuilder.addImage(object);
    return "#/images/".concat(imageIndex);
  } // if not an image, pack as accessor


  var opts = objectKey === 'colors' ? {
    size: 4
  } : {
    size: 3
  };
  var bufferIndex = gltfBuilder.addBuffer(object, opts);
  return "#/accessors/".concat(bufferIndex);
} // Follows a convention used by @loaders.gl to use JSONPointers
// to encode where the binary data for a XVIZ element resides.
// The unpacking is handled automatically by @loaders.gl


export function packBinaryJson(json, gltfBuilder) {
  var objectKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var _options$flattenArray = options.flattenArrays,
      flattenArrays = _options$flattenArray === void 0 ? false : _options$flattenArray;
  var object = json; // Check if string has same syntax as our "JSON pointers", if so "escape it".

  if (typeof object === 'string' && object.indexOf('#/') === 0) {
    return "#".concat(object);
  }

  if (Array.isArray(object)) {
    // TODO - handle numeric arrays, flatten them etc.
    var typedArray = flattenArrays && flattenToTypedArray(object);

    if (typedArray) {
      object = typedArray;
    } else {
      return object.map(function (element) {
        return packBinaryJson(element, gltfBuilder, options);
      });
    }
  } // Typed arrays, pack them as binary


  if (ArrayBuffer.isView(object) && gltfBuilder) {
    return packBinaryJsonTypedArray(gltfBuilder, object, objectKey);
  }

  if (object !== null && _typeof(object) === 'object') {
    var newObject = {};

    for (var key in object) {
      newObject[key] = packBinaryJson(object[key], gltfBuilder, key, options);
    }

    return newObject;
  }

  return object;
}
//# sourceMappingURL=xviz-pack-binary.js.map