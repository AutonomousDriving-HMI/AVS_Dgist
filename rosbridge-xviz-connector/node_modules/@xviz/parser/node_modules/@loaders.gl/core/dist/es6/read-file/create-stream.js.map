{"version":3,"sources":["../../../src/read-file/create-stream.js"],"names":["fs","http","https","resolvePath","isNode","Boolean","createReadStream","uri","options","isRequest","startsWith","Promise","resolve","reject","URL","request","response","fetch","then","res","body","error"],"mappings":";;AAAA;;AACA;AACA,OAAOA,EAAP,MAAe,IAAf,C,CAAqB;;AACrB,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACL,EAAE,IAAIA,EAAE,CAACM,gBAAV,CAAtB;AAEA,OAAO,eAAeA,gBAAf,CAAgCC,GAAhC,EAAqCC,OAArC,EAA8C;AACnDD,EAAAA,GAAG,GAAGJ,WAAW,CAACI,GAAD,CAAjB;;AACA,MAAI;AACF;AACA,UAAME,SAAS,GAAGF,GAAG,CAACG,UAAJ,CAAe,OAAf,KAA2BH,GAAG,CAACG,UAAJ,CAAe,QAAf,CAA7C;;AAEA,QAAIN,MAAJ,EAAY;AACV,UAAIK,SAAJ,EAAe;AACb,eAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,UAAAA,OAAO,qBAAO,IAAIM,GAAJ,CAAQP,GAAR,CAAP,EAAwBC,OAAxB,CAAP;AACA,gBAAMO,OAAO,GAAGR,GAAG,CAACG,UAAJ,CAAe,QAAf,IAA2BR,KAAK,CAACa,OAAjC,GAA2Cd,IAAI,CAACc,OAAhE;AACAA,UAAAA,OAAO,CAACR,GAAD,EAAMS,QAAQ,IAAIJ,OAAO,CAACI,QAAD,CAAzB,CAAP;AACD,SAJM,CAAP;AAKD;;AAED,aAAOL,OAAO,CAACC,OAAR,CAAgBZ,EAAE,CAACM,gBAAH,CAAoBC,GAApB,EAAyBC,OAAzB,CAAhB,CAAP;AACD;;AAED,WAAOS,KAAK,CAACV,GAAD,EAAMC,OAAN,CAAL,CACL;AADK,KAEJU,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,CAAP;AAGD,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACd,WAAOV,OAAO,CAACE,MAAR,CAAeQ,KAAf,CAAP;AACD;AACF","sourcesContent":["/* global fetch */\n/* global URL */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\n\nimport {resolvePath} from './file-aliases';\n\nconst isNode = Boolean(fs && fs.createReadStream);\n\nexport async function createReadStream(uri, options) {\n  uri = resolvePath(uri);\n  try {\n    // NODE\n    const isRequest = uri.startsWith('http:') || uri.startsWith('https:');\n\n    if (isNode) {\n      if (isRequest) {\n        return new Promise((resolve, reject) => {\n          options = {...new URL(uri), ...options};\n          const request = uri.startsWith('https:') ? https.request : http.request;\n          request(uri, response => resolve(response));\n        });\n      }\n\n      return Promise.resolve(fs.createReadStream(uri, options));\n    }\n\n    return fetch(uri, options)\n      // Retrieve body as a ReadableStream\n      .then(res => res.body);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n"],"file":"create-stream.js"}