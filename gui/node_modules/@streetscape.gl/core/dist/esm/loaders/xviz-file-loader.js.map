{"version":3,"sources":["../../../src/loaders/xviz-file-loader.js"],"names":["assert","LOG_STREAM_MESSAGE","parseStreamMessage","StreamSynchronizer","XVIZStreamBuffer","XVIZLoaderInterface","DEFUALT_BATCH_SIZE","XVIZFileLoader","options","message","type","METADATA","set","streamBuffer","_setMetadata","emit","TIMESLICE","oldVersion","valueOf","insert","getStreams","DONE","error","timingsFilePath","getFilePath","_timingsFilePath","_getFilePath","_batchSize","maxConcurrency","_isOpen","_loadTimings","then","data","_numberOfFrames","timing","length","_loadMetadata","_loadNextBatch","range","getLoadedTimeRange","start","end","timestamp","fetch","resp","json","metadataPath","_loadFile","worker","startFrame","isOpen","promises","i","filePath","push","Promise","all","filter","Boolean","fileFormat","toLowerCase","match","file","arrayBuffer","reject","onResult","_onMessage","onError","_onError"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global fetch */\nimport assert from 'assert';\nimport {\n  LOG_STREAM_MESSAGE,\n  parseStreamMessage,\n  StreamSynchronizer,\n  XVIZStreamBuffer\n} from '@xviz/parser';\n\nimport XVIZLoaderInterface from './xviz-loader-interface';\n\nconst DEFUALT_BATCH_SIZE = 4;\n\nexport default class XVIZFileLoader extends XVIZLoaderInterface {\n  constructor(options) {\n    super(options);\n\n    assert(options.timingsFilePath && options.getFilePath);\n\n    this._timingsFilePath = options.timingsFilePath;\n    this._getFilePath = options.getFilePath;\n    this._batchSize = options.maxConcurrency || DEFUALT_BATCH_SIZE;\n\n    this.streamBuffer = new XVIZStreamBuffer();\n    this._isOpen = false;\n  }\n\n  isOpen() {\n    return this._isOpen;\n  }\n\n  connect() {\n    this._isOpen = true;\n    this._loadTimings().then(data => {\n      // Adding 1 is to account for the metadata file\n      this._numberOfFrames = data.timing.length + 1;\n      this._loadMetadata().then(() => this._loadNextBatch(1));\n    });\n  }\n\n  close() {\n    // Stop file loading\n    this._isOpen = false;\n  }\n\n  getBufferRange() {\n    const range = this.streamBuffer.getLoadedTimeRange();\n    if (range) {\n      return [[range.start, range.end]];\n    }\n    return [];\n  }\n\n  seek(timestamp) {\n    // TODO incomplete\n    super.seek(timestamp);\n  }\n\n  _loadTimings() {\n    return fetch(this._timingsFilePath).then(resp => resp.json());\n  }\n\n  _loadMetadata() {\n    const metadataPath = this._getFilePath(0);\n    assert(metadataPath);\n    return this._loadFile(metadataPath, {worker: false});\n  }\n\n  _loadNextBatch(startFrame) {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    if (startFrame >= this._numberOfFrames) {\n      return;\n    }\n\n    const promises = [];\n    for (let i = 0; i < this._batchSize && startFrame + i < this._numberOfFrames; i++) {\n      const filePath = this._getFilePath(startFrame + i);\n      assert(filePath);\n      promises.push(this._loadFile(filePath, this.options));\n    }\n\n    // if there are more frames need to fetch\n    Promise.all(promises.filter(Boolean)).then(() => {\n      this._loadNextBatch(startFrame + this._batchSize);\n    });\n  }\n\n  _loadFile(filePath, options) {\n    const fileFormat = filePath.toLowerCase().match(/[^\\.]*$/)[0];\n\n    let file;\n    switch (fileFormat) {\n      case 'glb':\n        file = fetch(filePath).then(resp => resp.arrayBuffer());\n        break;\n\n      case 'json':\n        file = fetch(filePath).then(resp => resp.json());\n        break;\n\n      default:\n        return Promise.reject('Unknown file format');\n    }\n\n    return file.then(data => {\n      // if not open, do not parse the message\n      if (this._isOpen) {\n        parseStreamMessage({\n          message: data,\n          onResult: this._onMessage,\n          onError: this._onError,\n          worker: options.worker,\n          maxConcurrency: options.maxConcurrency\n        });\n      }\n    });\n  }\n\n  _onMessage = message => {\n    switch (message.type) {\n      case LOG_STREAM_MESSAGE.METADATA:\n        this.set('logSynchronizer', new StreamSynchronizer(this.streamBuffer));\n        this._setMetadata(message);\n        this.emit('ready', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.TIMESLICE:\n        const oldVersion = this.streamBuffer.valueOf();\n        this.streamBuffer.insert(message);\n        if (this.streamBuffer.valueOf() !== oldVersion) {\n          this.set('streams', this.streamBuffer.getStreams());\n        }\n        this.emit('update', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.DONE:\n        this.emit('finish', message);\n        break;\n\n      default:\n        this.emit('error', message);\n    }\n  };\n\n  _onError = error => {\n    this.emit('error', error);\n  };\n}\n"],"file":"xviz-file-loader.js"}