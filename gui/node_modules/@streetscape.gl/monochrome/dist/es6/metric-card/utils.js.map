{"version":3,"sources":["../../../src/metric-card/utils.js"],"names":["DEFAULT_GET_X","d","x","findNearestValue","array","getX","lowerBound","upperBound","length","currentIndex","currentX","lowerValue","upperValue","Math","abs"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,CAAC,IAAIA,CAAC,CAACC,CAA7B;AACA;;;;;;;;;AAOA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCF,CAAjC,EAA0D;AAAA,MAAtBG,IAAsB,uEAAfL,aAAe;AAC/D,MAAIM,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAGH,KAAK,CAACI,MAAN,GAAe,CAAhC;AACA,MAAIC,YAAJ;AACA,MAAIC,QAAJ;;AAEA,SAAOJ,UAAU,IAAIC,UAArB,EAAiC;AAC/BE,IAAAA,YAAY,GAAI,CAACH,UAAU,GAAGC,UAAd,IAA4B,CAA7B,GAAkC,CAAjD;AACAG,IAAAA,QAAQ,GAAGL,IAAI,CAACD,KAAK,CAACK,YAAD,CAAN,CAAf;;AAEA,QAAIC,QAAQ,GAAGR,CAAf,EAAkB;AAChBI,MAAAA,UAAU,GAAGG,YAAY,GAAG,CAA5B;AACD,KAFD,MAEO,IAAIC,QAAQ,GAAGR,CAAf,EAAkB;AACvBK,MAAAA,UAAU,GAAGE,YAAY,GAAG,CAA5B;AACD,KAFM,MAEA;AACL,aAAOL,KAAK,CAACK,YAAD,CAAZ;AACD;AACF,GAjB8D,CAmB/D;;;AACA,QAAME,UAAU,GAAGP,KAAK,CAACE,UAAD,CAAxB;AACA,QAAMM,UAAU,GAAGR,KAAK,CAACG,UAAD,CAAxB;;AAEA,MAAI,CAACI,UAAL,EAAiB;AACf;AACA,WAAOC,UAAP;AACD;;AACD,MAAI,CAACA,UAAL,EAAiB;AACf;AACA,WAAOD,UAAP;AACD;;AAED,SAAOE,IAAI,CAACC,GAAL,CAAST,IAAI,CAACM,UAAD,CAAJ,GAAmBT,CAA5B,KAAkCW,IAAI,CAACC,GAAL,CAAST,IAAI,CAACO,UAAD,CAAJ,GAAmBV,CAA5B,CAAlC,GAAmES,UAAnE,GAAgFC,UAAvF;AACD","sourcesContent":["const DEFAULT_GET_X = d => d.x;\n/**\n * Performs binary search for the closest value to timestamp in a metric\n * @param {array} array - array of values sorted by x\n * @param {number} x - the target x value\n * @param {function, optional} getX - x accessor\n * @returns {object} nearest value\n */\nexport function findNearestValue(array, x, getX = DEFAULT_GET_X) {\n  let lowerBound = 0;\n  let upperBound = array.length - 1;\n  let currentIndex;\n  let currentX;\n\n  while (lowerBound <= upperBound) {\n    currentIndex = ((lowerBound + upperBound) / 2) | 0;\n    currentX = getX(array[currentIndex]);\n\n    if (currentX < x) {\n      lowerBound = currentIndex + 1;\n    } else if (currentX > x) {\n      upperBound = currentIndex - 1;\n    } else {\n      return array[currentIndex];\n    }\n  }\n\n  // No precise match, find the closer one between the two bounds\n  const lowerValue = array[lowerBound];\n  const upperValue = array[upperBound];\n\n  if (!lowerValue) {\n    // at end of array\n    return upperValue;\n  }\n  if (!upperValue) {\n    // at beginning of array\n    return lowerValue;\n  }\n\n  return Math.abs(getX(lowerValue) - x) <= Math.abs(getX(upperValue) - x) ? lowerValue : upperValue;\n}\n"],"file":"utils.js"}