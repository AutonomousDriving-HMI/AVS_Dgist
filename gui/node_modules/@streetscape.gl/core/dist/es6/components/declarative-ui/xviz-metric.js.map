{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-metric.js"],"names":["React","PureComponent","PropTypes","MetricCard","MetricChart","DEFAULT_COLOR_SERIES","connectToLog","defaultFormatValue","x","Number","isFinite","toFixed","String","XVIZMetricComponent","props","onClick","log","seek","_extractDataProps","streams","timeSeries","data","sampleSeries","forEach","streamName","i","dataSeries","valueSeries","getX","getY","unit","isLoading","render","title","description","startTime","endTime","currentTime","width","height","style","xTicks","yTicks","formatXTick","formatYTick","formatValue","horizontalGridLines","verticalGridLines","getColor","timeDomain","_onClick","object","oneOfType","string","number","func","arrayOf","objectOf","shape","array","margin","left","right","top","bottom","getLogState","getCurrentTime","getTimeSeries","getBufferStart","getBufferEnd","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\n\nconst defaultFormatValue = x => (Number.isFinite(x) ? x.toFixed(3) : String(x));\n\nclass XVIZMetricComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    style: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    formatValue: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI metric component\n    streams: PropTypes.arrayOf(PropTypes.string),\n    title: PropTypes.string,\n    description: PropTypes.string,\n\n    // From connected log\n    currentTime: PropTypes.number,\n    timeSeries: PropTypes.objectOf(\n      PropTypes.shape({\n        data: PropTypes.array,\n        getX: PropTypes.func,\n        getY: PropTypes.func,\n        unit: PropTypes.string\n      })\n    ),\n    startTime: PropTypes.number,\n    endTime: PropTypes.number\n  };\n\n  static defaultProps = {\n    timeSeries: {},\n    width: '100%',\n    height: 160,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 20}\n    },\n    xTicks: 0,\n    yTicks: 3,\n    formatValue: defaultFormatValue,\n    horizontalGridLines: 3,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      log.seek(x);\n    }\n  };\n\n  _extractDataProps() {\n    const {streams, timeSeries} = this.props;\n\n    const data = {};\n    let sampleSeries = null;\n    streams.forEach((streamName, i) => {\n      const dataSeries = timeSeries[streamName];\n      if (dataSeries) {\n        sampleSeries = dataSeries;\n        data[streamName] = dataSeries.valueSeries;\n      }\n    });\n\n    return sampleSeries\n      ? {\n          getX: sampleSeries.getX,\n          getY: sampleSeries.getY,\n          unit: sampleSeries.unit,\n          data\n        }\n      : {\n          isLoading: true\n        };\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      startTime,\n      endTime,\n      currentTime,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      formatValue,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n    const isLoading = currentTime === null;\n    const timeDomain = Number.isFinite(startTime) ? [startTime, endTime] : null;\n\n    return (\n      <MetricCard title={title} description={description} isLoading={isLoading} style={style}>\n        {!isLoading && (\n          <MetricChart\n            {...this._extractDataProps()}\n            getColor={getColor}\n            highlightX={currentTime}\n            width={width}\n            height={height}\n            style={style}\n            xTicks={xTicks}\n            yTicks={yTicks}\n            formatXTick={formatXTick}\n            formatYTick={formatYTick}\n            formatValue={formatValue}\n            xDomain={timeDomain}\n            onClick={this._onClick}\n            horizontalGridLines={horizontalGridLines}\n            verticalGridLines={verticalGridLines}\n          />\n        )}\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => ({\n  currentTime: log.getCurrentTime(),\n  timeSeries: log.getTimeSeries(),\n  startTime: log.getBufferStart(),\n  endTime: log.getBufferEnd()\n});\n\nexport default connectToLog({getLogState, Component: XVIZMetricComponent});\n"],"file":"xviz-metric.js"}