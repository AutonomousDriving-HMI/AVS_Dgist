{"version":3,"sources":["../../../../src/writers/xviz-writer/xviz-binary-writer.js"],"names":["GLTFBuilder","toBuffer","packBinaryJson","encodeBinaryXVIZ","xvizJson","options","gltfBuilder","packedData","addApplicationData","nopack","encodeAsGLB","writeBinaryXVIZtoFile","sink","directory","name","json","glbFileBuffer","writeSync","flag"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,cAAR,QAA6B,oBAA7B;AAEA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAClD,QAAMC,WAAW,GAAG,IAAIN,WAAJ,CAAgBK,OAAhB,CAApB,CADkD,CAGlD;;AACA,QAAME,UAAU,GAAGL,cAAc,CAACE,QAAD,EAAWE,WAAX,EAAwB,IAAxB,EAA8BD,OAA9B,CAAjC,CAJkD,CAMlD;;AACAC,EAAAA,WAAW,CAACE,kBAAZ,CAA+B,MAA/B,EAAuCD,UAAvC,EAAmD;AAACE,IAAAA,MAAM,EAAE;AAAT,GAAnD;AAEA,SAAOH,WAAW,CAACI,WAAZ,CAAwBL,OAAxB,CAAP;AACD;AAED,OAAO,SAASM,qBAAT,CAA+BC,IAA/B,EAAqCC,SAArC,EAAgDC,IAAhD,EAAsDC,IAAtD,EAA4DV,OAA5D,EAAqE;AAC1E,QAAMW,aAAa,GAAGb,gBAAgB,CAACY,IAAD,EAAOV,OAAP,CAAtC;AACAO,EAAAA,IAAI,CAACK,SAAL,CAAeJ,SAAf,EAA2B,GAAEC,IAAK,MAAlC,EAAyCb,QAAQ,CAACe,aAAD,CAAjD,EAAkE;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAlE;AACA,SAAOF,aAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {GLTFBuilder} from '@loaders.gl/gltf';\nimport {toBuffer} from '@loaders.gl/core';\nimport {packBinaryJson} from './xviz-pack-binary';\n\nexport function encodeBinaryXVIZ(xvizJson, options) {\n  const gltfBuilder = new GLTFBuilder(options);\n\n  // Pack appropriate large data elements (point clouds and images) in binary\n  const packedData = packBinaryJson(xvizJson, gltfBuilder, null, options);\n\n  // As permitted by glTF, we put all XVIZ data in a top-level subfield.\n  gltfBuilder.addApplicationData('xviz', packedData, {nopack: true});\n\n  return gltfBuilder.encodeAsGLB(options);\n}\n\nexport function writeBinaryXVIZtoFile(sink, directory, name, json, options) {\n  const glbFileBuffer = encodeBinaryXVIZ(json, options);\n  sink.writeSync(directory, `${name}.glb`, toBuffer(glbFileBuffer), {flag: 'w'});\n  return glbFileBuffer;\n}\n"],"file":"xviz-binary-writer.js"}