{"version":3,"sources":["../../../src/styles/stylesheet.js"],"names":["SELECTOR_REGEX","OPERATOR_REGEX","NULL_VALIDATOR","Stylesheet","data","rules","slice","reverse","map","rule","_parseSelector","name","selectors","validate","properties","_parseProperties","forEach","key","p","push","propertyName","state","inlineProp","base","style","undefined","XVIZStyleProperty","formatValue","match","find","getValue","value","getDefault","attributes","selector","split","Object","keys","operator","object","classes","includes","selectorString","length","_getValidator","validators","every","result"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable no-console no-undef */\nimport XVIZStyleProperty from './xviz-style-property';\n\nconst SELECTOR_REGEX = /\\S+/g;\nconst OPERATOR_REGEX = /([=:~\\*\\^]+)/;\nconst NULL_VALIDATOR = () => true;\n\n/* Parser for single stylesheet */\nexport default class Stylesheet {\n  constructor(data = []) {\n    const rules = data\n      .slice()\n      // Newer rules override older ones\n      .reverse()\n      .map(rule => {\n        const {selectors, validate} = this._parseSelector(rule.name || '*');\n        const properties = this._parseProperties(rule);\n        return {selectors, validate, properties};\n      });\n\n    this.properties = {};\n    rules.forEach(rule => {\n      for (const key in rule.properties) {\n        let p = this.properties[key];\n        if (!p) {\n          p = [];\n          this.properties[key] = p;\n        }\n        p.push(rule);\n      }\n    });\n\n    this.rules = rules;\n  }\n\n  // Public methods\n\n  /**\n   * get style by property name for an object\n   * @param {String} propertyName - name of the style\n   * @param {Object} state - state descriptor of the object, used to match selectors\n   * @returns {Number|String|Array} style property value\n   */\n  getProperty(propertyName, state = {}) {\n    // inline style override any generic rules\n    const inlineProp = state.base && state.base.style && state.base.style[propertyName];\n    if (inlineProp !== undefined) {\n      return XVIZStyleProperty.formatValue(propertyName, inlineProp);\n    }\n\n    const rules = this.properties[propertyName];\n    const match = rules && rules.find(rule => rule.validate(state));\n    return match ? match.properties[propertyName].getValue(state) : null;\n  }\n\n  /**\n   * get default style by property name\n   * @param {String} propertyName - name of the style\n   * @returns {Number|String|Array} style property default value\n   */\n  getPropertyDefault(propertyName) {\n    const value = XVIZStyleProperty.getDefault(propertyName);\n    if (typeof value === 'function') {\n      return value(this);\n    }\n    return value;\n  }\n\n  /**\n   * get a list of attribute names that a property depends on.\n   * @param {String} propertyName - name of the style\n   * @returns {Array} - attribute names\n   */\n  getPropertyDependencies(propertyName) {\n    const attributes = {};\n    const rules = this.properties[propertyName];\n\n    if (!rules) {\n      return [];\n    }\n\n    rules.forEach(rule => {\n      rule.selectors.forEach(selector => {\n        if (selector !== '*') {\n          const [name] = selector.split(OPERATOR_REGEX);\n          attributes[name] = 1;\n        }\n      });\n    });\n\n    return Object.keys(attributes);\n  }\n\n  // Private methods\n\n  // Returns a function that checks if an object matches the given selector expressions\n  _getValidator(selector) {\n    if (selector === '*') {\n      return NULL_VALIDATOR;\n    }\n    const [name, operator, value] = selector.split(OPERATOR_REGEX);\n\n    switch (operator) {\n      case '=':\n        return object => object && object[name] === value;\n      default: {\n        return object => {\n          const classes = object && object.base && object.base.classes;\n          return object && ((classes && classes.includes(name)) || object[name]);\n        };\n      }\n    }\n  }\n\n  // Parses a selectorString (space-separated selector expressions)\n  _parseSelector(selectorString) {\n    const selectors = selectorString.match(SELECTOR_REGEX);\n    let validate;\n\n    // Special case handling\n    // Better perf than Array.every\n    if (selectors.length === 0 || selectors.includes('*')) {\n      validate = NULL_VALIDATOR;\n    } else if (selectors.length === 1) {\n      const match = this._getValidator(selectors[0]);\n      validate = object => match(object) || match(object.state);\n    } else {\n      const validators = selectors.map(this._getValidator);\n      validate = object => validators.every(match => match(object) || match(object.state));\n    }\n    return {selectors, validate};\n  }\n\n  // Parses property values\n  _parseProperties(properties) {\n    const result = {};\n\n    for (const key in properties.style) {\n      result[key] = new XVIZStyleProperty(key, properties.style[key]);\n    }\n    return result;\n  }\n}\n"],"file":"stylesheet.js"}