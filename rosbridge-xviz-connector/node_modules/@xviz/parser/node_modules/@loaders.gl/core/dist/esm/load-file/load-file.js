import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { readFile, readFileSync } from '../read-file/read-file';
import { parseFile, parseFileSync } from '../parse-file/parse-file';
import { autoDetectLoader } from '../parse-file/auto-detect-loader';
export function loadFile(_x, _x2, _x3) {
  return _loadFile.apply(this, arguments);
}

function _loadFile() {
  _loadFile = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(url, loaders, options) {
    var loader, data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders; // Some loaders can not separate reading and parsing of data (e.g ImageLoader)

            if (!loader.loadAndParse) {
              _context.next = 5;
              break;
            }

            _context.next = 4;
            return loader.loadAndParse(url, options);

          case 4:
            return _context.abrupt("return", _context.sent);

          case 5:
            _context.next = 7;
            return readFile(url, options);

          case 7:
            data = _context.sent;
            return _context.abrupt("return", parseFile(data, loaders, options, url));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadFile.apply(this, arguments);
}

export function loadFileSync(url, loaders, options) {
  var data = readFileSync(url, options);
  var result = parseFileSync(data, loaders, options, url); // Separate return to facilitate breakpoint setting

  return result;
}
//# sourceMappingURL=load-file.js.map