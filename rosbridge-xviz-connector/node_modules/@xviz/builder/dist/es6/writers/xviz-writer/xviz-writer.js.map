{"version":3,"sources":["../../../../src/writers/xviz-writer/xviz-writer.js"],"names":["writeBinaryXVIZtoFile","xvizConvertJson","DracoEncoder","DracoDecoder","frameName","index","FileSink","constructor","fs","module","require","path","writeSync","scope","name","data","xvizMetadataFilename","join","options","flag","writeFileSync","XVIZWriter","dataSink","envelope","binary","json","draco","sink","frameTimings","frames","Map","wroteFrameIndex","writeMetadata","xvizDirectory","xvizMetadata","_saveTimestamp","type","flattenArrays","JSON","stringify","writeFrame","frameIndex","xvizFrame","Error","numberRounder","k","value","Number","toFixed","jsonXVIZFrame","writeFrameIndex","startTime","endTime","frameTimes","Array","from","keys","sort","a","b","timing","forEach","limit","length","push","get","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","set"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {writeBinaryXVIZtoFile} from './xviz-binary-writer';\nimport {xvizConvertJson} from './xviz-json-encoder.js';\nimport {DracoEncoder, DracoDecoder} from '@loaders.gl/draco';\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst frameName = index => `${index + 2}-frame`;\n\n/**\n * Class to abstract away file IO\n */\nclass FileSink {\n  constructor() {\n    this.fs = module.require('fs');\n    this.path = module.require('path');\n  }\n\n  writeSync(scope, name, data) {\n    const xvizMetadataFilename = this.path.join(scope, name);\n    const options = {\n      flag: 'w'\n    };\n    this.fs.writeFileSync(xvizMetadataFilename, data, options);\n  }\n}\n\nexport default class XVIZWriter {\n  constructor(options = {}) {\n    const {\n      dataSink = new FileSink(),\n      envelope = true,\n      binary = true,\n      json = false,\n      draco = false\n    } = options;\n    this.sink = dataSink;\n    this.frameTimings = {\n      frames: new Map()\n    };\n    this.wroteFrameIndex = null;\n    this.options = {envelope, binary, json, draco};\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizDirectory, xvizMetadata) {\n    this._saveTimestamp(xvizMetadata);\n\n    if (this.options.envelope) {\n      xvizMetadata = {type: 'xviz/metadata', data: xvizMetadata};\n    }\n\n    if (this.options.binary) {\n      const options = {\n        flattenArrays: false\n      };\n\n      writeBinaryXVIZtoFile(this.sink, xvizDirectory, '1-frame', xvizMetadata, options);\n    }\n\n    if (this.options.json) {\n      this.sink.writeSync(xvizDirectory, '1-frame.json', JSON.stringify(xvizMetadata));\n    }\n  }\n\n  writeFrame(xvizDirectory, frameIndex, xvizFrame) {\n    if (this.wroteFrameIndex !== null) {\n      throw new Error(\n        `writeFrame() was called after writeFrameIndex().  The index was written with last frame of ${frameName(\n          this.wroteFrameIndex - 1\n        )}`\n      );\n    }\n\n    this._saveTimestamp(xvizFrame, frameIndex);\n\n    if (this.options.envelope) {\n      xvizFrame = {type: 'xviz/state_update', data: xvizFrame};\n    }\n\n    if (this.options.binary) {\n      const options = {\n        flattenArrays: false\n      };\n\n      if (this.options.draco) {\n        options.DracoEncoder = DracoEncoder;\n        options.DracoDecoder = DracoDecoder;\n      }\n\n      writeBinaryXVIZtoFile(this.sink, xvizDirectory, frameName(frameIndex), xvizFrame, options);\n    }\n\n    if (this.options.json) {\n      // Limit precision to save space\n      const numberRounder = (k, value) => {\n        if (typeof value === 'number') {\n          return Number(value.toFixed(10));\n        }\n\n        return value;\n      };\n\n      const jsonXVIZFrame = xvizConvertJson(xvizFrame);\n      this.sink.writeSync(\n        xvizDirectory,\n        `${frameName(frameIndex)}.json`,\n        JSON.stringify(jsonXVIZFrame, numberRounder)\n      );\n    }\n  }\n\n  writeFrameIndex(xvizDirectory) {\n    const {startTime, endTime, frames} = this.frameTimings;\n    const frameTimings = {};\n\n    if (startTime) {\n      frameTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      frameTimings.endTime = endTime;\n    }\n\n    // Sort frames by index before writing out as an array\n    const frameTimes = Array.from(frames.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    frameTimes.forEach((value, index) => {\n      // Value is two greater than frame index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so frame data starts at 2\n        throw new Error(\n          `Error writing time index file. Frames are missing between ${limit + 2} and ${value + 2}`\n        );\n      }\n\n      timing.push(frames.get(value));\n    });\n    frameTimings.timing = timing;\n\n    this.sink.writeSync(xvizDirectory, '0-frame.json', JSON.stringify(frameTimings));\n    this.wroteFrameIndex = timing.length;\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.frameTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.frameTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.frameTimings.frames.set(index, [min, max, index, frameName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n}\n"],"file":"xviz-writer.js"}