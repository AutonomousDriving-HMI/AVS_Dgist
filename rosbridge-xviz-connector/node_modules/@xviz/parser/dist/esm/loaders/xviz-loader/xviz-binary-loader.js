// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { GLTFParser } from '@loaders.gl/gltf';
var MAGIC_XVIZ = 0x5856495a; // XVIZ in Big-Endian ASCII

var MAGIC_GLTF = 0x676c5446; // glTF in Big-Endian ASCII

var BE = false; // Magic needs to be written as BE

export function parseBinaryXVIZ(arrayBuffer) {
  var gltfParser = new GLTFParser();
  gltfParser.parse(arrayBuffer, {
    createImages: false
  }); // TODO/ib - Fix when loaders.gl API is fixed

  return gltfParser.getApplicationData('xviz');
}
export function isBinaryXVIZ(arrayBuffer) {
  var isArrayBuffer = arrayBuffer instanceof ArrayBuffer;
  return isArrayBuffer && isGLB(arrayBuffer, {
    magic: MAGIC_XVIZ
  });
} // TODO - Replace with GLBParser.isGLB()

function isGLB(glbArrayBuffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$magic = options.magic,
      magic = _options$magic === void 0 ? MAGIC_GLTF : _options$magic; // GLB Header

  var dataView = new DataView(glbArrayBuffer);
  var magic1 = dataView.getUint32(0, BE); // Magic number (the ASCII string 'glTF').

  return magic1 === magic || magic1 === MAGIC_GLTF;
}
//# sourceMappingURL=xviz-binary-loader.js.map