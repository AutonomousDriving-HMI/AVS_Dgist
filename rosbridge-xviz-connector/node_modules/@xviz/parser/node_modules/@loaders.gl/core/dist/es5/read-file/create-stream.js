"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReadStream = createReadStream;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var _fileAliases = require("./file-aliases");

/* global fetch */

/* global URL */
// `fs` will be empty object in browsers (see package.json "browser" field).
var isNode = Boolean(_fs.default && _fs.default.createReadStream);

function createReadStream(_x, _x2) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(uri, options) {
    var isRequest;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            uri = (0, _fileAliases.resolvePath)(uri);
            _context.prev = 1;
            // NODE
            isRequest = uri.startsWith('http:') || uri.startsWith('https:');

            if (!isNode) {
              _context.next = 7;
              break;
            }

            if (!isRequest) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", new Promise(function (resolve, reject) {
              options = (0, _objectSpread2.default)({}, new URL(uri), options);
              var request = uri.startsWith('https:') ? _https.default.request : _http.default.request;
              request(uri, function (response) {
                return resolve(response);
              });
            }));

          case 6:
            return _context.abrupt("return", Promise.resolve(_fs.default.createReadStream(uri, options)));

          case 7:
            return _context.abrupt("return", fetch(uri, options) // Retrieve body as a ReadableStream
            .then(function (res) {
              return res.body;
            }));

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](1);
            return _context.abrupt("return", Promise.reject(_context.t0));

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 10]]);
  }));
  return _createReadStream.apply(this, arguments);
}
//# sourceMappingURL=create-stream.js.map