function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { findNearestValue } from './utils';
import Chart from './chart';
/**
 * A metric chart draws a chart with optional percentiles and lags
 */

export default class MetricChart extends PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "_onClick", evt => {
      this.props.onClick(this.state.hoveredX, evt);
    });

    _defineProperty(this, "_onNearestX", (key, value, evt) => {
      const hoveredValues = this.state.hoveredValues;
      hoveredValues[key] = value;
      this.setState({
        isHovered: true,
        hoveredX: this.props.getX(value),
        hoveredValues: _objectSpread({}, hoveredValues)
      });
      this.props.onNearestX(key, value, evt);
    });

    _defineProperty(this, "_onMouseLeave", evt => {
      this.setState({
        isHovered: false,
        hoveredX: null
      });
      this.props.onMouseLeave(evt);
    });

    this.state = {
      isHovered: false,
      hoveredX: null,
      // The nearest data point to the cursor in each series
      hoveredValues: {},
      // The nearest data point to the current time in each series
      currentValues: this._getCurrentValues(props)
    };
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (this.props.highlightX !== nextProps.highlightX || this.props.data !== nextProps.data) {
      this.setState({
        currentValues: this._getCurrentValues(nextProps)
      });
    }
  } // Find the closest data point in each series to the current time


  _getCurrentValues(_ref) {
    let highlightX = _ref.highlightX,
        data = _ref.data,
        getX = _ref.getX;

    if (!Number.isFinite(highlightX) || !data) {
      return null;
    }

    const result = {};

    for (const key in data) {
      if (data.hasOwnProperty(key)) {
        result[key] = findNearestValue(data[key], highlightX, getX);
      }
    }

    return result;
  }

  render() {
    const _this$state = this.state,
          isHovered = _this$state.isHovered,
          hoveredValues = _this$state.hoveredValues,
          currentValues = _this$state.currentValues;
    return React.createElement(Chart, _extends({}, this.props, {
      onClick: this._onClick,
      onNearestX: this._onNearestX,
      onMouseLeave: this._onMouseLeave,
      highlightValues: isHovered ? hoveredValues : currentValues
    }));
  }

}

_defineProperty(MetricChart, "propTypes", Object.assign({
  highlightX: PropTypes.number
}, Chart.propTypes));

_defineProperty(MetricChart, "defaultProps", Chart.defaultProps);
//# sourceMappingURL=metric-chart.js.map