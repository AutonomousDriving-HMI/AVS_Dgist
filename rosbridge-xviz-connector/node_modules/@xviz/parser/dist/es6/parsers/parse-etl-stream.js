function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { parseXVIZStream } from './parse-xviz-stream';

function noop() {}
/**
 * Extract primitives and variables from an XVIZ stream
 *
 * @param {Array} data - datums with shape {primitives, variables}
 * @param {Object} opts - callbacks for event notification
 * @return {Array} - parsed data with shape {time, features, lookAheads, variables, labels}
 */


export function parseEtlStream(data) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // Callbacks to enable instrumentation
  const _opts$onData = opts.onData,
        onData = _opts$onData === void 0 ? noop : _opts$onData,
        _opts$onDone = opts.onDone,
        onDone = _opts$onDone === void 0 ? noop : _opts$onDone;
  const context = onData(opts) || opts.context;
  const stream = parseXVIZStream(data, opts.convertPrimitive);
  onDone(_objectSpread({}, opts, {
    context
  }));
  return stream;
}
//# sourceMappingURL=parse-etl-stream.js.map