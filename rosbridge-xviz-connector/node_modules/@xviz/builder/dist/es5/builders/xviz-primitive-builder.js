"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _xvizBaseBuilder = _interopRequireDefault(require("./xviz-base-builder"));

var _constant = require("./constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var XVIZPrimitiveBuilder =
/*#__PURE__*/
function (_XVIZBaseBuilder) {
  _inherits(XVIZPrimitiveBuilder, _XVIZBaseBuilder);

  function XVIZPrimitiveBuilder(props) {
    var _this;

    _classCallCheck(this, XVIZPrimitiveBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(XVIZPrimitiveBuilder).call(this, _objectSpread({
      category: _constant.CATEGORY.primitive
    }, props)));

    _this.reset(); // primitives: {[streamId]: []}


    _this._primitives = {};
    return _this;
  }

  _createClass(XVIZPrimitiveBuilder, [{
    key: "image",
    value: function image(data) {
      if (this._type) {
        this._flush();
      }

      if (!(data instanceof Uint8Array || typeof data === 'string')) {
        this.validateError('An image data must be a string or Uint8Array.');
      }

      this.validatePropSetOnce('_image');
      this._type = _constant.PRIMITIVE_TYPES.image;
      this._image = {
        data: data
      };
      return this;
    }
  }, {
    key: "dimensions",
    value: function dimensions() {
      var widthPixel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var heightPixel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (!this._image) {
        this.validateError('An image needs to be set first.');
      }

      this._image.width_px = widthPixel;
      this._image.height_px = heightPixel;
      return this;
    }
  }, {
    key: "polygon",
    value: function polygon(vertices) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_vertices');
      this._vertices = vertices;
      this._type = _constant.PRIMITIVE_TYPES.polygon;
      return this;
    }
  }, {
    key: "polyline",
    value: function polyline(vertices) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_vertices');
      this._vertices = vertices;
      this._type = _constant.PRIMITIVE_TYPES.polyline;
      return this;
    }
  }, {
    key: "points",
    value: function points(vertices) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_vertices');
      this._vertices = vertices;
      this._type = _constant.PRIMITIVE_TYPES.point;
      return this;
    }
  }, {
    key: "circle",
    value: function circle(position, radius) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_radius');
      this.position(position);
      this._radius = radius;
      this._type = _constant.PRIMITIVE_TYPES.circle;
      return this;
    }
  }, {
    key: "stadium",
    value: function stadium(start, end, radius) {
      if (this._type) {
        this._flush();
      }

      this.validatePropSetOnce('_radius');

      if (start.length !== 3) {
        this.validateError("The start position must be of the form [x, y, z] where ".concat(start, " was provided"));
      }

      if (end.length !== 3) {
        this.validateError("The end position must be of the form [x, y, z] where ".concat(end, " was provided"));
      }

      this._vertices = [start, end];
      this._radius = radius;
      this._type = _constant.PRIMITIVE_TYPES.stadium;
      return this;
    } // TODO/Xintong validate `text` primitive

  }, {
    key: "text",
    value: function text(message) {
      if (this._type) {
        this._flush();
      }

      this._text = message;
      this._type = 'text';
      return this;
    }
  }, {
    key: "position",
    value: function position(point) {
      this.validatePropSetOnce('_vertices');

      if (point.length !== 3) {
        this.validateError("A position must be of the form [x, y, z] where ".concat(point, " was provided"));
      }

      this._vertices = [point];
      return this;
    }
  }, {
    key: "colors",
    value: function colors(colorArray) {
      this.validatePropSetOnce('_colors');
      this._colors = colorArray;
      return this;
    }
  }, {
    key: "style",
    value: function style(_style) {
      this._validatePrerequisite();

      this.validatePropSetOnce('_style');
      this._style = _style;

      this._validateStyle();

      return this;
    }
  }, {
    key: "id",
    value: function id(identifier) {
      this._validatePrerequisite();

      this.validatePropSetOnce('_id');
      this._id = identifier;
      return this;
    }
  }, {
    key: "classes",
    value: function classes(classList) {
      this._validatePrerequisite();

      this.validatePropSetOnce('_classes');
      this._classes = classList;
      return this;
    }
  }, {
    key: "_validate",
    value: function _validate() {
      _get(_getPrototypeOf(XVIZPrimitiveBuilder.prototype), "_validate", this).call(this);

      var isImage = this._type === _constant.PRIMITIVE_TYPES.image;

      if (isImage && (!this._image || !this._image.data)) {
        this.validateWarn("Stream ".concat(this._streamId, " image data are not provided."));
      }

      if (!isImage && !this._vertices) {
        this.validateWarn("Stream ".concat(this._streamId, " primitives vertices are not provided."));
      }
    }
  }, {
    key: "_flush",
    value: function _flush() {
      this._validate();

      this._flushPrimitives();
    }
  }, {
    key: "getData",
    value: function getData() {
      if (this._type) {
        this._flush();
      }

      if (Object.keys(this._primitives).length === 0) {
        return null;
      }

      return this._primitives;
    }
  }, {
    key: "_validatePrerequisite",
    value: function _validatePrerequisite() {
      if (!this._type) {
        this.validateError('Start from a primitive first, e.g polygon(), image(), etc.');
      }
    }
  }, {
    key: "_flushPrimitives",
    value: function _flushPrimitives() {
      var stream = this._primitives[this._streamId];

      if (!stream) {
        stream = {};
        this._primitives[this._streamId] = stream;
      }

      var primitive = this._formatPrimitive(); // Each type like "image" has an "images" array, this hack saves a
      // big switch statement.


      var arrayFieldName = "".concat(this._type, "s");
      var array = stream[arrayFieldName]; // Make sure array exists

      if (array === undefined) {
        array = [];
        stream[arrayFieldName] = array;
      } // Now add the primitive to it


      array.push(primitive);
      this.reset();
    }
    /* eslint-disable complexity */

  }, {
    key: "_formatPrimitive",
    value: function _formatPrimitive() {
      var obj = {};

      switch (this._type) {
        case 'polygon':
        case 'polyline':
          obj.vertices = this._vertices;
          break;

        case 'point':
          if (this._colors) {
            obj.colors = this._colors;
          }

          obj.points = this._vertices;
          break;

        case 'text':
          obj.position = this._vertices[0];
          obj.text = this._text;
          break;

        case 'circle':
          obj.center = this._vertices[0];
          obj.radius = this._radius;
          break;

        case 'stadium':
          obj.start = this._vertices[0];
          obj.end = this._vertices[1];
          obj.radius = this._radius;
          break;

        case 'image':
          if (this._vertices) {
            this._image.position = this._vertices[0];
          }

          Object.assign(obj, this._image);
          break;

        default:
      }

      var haveBase = false;
      var base = {};

      if (this._id) {
        haveBase = true;
        base.object_id = this._id;
      }

      if (this._style) {
        haveBase = true;
        base.style = this._style;
      }

      if (this._classes) {
        haveBase = true;
        base.classes = this._classes;
      }

      if (haveBase) {
        obj.base = base;
      }

      return obj;
    }
    /* eslint-enable complexity */

  }, {
    key: "_validateStyle",
    value: function _validateStyle() {
      this._validator.validateStyle(this);
    }
  }, {
    key: "reset",
    value: function reset() {
      this._type = null;
      this._image = null;
      this._vertices = null;
      this._radius = null;
      this._text = null;
      this._colors = null;
      this._id = null;
      this._style = null;
      this._classes = null;
    }
  }]);

  return XVIZPrimitiveBuilder;
}(_xvizBaseBuilder.default);

exports.default = XVIZPrimitiveBuilder;
//# sourceMappingURL=xviz-primitive-builder.js.map