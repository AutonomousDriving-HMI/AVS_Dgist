function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { CheckBox, Dropdown, RadioBox, Slider, TextBox, Toggle, Label } from '../shared';
import { Title, Heading, Separator } from './styled-components';
import styled from '@emotion/styled';
import { evaluateStyle } from '../shared/theme';
var InputContainer = styled.div(function (props) {
  return _objectSpread({
    display: 'flex',
    alignItems: 'start',
    justifyContent: 'space-between',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: props.level * props.theme.spacingLarge,
    marginBottom: props.theme.spacingSmall,
    '>label': {
      marginTop: props.theme.spacingTiny,
      marginRight: props.theme.spacingSmall
    },
    '>label + div': {
      flexGrow: 1,
      maxWidth: 320
    }
  }, evaluateStyle(props.userStyle, props));
});

var Input =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Input, _PureComponent);

  function Input(_props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, _props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onChange", function (value) {
      _this.props.onChange(_this.props.name, value);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderTitle", function (props, userStyle) {
      return React.createElement(Title, _extends({}, props, {
        userStyle: userStyle
      }), props.title);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderHeading", function (props, userStyle) {
      return React.createElement(Heading, _extends({}, props, {
        userStyle: userStyle
      }), props.title);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderSeparator", function (props, userStyle) {
      return React.createElement(Separator, _extends({}, props, {
        userStyle: userStyle
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderToggle", function (props, style) {
      var _this$props = _this.props,
          label = _this$props.label,
          onTitle = _this$props.onTitle,
          offTitle = _this$props.offTitle,
          value = _this$props.value,
          className = _this$props.className;
      var labelText = (value ? onTitle : offTitle) || label;
      return React.createElement(Toggle, _extends({}, props, {
        style: style,
        className: className,
        label: _this._renderLabel(labelText),
        onChange: _this._onChange
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderSlider", function (props, style) {
      return [_this._renderLabel(), React.createElement(Slider, _extends({
        key: "slider"
      }, props, {
        style: style,
        onChange: _this._onChange
      }))];
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderDropdown", function (props, style) {
      return [_this._renderLabel(), React.createElement(Dropdown, _extends({
        key: "dropdown"
      }, props, {
        style: style,
        onChange: _this._onChange
      }))];
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderRadio", function (props, style) {
      return [_this._renderLabel(), React.createElement(RadioBox, _extends({
        key: "radio"
      }, props, {
        style: style,
        onChange: _this._onChange
      }))];
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderTextBox", function (props, style) {
      return [_this._renderLabel(), React.createElement(TextBox, _extends({
        key: "textbox"
      }, props, {
        style: style,
        onChange: _this._onChange
      }))];
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderCheckbox", function (props, style) {
      return React.createElement(CheckBox, _extends({}, props, {
        label: _this._renderLabel(),
        style: style,
        onChange: _this._onChange
      }));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderCustom", function () {
      return _this.props.render(_this.props);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_renderLabel", function () {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props.label;
      var _this$props2 = _this.props,
          isEnabled = _this$props2.isEnabled,
          tooltip = _this$props2.tooltip,
          badge = _this$props2.badge,
          style = _this$props2.style;
      return label && React.createElement(Label, {
        key: "label",
        isEnabled: isEnabled,
        tooltip: tooltip,
        badge: badge,
        style: style.label
      }, label);
    });

    _this.renders = {
      title: _this._renderTitle,
      header: _this._renderHeading,
      separator: _this._renderSeparator,
      toggle: _this._renderToggle,
      text: _this._renderTextBox,
      range: _this._renderSlider,
      select: _this._renderDropdown,
      radio: _this._renderRadio,
      checkbox: _this._renderCheckbox,
      custom: _this._renderCustom
    };
    return _this;
  }

  _createClass(Input, [{
    key: "render",

    /* eslint-disable no-unused-vars */
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          type = _this$props3.type,
          onChange = _this$props3.onChange,
          label = _this$props3.label,
          tooltip = _this$props3.tooltip,
          badge = _this$props3.badge,
          otherProps = _objectWithoutProperties(_this$props3, ["style", "type", "onChange", "label", "tooltip", "badge"]);

      var render = this.renders[type];

      if (!render) {
        throw new Error("Unknown setting type ".concat(type));
      }

      var inputStyle = style[type];
      return React.createElement(InputContainer, _extends({}, otherProps, {
        userStyle: style.item
      }), render(otherProps, inputStyle));
    }
  }]);

  return Input;
}(PureComponent);

_defineProperty(Input, "propTypes", {
  onChange: PropTypes.func.isRequired,
  name: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  level: PropTypes.number.isRequired
});

_defineProperty(Input, "defaultProps", {
  className: ''
});

export { Input as default };
//# sourceMappingURL=input.js.map