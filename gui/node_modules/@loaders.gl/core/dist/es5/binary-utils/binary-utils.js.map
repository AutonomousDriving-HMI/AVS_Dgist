{"version":3,"sources":["../../../src/binary-utils/binary-utils.js"],"names":["toArrayBuffer","binaryData","ArrayBuffer","Blob","blobToArrayBuffer","stringToArrayBuffer","nodeBufferToArrayBuffer","toBuffer","isView","buffer","Buffer","byteLength","view","Uint8Array","i","length","toDataView","DataView","copyToArray","source","target","targetOffset","sourceArray","srcByteOffset","byteOffset","srcByteLength","set","blob","Promise","resolve","reject","arrayBuffer","fileReader","FileReader","onload","event","result","onloadend","onerror","readAsArrayBuffer","text","uint8Array","TextEncoder","encode","typedArray"],"mappings":"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","sourcesContent":["/* global FileReader, Blob, ArrayBuffer, Buffer */\nimport assert from '../utils/assert';\nimport {TextEncoder} from './text-encoding';\nimport {padTo4Bytes} from './memory-copy-utils';\n\nexport function toArrayBuffer(binaryData) {\n  if (binaryData instanceof ArrayBuffer) {\n    return binaryData;\n  }\n\n  if (typeof Blob !== 'undefined' && binaryData instanceof Blob) {\n    return blobToArrayBuffer(binaryData);\n  }\n\n  // if (ArrayBuffer.isView(binaryData)) {\n  //   return binaryData.buffer;\n  // }\n\n  if (typeof binaryData === 'string') {\n    return stringToArrayBuffer(binaryData);\n  }\n\n  return nodeBufferToArrayBuffer(binaryData);\n  // assert(false);\n  // return null;\n}\n\n// Convert (copy) ArrayBuffer to Buffer\nexport function toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  assert(false);\n  return null;\n}\n\nexport function toDataView(buffer) {\n  return new DataView(toArrayBuffer(buffer));\n}\n\n/**\n * Copy from source to target at the targetOffset\n *\n * @param {ArrayBuffer|TypedArray} source - The data to copy\n * @param {TypedArray} target - The destination to copy data into\n * @param {Number} targetOffset - The start offset into target to place the copied data\n *\n * @return {Number} Returns the new offset taking into account proper padding\n */\nexport function copyToArray(source, target, targetOffset) {\n  let sourceArray;\n\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    // Pack buffer onto the big target array\n    //\n    // 'source.data.buffer' could be a view onto a larger buffer.\n    // We MUST use this constructor to ensure the byteOffset and byteLength is\n    // set to correct values from 'source.data' and not the underlying\n    // buffer for target.set() to work properly.\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    sourceArray = new Uint8Array(source.buffer, srcByteOffset, srcByteLength);\n  }\n\n  // Pack buffer onto the big target array\n  target.set(sourceArray, targetOffset);\n\n  return targetOffset + padTo4Bytes(sourceArray.byteLength);\n}\n\n// Helper functions\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise((resolve, reject) => {\n    let arrayBuffer;\n    const fileReader = new FileReader();\n    fileReader.onload = event => {\n      arrayBuffer = event.target.result;\n    };\n    fileReader.onloadend = event => resolve(arrayBuffer);\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\n\nexport function stringToArrayBuffer(text) {\n  const uint8Array = new TextEncoder().encode(text);\n  return uint8Array.buffer;\n}\n\nfunction nodeBufferToArrayBuffer(buffer) {\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  const typedArray = new Uint8Array(buffer);\n  return typedArray.buffer;\n}\n"],"file":"binary-utils.js"}