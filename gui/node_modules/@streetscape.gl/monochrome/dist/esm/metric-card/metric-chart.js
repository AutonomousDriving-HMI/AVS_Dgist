function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { findNearestValue } from './utils';
import Chart from './chart';
/**
 * A metric chart draws a chart with optional percentiles and lags
 */

var MetricChart =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(MetricChart, _PureComponent);

  function MetricChart(props) {
    var _this;

    _classCallCheck(this, MetricChart);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MetricChart).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onClick", function (evt) {
      _this.props.onClick(_this.state.hoveredX, evt);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onNearestX", function (key, value, evt) {
      var hoveredValues = _this.state.hoveredValues;
      hoveredValues[key] = value;

      _this.setState({
        isHovered: true,
        hoveredX: _this.props.getX(value),
        hoveredValues: _objectSpread({}, hoveredValues)
      });

      _this.props.onNearestX(key, value, evt);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onMouseLeave", function (evt) {
      _this.setState({
        isHovered: false,
        hoveredX: null
      });

      _this.props.onMouseLeave(evt);
    });

    _this.state = {
      isHovered: false,
      hoveredX: null,
      // The nearest data point to the cursor in each series
      hoveredValues: {},
      // The nearest data point to the current time in each series
      currentValues: _this._getCurrentValues(props)
    };
    return _this;
  }

  _createClass(MetricChart, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.highlightX !== nextProps.highlightX || this.props.data !== nextProps.data) {
        this.setState({
          currentValues: this._getCurrentValues(nextProps)
        });
      }
    } // Find the closest data point in each series to the current time

  }, {
    key: "_getCurrentValues",
    value: function _getCurrentValues(_ref) {
      var highlightX = _ref.highlightX,
          data = _ref.data,
          getX = _ref.getX;

      if (!Number.isFinite(highlightX) || !data) {
        return null;
      }

      var result = {};

      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          result[key] = findNearestValue(data[key], highlightX, getX);
        }
      }

      return result;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          isHovered = _this$state.isHovered,
          hoveredValues = _this$state.hoveredValues,
          currentValues = _this$state.currentValues;
      return React.createElement(Chart, _extends({}, this.props, {
        onClick: this._onClick,
        onNearestX: this._onNearestX,
        onMouseLeave: this._onMouseLeave,
        highlightValues: isHovered ? hoveredValues : currentValues
      }));
    }
  }]);

  return MetricChart;
}(PureComponent);

_defineProperty(MetricChart, "propTypes", Object.assign({
  highlightX: PropTypes.number
}, Chart.propTypes));

_defineProperty(MetricChart, "defaultProps", Chart.defaultProps);

export { MetricChart as default };
//# sourceMappingURL=metric-chart.js.map