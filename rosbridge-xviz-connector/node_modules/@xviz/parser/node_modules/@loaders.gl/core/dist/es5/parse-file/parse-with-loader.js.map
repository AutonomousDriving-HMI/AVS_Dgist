{"version":3,"sources":["../../../src/parse-file/parse-with-loader.js"],"names":["parseWithLoader","data","loader","options","url","validateLoaderObject","addDefaultParserOptions","normalizeLegacyLoaderObject","worker","parseTextSync","dataType","promisify","parseSync","parse","promise","parseWithLoaderSync","parserFunc","Promise","resolve","reject","result","error","console","Error","name","Object","assign","DEFAULT_OPTIONS","log","NullLog","hasParser","parseText","loadAndParse","parseStream","parseBinary"],"mappings":"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","sourcesContent":["import parseWithWorker from '../worker-utils/parse-with-worker';\nimport NullLog from '../log-utils/null-log';\nimport assert from '../utils/assert';\n\n// TODO: support progress and abort\n// TODO: support moving loading to worker\nexport function parseWithLoader(data, loader, options = {}, url) {\n  validateLoaderObject(loader);\n\n  // Normalize options\n  options = addDefaultParserOptions(options, loader);\n\n  // v0.5 support\n  normalizeLegacyLoaderObject(loader);\n\n  if (loader.worker) {\n    return parseWithWorker(loader.worker, data, options);\n  }\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return promisify(loader.parseTextSync, loader, url, data, options);\n  }\n\n  // Now check for synchronous binary data parser, wrap results in promises\n  if (loader.parseSync) {\n    return promisify(loader.parseSync, loader, url, data, options);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parse) {\n    const promise = loader.parse(data, options);\n    // NOTE: keep return on separate statement to facilitate breakpoints here when debugging\n    return promise;\n  }\n\n  // TBD - If asynchronous parser not available, return null\n  // => This loader does not work on loaded data and only supports `loadAndParseAsync`\n  return null;\n}\n\nexport function parseWithLoaderSync(data, loader, options = {}, url) {\n  validateLoaderObject(loader);\n\n  // Normalize options\n  options = addDefaultParserOptions(options, loader);\n\n  // v0.5 support\n  normalizeLegacyLoaderObject(loader);\n\n  // First check for synchronous parsers\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options);\n  }\n  if (loader.parseSync) {\n    return loader.parseSync(data, options);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  return null;\n}\n\n// Helper function to wrap parser result/error in promise\nfunction promisify(parserFunc, loader, url, data, options) {\n  return new Promise((resolve, reject) => {\n    try {\n      const result = resolve(parserFunc(data, options));\n      // NOTE: return on separate statement to facilitate breakpoint setting here when debugging\n      resolve(result);\n    } catch (error) {\n      console.error(error); // eslint-disable-line\n      reject(new Error(`Could not parse ${url || 'data'} using ${loader.name} loader`));\n    }\n  });\n}\n\nfunction addDefaultParserOptions(options, loader) {\n  // TODO - explain why this optionb is needed for parsing\n  options = Object.assign({}, loader.DEFAULT_OPTIONS, options, {dataType: 'arraybuffer'});\n\n  // LOGGING\n\n  // options.log can be set to `null` to defeat logging\n  if (options.log === null) {\n    options.log = new NullLog();\n  }\n  // log defaults to console\n  if (!('log' in options)) {\n    /* global console */\n    options.log = console;\n  }\n\n  return options;\n}\n\nfunction validateLoaderObject(loader) {\n  const hasParser = loader.parseTextSync || loader.parseText ||\n    loader.parseSync || loader.parse || loader.loadAndParse ||\n    loader.parseStream || loader.worker;\n  assert(hasParser);\n}\n\n// Converts v0.5 loader object to v1.0\n// TODO - update all loaders and remove this function\nfunction normalizeLegacyLoaderObject(loader) {\n  if (loader.parseBinary) {\n    loader.parseSync = loader.parseBinary;\n    // delete loader.parseBinary;\n  }\n\n  if (loader.parseText) {\n    loader.parseTextSync = loader.parseText;\n    // delete loader.parseText;\n  }\n}\n"],"file":"parse-with-loader.js"}