function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Tooltip is just a Popover with some style overrides
 */
import React from 'react';
import { evaluateStyle } from '../theme';
import Popover from './popover';

class Tooltip extends React.Component {
  render() {
    const style = this.props.style;

    const tooltipStyle = _objectSpread({}, style, {
      body: props => _objectSpread({
        maxWidth: 300,
        paddingTop: props.theme.spacingSmall,
        paddingBottom: props.theme.spacingSmall,
        paddingLeft: props.theme.spacingNormal,
        paddingRight: props.theme.spacingNormal
      }, evaluateStyle(style.body, props))
    });

    return React.createElement(Popover, _extends({}, this.props, {
      style: tooltipStyle,
      trigger: Popover.HOVER
    }));
  }

}

_defineProperty(Tooltip, "propTypes", Popover.propTypes);

_defineProperty(Tooltip, "defaultProps", {
  style: {},
  position: Popover.AUTO
});

export default Tooltip;
//# sourceMappingURL=tooltip.js.map