{"version":3,"sources":["../../../src/read-file/create-stream.js"],"names":["isNode","Boolean","fs","createReadStream","uri","options","isRequest","startsWith","Promise","resolve","reject","URL","request","https","http","response","fetch","then","res","body"],"mappings":";;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AAEA;;AANA;;AACA;AACqB;AAMrB,IAAMA,MAAM,GAAGC,OAAO,CAACC,eAAMA,YAAGC,gBAAV,CAAtB;;SAEsBA,gB;;;;;;;4BAAf,iBAAgCC,GAAhC,EAAqCC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLD,YAAAA,GAAG,GAAG,8BAAYA,GAAZ,CAAN;AADK;AAGH;AACME,YAAAA,SAJH,GAIeF,GAAG,CAACG,UAAJ,CAAe,OAAf,KAA2BH,GAAG,CAACG,UAAJ,CAAe,QAAf,CAJ1C;;AAAA,iBAMCP,MAND;AAAA;AAAA;AAAA;;AAAA,iBAOGM,SAPH;AAAA;AAAA;AAAA;;AAAA,6CAQQ,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,cAAAA,OAAO,mCAAO,IAAIM,GAAJ,CAAQP,GAAR,CAAP,EAAwBC,OAAxB,CAAP;AACA,kBAAMO,OAAO,GAAGR,GAAG,CAACG,UAAJ,CAAe,QAAf,IAA2BM,eAAMD,OAAjC,GAA2CE,cAAKF,OAAhE;AACAA,cAAAA,OAAO,CAACR,GAAD,EAAM,UAAAW,QAAQ;AAAA,uBAAIN,OAAO,CAACM,QAAD,CAAX;AAAA,eAAd,CAAP;AACD,aAJM,CARR;;AAAA;AAAA,6CAeMP,OAAO,CAACC,OAAR,CAAgBP,YAAGC,gBAAH,CAAoBC,GAApB,EAAyBC,OAAzB,CAAhB,CAfN;;AAAA;AAAA,6CAkBIW,KAAK,CAACZ,GAAD,EAAMC,OAAN,CAAL,CACL;AADK,aAEJY,IAFI,CAEC,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAR;AAAA,aAFJ,CAlBJ;;AAAA;AAAA;AAAA;AAAA,6CAsBIX,OAAO,CAACE,MAAR,aAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global fetch */\n/* global URL */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\n\nimport {resolvePath} from './file-aliases';\n\nconst isNode = Boolean(fs && fs.createReadStream);\n\nexport async function createReadStream(uri, options) {\n  uri = resolvePath(uri);\n  try {\n    // NODE\n    const isRequest = uri.startsWith('http:') || uri.startsWith('https:');\n\n    if (isNode) {\n      if (isRequest) {\n        return new Promise((resolve, reject) => {\n          options = {...new URL(uri), ...options};\n          const request = uri.startsWith('https:') ? https.request : http.request;\n          request(uri, response => resolve(response));\n        });\n      }\n\n      return Promise.resolve(fs.createReadStream(uri, options));\n    }\n\n    return fetch(uri, options)\n      // Retrieve body as a ReadableStream\n      .then(res => res.body);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n"],"file":"create-stream.js"}