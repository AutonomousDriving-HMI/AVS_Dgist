"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isXVIZMessage = isXVIZMessage;
exports.unpackEnvelope = unpackEnvelope;
exports.isEnvelope = isEnvelope;
exports.parseStreamDataMessage = parseStreamDataMessage;
exports.parseStreamLogData = parseStreamLogData;

var _constants = require("../constants");

var _xvizBinaryLoader = require("../loaders/xviz-loader/xviz-binary-loader");

var _parseLogMetadata = require("./parse-log-metadata");

var _parseStreamVideoMessage = require("./parse-stream-video-message");

var _textEncoding = require("../utils/text-encoding");

var _parseTimesliceDataV = _interopRequireDefault(require("./parse-timeslice-data-v1"));

var _parseTimesliceDataV2 = _interopRequireDefault(require("./parse-timeslice-data-v2"));

var _xvizConfig = require("../config/xviz-config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// returns true if the input represents a JSON string.
// Can be either string or Uint8Array
function isJSONString(str) {
  var firstChar = str[0];
  var lastChar = str[str.length - 1];

  if (Number.isFinite(firstChar)) {
    firstChar = String.fromCharCode(firstChar);
    lastChar = String.fromCharCode(lastChar);
  }

  return firstChar === '{' && lastChar === '}' || firstChar === '[' && lastChar === ']';
}

var XVIZ_TYPE_PATTERN = /"type":\s*"xviz\//; // returns true if the input represents an enveloped XVIZ object as a JSON string.
// Can be either string or Uint8Array

function isXVIZJSONString(str) {
  // {"type":"xviz/
  var firstChunk = str.slice(0, 14); // "type":"xviz/*"}

  var lastChunk = str.slice(-36);

  if (Number.isFinite(firstChunk[0])) {
    firstChunk = String.fromCharCode.apply(null, firstChunk);
    lastChunk = String.fromCharCode.apply(null, lastChunk);
  }

  return XVIZ_TYPE_PATTERN.test(firstChunk) || XVIZ_TYPE_PATTERN.test(lastChunk);
}

function getDataType(data) {
  if (data === null || data === undefined) {
    return null;
  }

  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    return 'binary';
  }

  return _typeof(data);
} // get JSON from binary


function decode(data, recursive) {
  switch (getDataType(data)) {
    case 'binary':
      if ((0, _xvizBinaryLoader.isBinaryXVIZ)(data)) {
        return (0, _xvizBinaryLoader.parseBinaryXVIZ)(data);
      }

      if (data instanceof ArrayBuffer) {
        data = new Uint8Array(data);
      }

      if (isJSONString(data)) {
        var jsonString = new _textEncoding.TextDecoder('utf8').decode(data);
        return JSON.parse(jsonString);
      }

      break;

    case 'string':
      if (isJSONString(data)) {
        return JSON.parse(data);
      }

      break;

    case 'object':
      if (recursive) {
        for (var key in data) {
          // Only peek one-level deep
          data[key] = decode(data[key], false);
        }
      }

      break;

    default:
  }

  return data;
} // Efficiently check if an object is a supported XVIZ message, without decoding it.
// Returns true for the following formats: XVIZ binary (GLB), eveloped JSON object,
// eveloped JSON string, eveloped JSON string as arraybuffer


function isXVIZMessage(data) {
  switch (getDataType(data)) {
    case 'binary':
      if ((0, _xvizBinaryLoader.isBinaryXVIZ)(data)) {
        return true;
      }

      if (data instanceof ArrayBuffer) {
        data = new Uint8Array(data);
      }

      return isXVIZJSONString(data);

    case 'string':
      return isXVIZJSONString(data);

    case 'object':
      return data.type ? data.type.startsWith('xviz/') : false;

    default:
  }

  return false;
} // Parse apart the namespace and type for the enveloped data


function unpackEnvelope(data) {
  var parts = data.type.split('/');
  return {
    namespace: parts[0],
    type: parts.slice(1).join('/'),
    data: data.data
  };
} // Sniff out whether the JSON data provided is in the XVIZ envelope format


function isEnvelope(data) {
  return data.type && data.data;
} // Post processes a stream message to make it easy to use for JavaScript applications


function parseStreamDataMessage(message, onResult, onError, opts) {
  // TODO(twojtasz): better message dispatching
  // here, not all arraybuffer may be image (packed point cloud)
  // TODO(jlisee): Node.js support for blobs for better unit testing
  if (typeof Blob !== 'undefined' && message instanceof Blob) {
    (0, _parseStreamVideoMessage.parseStreamVideoMessage)(message, onResult, onError);
    return;
  }

  try {
    var data = decode(message, true);
    var v2Type;
    var parseData = true;

    if (isEnvelope(data)) {
      var unpacked = unpackEnvelope(data);

      if (unpacked.namespace === 'xviz') {
        v2Type = unpacked.type;
        data = unpacked.data;
      } else {
        parseData = false;
      }
    }

    if (parseData) {
      var result = parseStreamLogData(data, _objectSpread({}, opts, {
        v2Type: v2Type
      }));
      onResult(result);
    }
  } catch (error) {
    onError(error);
  }
}

function parseStreamLogData(data) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // TODO(twojtasz): this data.message is due an
  // uncoordinated change on the XVIZ server, temporary.
  var typeKey = opts.v2Type || data.type || data.message || data.update_type;

  switch (typeKey) {
    case 'state_update':
      return parseTimesliceData(data, opts.convertPrimitive);

    case 'metadata':
      return _objectSpread({}, (0, _parseLogMetadata.parseLogMetadata)(data), {
        // ensure application sees the metadata type set to the uppercase version
        type: _constants.LOG_STREAM_MESSAGE.METADATA
      });

    case 'transform_log_done':
      return _objectSpread({}, data, {
        type: _constants.LOG_STREAM_MESSAGE.DONE
      });

    case 'error':
      return _objectSpread({}, data, {
        message: 'Stream server error',
        type: _constants.LOG_STREAM_MESSAGE.ERROR
      });
    // v1 types

    case 'done':
      return _objectSpread({}, data, {
        type: _constants.LOG_STREAM_MESSAGE.DONE
      });

    default:
      //  TODO(twojtasz): XVIZ should be tagging this with a type
      return parseTimesliceData(data, opts.convertPrimitive);
  }
}

function parseTimesliceData(data, convertPrimitive) {
  var _getXVIZConfig = (0, _xvizConfig.getXVIZConfig)(),
      currentMajorVersion = _getXVIZConfig.currentMajorVersion;

  return currentMajorVersion === 1 ? (0, _parseTimesliceDataV.default)(data, convertPrimitive) : (0, _parseTimesliceDataV2.default)(data, convertPrimitive);
}
//# sourceMappingURL=parse-stream-data-message.js.map