{"version":3,"sources":["../../../../src/writers/xviz-writer/xviz-json-encoder.js"],"names":["base64js","xvizConvertJson","object","keyName","Array","isArray","map","element","ArrayBuffer","isView","from","length","Error","newObject","count","i","push","slice","properties","Object","keys","includes","data","fromByteArray","key"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,WAArB,C,CAEA;AACA;AACA;;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AAC/C,MAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzB,WAAOA,MAAM,CAACI,GAAP,CAAWC,OAAO,IAAIN,eAAe,CAACM,OAAD,EAAUJ,OAAV,CAArC,CAAP;AACD,GAH8C,CAK/C;AACA;;;AACA,MAAIK,WAAW,CAACC,MAAZ,CAAmBP,MAAnB,CAAJ,EAAgC;AAC9B;AACA,QAAI,EAAEC,OAAO,KAAK,UAAZ,IAA0BA,OAAO,KAAK,QAAxC,CAAJ,EAAuD;AACrD,aAAOC,KAAK,CAACM,IAAN,CAAWR,MAAX,CAAP;AACD,KAJ6B,CAM9B;AACA;;;AACA,UAAMS,MAAM,GAAGT,MAAM,CAACS,MAAtB;;AACA,QAAIA,MAAM,GAAG,CAAT,KAAe,CAAnB,EAAsB;AACpB,YAAM,IAAIC,KAAJ,CAAU,wEAAV,CAAN;AACD,KAX6B,CAa9B;;;AACA,UAAMC,SAAS,GAAG,EAAlB;AACA,UAAMC,KAAK,GAAGH,MAAM,GAAG,CAAvB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;AAC9BF,MAAAA,SAAS,CAACG,IAAV,CAAeZ,KAAK,CAACM,IAAN,CAAWR,MAAM,CAACe,KAAP,CAAaF,CAAC,GAAG,CAAjB,EAAoBA,CAAC,GAAG,CAAJ,GAAQ,CAA5B,CAAX,CAAf;AACD;;AACD,WAAOF,SAAP;AACD;;AAED,MAAIX,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,QAAzC,EAAmD;AACjD;AACA,UAAMgB,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYlB,MAAZ,CAAnB;;AACA,QAAIgB,UAAU,CAACG,QAAX,CAAoB,MAApB,KAA+BlB,OAAO,KAAK,QAA/C,EAAyD;AACvD,+BACKD,MADL;AAEEoB,QAAAA,IAAI,EAAEtB,QAAQ,CAACuB,aAAT,CAAuBrB,MAAM,CAACoB,IAA9B;AAFR;AAID,KARgD,CAUjD;;;AACA,UAAMT,SAAS,GAAG,EAAlB;;AACA,SAAK,MAAMW,GAAX,IAAkBtB,MAAlB,EAA0B;AACxBW,MAAAA,SAAS,CAACW,GAAD,CAAT,GAAiBvB,eAAe,CAACC,MAAM,CAACsB,GAAD,CAAP,EAAcA,GAAd,EAAmBrB,OAAnB,CAAhC;AACD;;AACD,WAAOU,SAAP;AACD;;AAED,SAAOX,MAAP;AACD;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport base64js from 'base64-js';\n\n// Recursively walk object performing the following conversions\n// - primitives with typed array fields are turned into arrays\n// - primtives of type image have the data turned into a base64 string\n/* eslint-disable complexity */\nexport function xvizConvertJson(object, keyName) {\n  if (Array.isArray(object)) {\n    return object.map(element => xvizConvertJson(element, keyName));\n  }\n\n  // Typed arrays become normal arrays\n  // TODO: no way to know if this should be 3 or 4\n  if (ArrayBuffer.isView(object)) {\n    // Return normal arrays\n    if (!(keyName === 'vertices' || keyName === 'points')) {\n      return Array.from(object);\n    }\n\n    // For primitives with key's 'vertices', we force nested arrays.\n    // TODO(twojtasz): Support flat arrays\n    const length = object.length;\n    if (length % 3 !== 0) {\n      throw new Error('TypeArray conversion failure. The array is expect to be divisible by 3');\n    }\n\n    // Construct points from flattened array\n    const newObject = [];\n    const count = length / 3;\n    for (let i = 0; i < count; i++) {\n      newObject.push(Array.from(object.slice(i * 3, i * 3 + 3)));\n    }\n    return newObject;\n  }\n\n  if (object !== null && typeof object === 'object') {\n    // Handle XVIZ Image Primitive\n    const properties = Object.keys(object);\n    if (properties.includes('data') && keyName === 'images') {\n      return {\n        ...object,\n        data: base64js.fromByteArray(object.data)\n      };\n    }\n\n    // Handle all other objects\n    const newObject = {};\n    for (const key in object) {\n      newObject[key] = xvizConvertJson(object[key], key, keyName);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n/* eslint-enable complexity */\n"],"file":"xviz-json-encoder.js"}