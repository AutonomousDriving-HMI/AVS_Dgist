"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseObject = _interopRequireDefault(require("./base-object"));

var _math = require("math.gl");

var _assert = _interopRequireDefault(require("../utils/assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SDV =
/*#__PURE__*/
function (_BaseObject) {
  _inherits(SDV, _BaseObject);

  // Set `validate` to `true` to throw exception if object cannot be initialized
  // If not, object will still be created as "uninitialized",
  // and member functions will just return null
  function SDV(_ref) {
    var _this;

    var vehicleLog = _ref.vehicleLog,
        _ref$validate = _ref.validate,
        validate = _ref$validate === void 0 ? false : _ref$validate;

    _classCallCheck(this, SDV);

    if (validate) {
      (0, _assert.default)(validate || vehicleLog, 'sdv validate');
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SDV).call(this));
    _this.xvizLog = vehicleLog;
    return _this;
  }

  _createClass(SDV, [{
    key: "isValid",
    get: function get() {
      return Boolean(this.xvizLog);
    }
  }, {
    key: "position",
    get: function get() {
      // TODO - vehicleLog.carPosition is object with 0, 1, 2 keys, not array which is why
      // we need to initialize this way
      // Needs to be fixed in API post-processing
      return this.xvizLog && new _math.Vector3().copy(this.xvizLog.carPosition);
    }
  }, {
    key: "bearing",
    get: function get() {
      // Note: Heading should be transformed by Viewport modelMatrix
      return this.xvizLog && (0, _math.degrees)(this.xvizLog.heading);
    }
  }]);

  return SDV;
}(_baseObject.default);

exports.default = SDV;
//# sourceMappingURL=sdv.js.map