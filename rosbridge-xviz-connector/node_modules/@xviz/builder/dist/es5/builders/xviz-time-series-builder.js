"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constant = require("./constant");

var _xvizBaseBuilder = _interopRequireDefault(require("./xviz-base-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * XVIZTimeSeriesBuilder manages time_series data by `time` and `id` and stores
 * the the array of single stream value entries.
 *
 * This is the shape returned from getData()
 *
 * [
 *   {
 *     timestamp: x,
 *     streams: ['a', 'b'],
 *     values: {doubles: [1, 2]},
 *     object_id: '123'
 *   },
 *   {
 *     timestamp: y,
 *     streams: ['a', 'b'],
 *     values: {doubles: [1, 2]},
 *   }
 * ]
 */
var XVIZTimeSeriesBuilder =
/*#__PURE__*/
function (_XVIZBaseBuilder) {
  _inherits(XVIZTimeSeriesBuilder, _XVIZBaseBuilder);

  function XVIZTimeSeriesBuilder(props) {
    var _this;

    _classCallCheck(this, XVIZTimeSeriesBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(XVIZTimeSeriesBuilder).call(this, _objectSpread({}, props, {
      category: _constant.CATEGORY.time_series
    }))); // Stores time_series data by timestamp then id
    // They will then be group when constructing final object

    _this._data = new Map(); // inflight builder data

    _this._id = null;
    _this._value = null;
    _this._timestamp = null;
    return _this;
  }

  _createClass(XVIZTimeSeriesBuilder, [{
    key: "id",
    value: function id(identifier) {
      this.validatePropSetOnce('_id');
      this._id = identifier;
      return this;
    }
  }, {
    key: "value",
    value: function value(_value) {
      this.validatePropSetOnce('_value');

      if (_value instanceof Array) {
        this.validateError('Input `value` must be single value');
      }

      this._value = _value;
      return this;
    }
  }, {
    key: "timestamp",
    value: function timestamp(_timestamp) {
      this.validatePropSetOnce('_timestamp');

      if (_timestamp instanceof Array) {
        this.validateError('Input `timestamp` must be a single value');
      }

      this._timestamp = _timestamp;
      return this;
    }
  }, {
    key: "getData",
    value: function getData() {
      this._flush();

      if (this._data.size === 0) {
        return null;
      }

      var timeSeriesData = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              timestamp = _step$value[0],
              ids = _step$value[1];

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = ids[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = _slicedToArray(_step2.value, 2),
                  id = _step2$value[0],
                  fields = _step2$value[1];

              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = fields.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var tsdata = _step3.value;
                  var entry = {
                    timestamp: timestamp,
                    streams: tsdata.streams,
                    values: tsdata.values
                  };
                  /* eslint-disable camelcase, max-depth */

                  if (id !== null) {
                    entry.object_id = id;
                  }
                  /* eslint-enable camelcase, max-depth */


                  timeSeriesData.push(entry);
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return timeSeriesData;
    } // Lookup by timestamp, then id to store [streamId, value]

  }, {
    key: "_addTimestampEntry",
    value: function _addTimestampEntry() {
      // this._data structure
      // timestamp: {
      //   id: {
      //     fieldName: {
      //       streams: []
      //       values: []
      //     }
      //   }
      // }
      if (!this._dataPending()) {
        return;
      } // Lookup where to put the value


      var fieldName = 'doubles';

      if (typeof this._value === 'string' || this._value instanceof String) {
        fieldName = 'strings';
      } else if (typeof this._value === 'boolean') {
        fieldName = 'bools';
      } // Building up the [(stream, value)] list


      var tsEntry = this._data.get(this._timestamp);

      if (tsEntry) {
        // We have timestamp, now get id
        var idEntry = tsEntry.get(this._id);

        if (idEntry) {
          var fieldEntry = idEntry.get(fieldName);

          if (fieldEntry) {
            // append entry to existing array
            fieldEntry.streams.push(this._streamId);
            fieldEntry.values[fieldName].push(this._value);
          } else {
            idEntry.set(fieldName, this._getFieldEntry(fieldName));
          }
        } else {
          // create new mapping of id -> array of entries
          tsEntry.set(this._id, this._getIdEntry(fieldName));
        }
      } else {
        // No timestamp entry
        // create new id -> array of entries
        // for same id different with fieldNames, we store as different ts entries
        tsEntry = new Map();
        tsEntry.set(this._id, this._getIdEntry(fieldName));

        this._data.set(this._timestamp, tsEntry);
      }
    }
  }, {
    key: "_getIdEntry",
    value: function _getIdEntry(fieldName) {
      var idEntry = new Map();
      idEntry.set(fieldName, this._getFieldEntry(fieldName));
      return idEntry;
    }
  }, {
    key: "_getFieldEntry",
    value: function _getFieldEntry(fieldName) {
      return {
        streams: [this._streamId],
        values: _defineProperty({}, fieldName, [this._value])
      };
    }
  }, {
    key: "_dataPending",
    value: function _dataPending() {
      return this._value !== null || this._timestamp !== null || this._id !== null;
    }
  }, {
    key: "_validate",
    value: function _validate() {
      if (this._dataPending()) {
        _get(_getPrototypeOf(XVIZTimeSeriesBuilder.prototype), "_validate", this).call(this);

        if (this._value === null) {
          this.validateWarn("Stream ".concat(this._streamId, " value is not provided."));
        }

        if (this._timestamp === null) {
          this.validateWarn("Stream ".concat(this._streamId, " timestamp is not provided."));
        }
      }
    }
  }, {
    key: "_flush",
    value: function _flush() {
      this._validate();

      this._addTimestampEntry();

      this._reset();
    } // reset the inflight values

  }, {
    key: "_reset",
    value: function _reset() {
      this._id = null;
      this._value = null;
      this._timestamp = null;
    }
  }]);

  return XVIZTimeSeriesBuilder;
}(_xvizBaseBuilder.default);

exports.default = XVIZTimeSeriesBuilder;
//# sourceMappingURL=xviz-time-series-builder.js.map