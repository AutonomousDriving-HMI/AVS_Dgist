{"version":3,"sources":["../../../src/glb/glb-builder.js"],"names":["isImage","padTo4Bytes","copyArrayBuffer","copyToArray","TextEncoder","getAccessorTypeFromSize","getComponentTypeFromArray","packBinaryJson","MAGIC_glTF","LE","BE","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLBBuilder","constructor","options","byteLength","json","buffers","bufferViews","accessors","images","meshes","sourceBuffers","log","console","getByteLength","imageData","encodeAsGLB","_createGLBBuffer","addApplicationData","key","data","packOptions","jsonData","nopack","addBuffer","sourceBuffer","accessor","size","bufferViewIndex","addBufferView","accessorDefaults","componentType","count","Math","round","length","addAccessor","Object","assign","buffer","push","byteOffset","bufferView","type","_pack","_packBinaryChunk","arrayBuffer","totalByteLength","ArrayBuffer","targetArray","Uint8Array","dstByteOffset","i","binChunk","magic","warn","jsonChunkOffset","jsonChunk","_convertObjectToJsonChunk","jsonChunkLength","binChunkOffset","fileLength","glbArrayBuffer","dataView","DataView","setUint32","binChunkLengthPadded","_getInternalCounts","jsonChunkString","JSON","stringify","textEncoder","encode"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {\n  isImage,\n  padTo4Bytes,\n  copyArrayBuffer,\n  copyToArray,\n  TextEncoder,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '@loaders.gl/core';\n\nimport packBinaryJson from '../packed-json/pack-binary-json';\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst LE = true; // Binary GLTF is little endian.\nconst BE = false; // Magic needs to be written as BE\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nexport default class GLBBuilder {\n  constructor(options = {}) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n\n    this.log = options.log || console; // eslint-disable-line\n  }\n\n  // ACCESSORS\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    return isImage(imageData);\n  }\n\n  // MODIFERS\n\n  // Encode the full glTF file as a binary GLB file\n  // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file\n  encodeAsGLB(options = {}) {\n    return this._createGLBBuffer(options);\n  }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.nopack ? data : packBinaryJson(data, this, packOptions);\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Basic glTF adders: basic memory buffer/image type fields\n  // Scenegraph specific adders are placed in glTFBuilder\n  // TODO: These should be moved to glTFBuilder once addBuffer\n  // have been rewritten to not depend on these.\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    // Add an accessor pointing to the new buffer view\n    this.json.accessors.push({\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    });\n\n    return this.json.accessors.length - 1;\n  }\n\n  // PRIVATE\n\n  // For testing\n  _pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  _createGLBBuffer(options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    const binChunk = this.arrayBuffer;\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n\n    const jsonChunk = this._convertObjectToJsonChunk(this.json);\n    // As body is 4-byte aligned, the scene length must be padded to have a multiple of 4.\n    const jsonChunkLength = padTo4Bytes(jsonChunk.byteLength);\n\n    const binChunkOffset = jsonChunkLength + jsonChunkOffset;\n    const fileLength = binChunkOffset + GLB_CHUNK_HEADER_SIZE + padTo4Bytes(binChunk.byteLength);\n\n    // Length is know, we can create the GLB memory buffer!\n    const glbArrayBuffer = new ArrayBuffer(fileLength);\n    const dataView = new DataView(glbArrayBuffer);\n\n    // GLB Header\n    dataView.setUint32(0, MAGIC_glTF, BE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(4, 2, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(8, fileLength, LE); // Total byte length of generated file (uint32)\n\n    // Write the JSON chunk\n    dataView.setUint32(12, jsonChunk.byteLength, LE); // Byte length of json chunk (uint32)\n    dataView.setUint32(16, 0, LE); // Chunk format as uint32 (JSON is 0)\n    copyArrayBuffer(glbArrayBuffer, jsonChunk, jsonChunkOffset);\n\n    // TODO - Add spaces as padding to ensure scene is a multiple of 4 bytes.\n    // for (let i = jsonChunkLength + 20; i < binChunkOffset; ++i) {\n    //   glbFileArray[i] = 0x20;\n    // }\n\n    // Write the BIN chunk\n    const binChunkLengthPadded = padTo4Bytes(binChunk.byteLength);\n    dataView.setUint32(binChunkOffset + 0, binChunkLengthPadded, LE); // Byte length BIN (uint32)\n    dataView.setUint32(binChunkOffset + 4, 1, LE); // Chunk format as uint32 (BIN is 1)\n    copyArrayBuffer(glbArrayBuffer, binChunk, binChunkOffset + GLB_CHUNK_HEADER_SIZE);\n\n    return glbArrayBuffer;\n  }\n\n  // Report internal buffer sizes for debug and testing purposes\n  _getInternalCounts() {\n    return {\n      buffers: this.json.buffers.length,\n      bufferViews: this.json.bufferViews.length,\n      accessors: this.json.accessors.length,\n      images: this.json.images.length\n    };\n  }\n\n  _convertObjectToJsonChunk(json) {\n    const jsonChunkString = JSON.stringify(json);\n    const textEncoder = new TextEncoder('utf8');\n    return textEncoder.encode(jsonChunkString);\n  }\n}\n\n"],"file":"glb-builder.js"}