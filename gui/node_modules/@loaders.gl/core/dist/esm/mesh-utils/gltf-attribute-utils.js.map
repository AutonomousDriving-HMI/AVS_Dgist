{"version":3,"sources":["../../../src/mesh-utils/gltf-attribute-utils.js"],"names":["getAccessorTypeFromSize","getComponentTypeFromArray","POSITION","TEXCOORD_0","TEXCOORD_1","TEXCOORD_2","ATTRIBUTE_PATTERNS","getGLTFIndices","attributes","name","attribute","isGLTFIndices","indices","toTypedArray","Uint32Array","getGLTFAccessor","getGLTFAccessors","accessors","glTFAccessor","getGLTFAttributeMap","standardizedAttributes","standardizedName","getGLTFAttributeName","gltfAttributeName","getAccessorData","buffer","size","count","value","bufferView","byteOffset","type","componentType","getGLTFAttribute","data","glTFAttributeMap","toLowerCase","indexOf","regex","exec","attributeName","ArrayBuffer","isView","Float32Array","length","array","ArrayType","convertTypedArrays","Array","isArray"],"mappings":"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","sourcesContent":["import {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-type-utils';\n\n// Patters that map known names to GLTF counterparts\nconst POSITION = 'POSITION';\nconst TEXCOORD_0 = 'TEXCOORD_0';\nconst TEXCOORD_1 = 'TEXCOORD_1';\nconst TEXCOORD_2 = 'TEXCOORD_2';\n\nconst ATTRIBUTE_PATTERNS = [\n  [/color/i, 'COLOR_0'],\n  [/pickingColor/i, 'COLOR_1'],\n  [/normal/i, 'NORMAL'],\n  [/tangent/i, 'TANGENT'],\n  [/texCoord1/i, TEXCOORD_0],\n  [/texCoord2/i, TEXCOORD_1],\n  [/texCoord3/i, TEXCOORD_2],\n  [/texCoord/i, TEXCOORD_0],\n  [/uv1/i, TEXCOORD_0],\n  [/uv2/i, TEXCOORD_1],\n  [/uv3/i, TEXCOORD_2],\n  [/uv/i, TEXCOORD_0],\n  [/joints/i, 'JOINTS_0'],\n  [/weights/i, 'WEIGHTS_0'],\n  [/pos/i, POSITION],\n  [/vertex/i, POSITION],\n  [/vertices/i, POSITION]\n];\n\n// Returns the indices array, if present\nexport function getGLTFIndices(attributes) {\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (isGLTFIndices(name)) {\n      const indices = toTypedArray(attribute, Uint32Array);\n      return getGLTFAccessor(indices);\n    }\n  }\n  return null;\n}\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes) {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (!isGLTFIndices(name)) {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Returns an object with a map from glTF-standardized attributes names to loaded attribute names\nexport function getGLTFAttributeMap(attributes) {\n  const standardizedAttributes = {};\n  for (const name in attributes) {\n    const standardizedName = getGLTFAttributeName(name);\n    if (standardizedName && !isGLTFIndices(name)) {\n      standardizedAttributes[standardizedName] = name;\n    }\n  }\n  return standardizedAttributes;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute, gltfAttributeName) {\n  const {buffer, size, count} = getAccessorData(attribute, gltfAttributeName);\n\n  const glTFAccessor = {\n    // TODO: Deprecate `value` in favor of bufferView?\n    value: buffer,\n    size,     // Decoded `type` (e.g. SCALAR)\n\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    bufferView: null,\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\nexport function getGLTFAttribute(data, gltfAttributeName) {\n  return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n}\n\n// Check if an attribute contains indices\nfunction isGLTFIndices(name) {\n  name = name.toLowerCase();\n  return (\n    name.indexOf('index') !== -1 || name.indexOf('indices') !== -1 || name.indexOf('element') !== -1\n  );\n}\n\n// Convert an attribute name string to glTF 2.0 recommended attribute names\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#geometry\nfunction getGLTFAttributeName(name) {\n  name = name.toLowerCase();\n  for (const [regex, standardizedName] of ATTRIBUTE_PATTERNS) {\n    if (regex.exec(name)) {\n      return standardizedName;\n    }\n  }\n  return null;\n}\n\nfunction getAccessorData(attribute, attributeName) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"],"file":"gltf-attribute-utils.js"}