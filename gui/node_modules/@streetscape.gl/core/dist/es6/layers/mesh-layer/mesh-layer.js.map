{"version":3,"sources":["../../../../src/layers/mesh-layer/mesh-layer.js"],"names":["Layer","GL","Model","Geometry","loadTextures","Texture2D","fp64","fp64LowPart","vs","fs","assert","RADIAN_PER_DEGREE","Math","PI","getTexture","gl","src","opts","Object","assign","urls","then","textures","catch","error","Error","Promise","resolve","getTextureFromData","data","validateGeometryAttributes","attributes","positions","normals","texCoords","size","constant","value","Float32Array","getGeometry","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","desaturate","brightness","wireframe","lightSettings","getPosition","x","position","getColor","getSize","getYaw","d","yaw","getPitch","pitch","getRoll","roll","MeshLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","accessor","instancePositions64xy","update","calculateInstancePositions64xyLow","instanceSizes","instanceRotations","calculateInstanceRotations","instanceColors","UNSIGNED_BYTE","defaultValue","setState","emptyTexture","context","Uint8Array","width","height","updateState","props","oldProps","changeFlags","state","model","delete","_getModel","invalidateAll","setTexture","setDrawMode","LINE_STRIP","TRIANGLES","draw","uniforms","render","sampler","hasTexture","Boolean","id","geometry","drawMode","isInstanced","shaderCache","attribute","isFP64","use64bitPositions","i","point","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, loadTextures, Texture2D, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nimport assert from 'assert';\n\nconst RADIAN_PER_DEGREE = Math.PI / 180;\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadTextures(gl, Object.assign({urls: [src]}, opts))\n      .then(textures => textures[0])\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src, opts)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(attributes.positions && attributes.normals);\n  if (!attributes.texCoords) {\n    attributes.texCoords = {size: 2, constant: true, value: new Float32Array(2)};\n  }\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data instanceof Geometry) {\n    validateGeometryAttributes(data.attributes);\n    return data;\n  } else if (data.positions) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: null,\n  sizeScale: {type: 'number', value: 1, min: 0},\n  desaturate: {type: 'number', value: 0, min: 0},\n  brightness: {type: 'number', value: 0, min: 0},\n\n  fp64: false,\n  wireframe: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: [1, 1, 1]},\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  getYaw: {type: 'accessor', value: d => d.yaw || 0},\n  getPitch: {type: 'accessor', value: d => d.pitch || 0},\n  getRoll: {type: 'accessor', value: d => d.roll || 0}\n};\n\nexport default class MeshLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xy: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 3,\n        transition: true,\n        accessor: 'getSize'\n      },\n      instanceRotations: {\n        size: 3,\n        transition: true,\n        accessor: ['getYaw', 'getPitch', 'getRoll'],\n        update: this.calculateInstanceRotations\n      },\n      instanceColors: {\n        size: 4,\n        transition: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.fp64 !== oldProps.fp64 || props.mesh !== oldProps.mesh) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (props.wireframe !== oldProps.wireframe) {\n      if (this.state.model) {\n        this.state.model.setDrawMode(props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n      }\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, desaturate, brightness} = this.props;\n    const {model, texture, emptyTexture} = this.state;\n\n    if (model) {\n      model.render(\n        Object.assign({}, uniforms, {\n          sampler: texture || emptyTexture,\n          hasTexture: Boolean(texture),\n          sizeScale,\n          desaturate,\n          brightness\n        })\n      );\n    }\n  }\n\n  _getModel(gl) {\n    if (!this.props.mesh) {\n      return null;\n    }\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(this.props.mesh),\n        drawMode: this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES,\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  setTexture(src) {\n    const {gl} = this.context;\n\n    if (src) {\n      getTexture(gl, src).then(texture => {\n        this.setState({texture});\n      });\n    } else {\n      this.setState({texture: null});\n    }\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  // yaw(z), pitch(y) and roll(x) in radians\n  calculateInstanceRotations(attribute) {\n    const {data, getYaw, getPitch, getRoll} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      value[i++] = getRoll(point) * RADIAN_PER_DEGREE;\n      value[i++] = getPitch(point) * RADIAN_PER_DEGREE;\n      value[i++] = getYaw(point) * RADIAN_PER_DEGREE;\n    }\n  }\n}\n\nMeshLayer.layerName = 'MeshLayer';\nMeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}