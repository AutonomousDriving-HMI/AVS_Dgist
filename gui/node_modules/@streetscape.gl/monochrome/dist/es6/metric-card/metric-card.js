function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Spinner from '../shared/spinner';
import { Tooltip } from '../shared/popover';
import { withTheme } from '../shared/theme';
import { CardContainer, CardTitle, ErrorMessage } from './styled-components';
/**
 * MetricCard places a chart in a container with padding, title,
 * selection marker etc
 */

class MetricCard extends PureComponent {
  render() {
    const _this$props = this.props,
          theme = _this$props.theme,
          style = _this$props.style,
          error = _this$props.error,
          isLoading = _this$props.isLoading,
          className = _this$props.className,
          title = _this$props.title,
          description = _this$props.description;
    const styleProps = {
      theme,
      hasError: Boolean(error),
      isLoading
    };
    return React.createElement(CardContainer, _extends({
      className: className
    }, styleProps, {
      userStyle: style.wrapper
    }), title && React.createElement(CardTitle, _extends({}, styleProps, {
      userStyle: style.title
    }), React.createElement(Tooltip, {
      style: style.tooltip,
      content: description
    }, title)), !isLoading && !error && this.props.children, isLoading && React.createElement(Spinner, {
      style: style.spinner
    }), error && React.createElement(ErrorMessage, _extends({}, styleProps, {
      userStyle: style.error
    }), error));
  }

}

_defineProperty(MetricCard, "propTypes", {
  className: PropTypes.string,
  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  description: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  style: PropTypes.object,
  error: PropTypes.string,
  isLoading: PropTypes.bool,
  children: PropTypes.element
});

_defineProperty(MetricCard, "defaultProps", {
  className: '',
  title: '',
  description: '',
  style: {},
  error: null,
  isLoading: false
});

export default withTheme(MetricCard);
//# sourceMappingURL=metric-card.js.map