{"version":3,"sources":["../../../src/table/tree-table.js"],"names":["TreeTable","props","id","state","expanded","rootId","rows","rootRowIndex","findIndex","row","_cache","clear","_list","recomputeRowHeights","key","index","style","indentSize","renderCell","theme","userStyle","_isRowExpanded","_toggleRowExpansion","columns","Table","propTypes","PropTypes","number","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,S;;;;;AAWJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,6FAMF,UAAAC,EAAE,EAAI;AACrB,aAAO,MAAKC,KAAL,CAAWC,QAAX,CAAoBF,EAApB,CAAP;AACD,KARkB;;AAAA,kGAUG,UAACA,EAAD,EAAKG,MAAL,EAAgB;AAAA,wBACX,MAAKF,KADM;AAAA,UAC7BC,QAD6B,eAC7BA,QAD6B;AAAA,UACnBE,IADmB,eACnBA,IADmB;AAGpCF,MAAAA,QAAQ,CAACF,EAAD,CAAR,GAAe,CAACE,QAAQ,CAACF,EAAD,CAAxB;AAEA,UAAMK,YAAY,GAAGD,IAAI,CAACE,SAAL,CAAe,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACP,EAAJ,KAAWG,MAAf;AAAA,OAAlB,CAArB;;AAEA,YAAKK,MAAL,CAAYC,KAAZ,CAAkBJ,YAAlB;;AACA,YAAKK,KAAL,CAAWC,mBAAX,CAA+BN,YAA/B;AACD,KAnBkB;;AAGjB,UAAKJ,KAAL,CAAWC,QAAX,GAAsB,EAAtB;AAHiB;AAIlB;;;;qCAiB+B;AAAA,UAApBU,GAAoB,QAApBA,GAAoB;AAAA,UAAfC,KAAe,QAAfA,KAAe;AAAA,UAARC,KAAQ,QAARA,KAAQ;AAAA,wBAC4B,KAAKf,KADjC;AAAA,UACvBgB,UADuB,eACvBA,UADuB;AAAA,UACXC,UADW,eACXA,UADW;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACeC,SADf,eACQJ,KADR;AAE9B,UAAMP,GAAG,GAAG,KAAKN,KAAL,CAAWG,IAAX,CAAgBS,KAAhB,CAAZ;AAEA,aACE,6BAAC,qBAAD;AACE,QAAA,GAAG,EAAED,GADP;AAEE,QAAA,EAAE,EAAEL,GAAG,CAACP,EAFV;AAGE,QAAA,KAAK,EAAEa,KAHT;AAIE,QAAA,IAAI,EAAEN,GAJR;AAKE,QAAA,KAAK,EAAEO,KALT;AAME,QAAA,KAAK,EAAEG,KANT;AAOE,QAAA,SAAS,EAAEC,SAPb;AAQE,QAAA,UAAU,EAAEH,UARd;AASE,QAAA,UAAU,EAAEC,UATd;AAUE,QAAA,aAAa,EAAE,KAAKG,cAVtB;AAWE,QAAA,eAAe,EAAE,KAAKC,mBAXxB;AAYE,QAAA,OAAO,EAAE,KAAKnB,KAAL,CAAWoB;AAZtB,QADF;AAgBD;;;;EApDqBC,Y;;gBAAlBxB,S,iCAECwB,aAAMC,S;AACTR,EAAAA,UAAU,EAAES,mBAAUC;;;gBAHpB3B,S,oCAOCwB,aAAMI,Y;AACTX,EAAAA,UAAU,EAAE;;;eA+CD,sBAAUjB,SAAV,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withTheme} from '../shared/theme';\n\nimport {Table} from './table';\nimport TreeTableRow from './tree-table-row';\n\nclass TreeTable extends Table {\n  static propTypes = {\n    ...Table.propTypes,\n    indentSize: PropTypes.number\n  };\n\n  static defaultProps = {\n    ...Table.defaultProps,\n    indentSize: 12\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state.expanded = {};\n  }\n\n  _isRowExpanded = id => {\n    return this.state.expanded[id];\n  };\n\n  _toggleRowExpansion = (id, rootId) => {\n    const {expanded, rows} = this.state;\n\n    expanded[id] = !expanded[id];\n\n    const rootRowIndex = rows.findIndex(row => row.id === rootId);\n\n    this._cache.clear(rootRowIndex);\n    this._list.recomputeRowHeights(rootRowIndex);\n  };\n\n  _renderRow({key, index, style}) {\n    const {indentSize, renderCell, theme, style: userStyle} = this.props;\n    const row = this.state.rows[index];\n\n    return (\n      <TreeTableRow\n        key={key}\n        id={row.id}\n        index={index}\n        data={row}\n        style={style}\n        theme={theme}\n        userStyle={userStyle}\n        indentSize={indentSize}\n        renderCell={renderCell}\n        getIsExpanded={this._isRowExpanded}\n        toggleExpansion={this._toggleRowExpansion}\n        columns={this.state.columns}\n      />\n    );\n  }\n}\n\nexport default withTheme(TreeTable);\n"],"file":"tree-table.js"}