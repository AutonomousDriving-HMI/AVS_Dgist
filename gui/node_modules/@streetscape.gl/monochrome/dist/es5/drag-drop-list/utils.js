"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overlap = overlap;
exports.offsetRect = offsetRect;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Calculate the overlap between two DOMRects.
// Returns a number in square pixels
function overlap(rect1, rect2) {
  var overlapX = Math.min(rect1.right - rect2.left, rect2.right - rect1.left);
  var overlapY = Math.min(rect1.bottom - rect2.top, rect2.bottom - rect1.top);

  if (overlapX < 0 || overlapY < 0) {
    return 0;
  }

  return overlapX * overlapY;
}

function offsetRect(rect, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ref2$ = _ref2[0],
      dx = _ref2$ === void 0 ? 0 : _ref2$,
      _ref2$2 = _ref2[1],
      dy = _ref2$2 === void 0 ? 0 : _ref2$2;

  return {
    left: rect.left + dx,
    top: rect.top + dy,
    right: rect.right + dx,
    bottom: rect.bottom + dy,
    width: rect.width,
    height: rect.height
  };
}
//# sourceMappingURL=utils.js.map