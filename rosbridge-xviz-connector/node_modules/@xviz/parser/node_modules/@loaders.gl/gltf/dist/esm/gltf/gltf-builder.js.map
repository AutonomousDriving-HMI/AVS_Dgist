{"version":3,"sources":["../../../src/gltf/gltf-builder.js"],"names":["GLBBuilder","packBinaryJson","assert","getImageSize","UBER_MESH_EXTENSION","UBER_POINT_CLOUD_EXTENSION","GLTFBuilder","options","DracoEncoder","DracoDecoder","Object","assign","json","meshes","key","data","packOptions","jsonData","nopack","packedJson","extras","extensionName","extensions","registerUsedExtension","addExtension","registerRequiredExtension","extensionsUsed","find","ext","push","extensionsRequired","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","length","accessorIndices","Error","dracoEncoder","compressedData","encodeMesh","dracoDecoder","decodedData","decodeMesh","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","bufferView","encodePointCloud","imageData","sizeAndType","mimeType","width","height","images"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport GLBBuilder from '../glb/glb-builder';\nimport packBinaryJson from '../packed-json/pack-binary-json';\nimport {\n  assert,\n  getImageSize\n} from '@loaders.gl/core';\n\n// Ideally we should just use KHR_draco_mesh_compression, but it requires saving uncompressed data?\n// TODO: until the ideal, we need to export these\nconst UBER_MESH_EXTENSION = 'UBER_draco_mesh_compression';\nconst UBER_POINT_CLOUD_EXTENSION = 'UBER_draco_point_cloud_compression';\n\nexport default class GLTFBuilder extends GLBBuilder {\n  constructor(options = {}) {\n    super(options);\n\n    // Soft dependency on DRACO, app needs to import and supply these\n    this.DracoEncoder = options.DracoEncoder;\n    this.DracoDecoder = options.DracoDecoder;\n\n    Object.assign(this.json, {\n      meshes: []\n    });\n  }\n\n  // TODO - support encoding to non-GLB versions of glTF format\n\n  // Encode as a textual JSON file with binary data in base64 data URLs.\n  // encodeAsDataURLs(options) {\n  //   throw new Error('Not yet implemented');\n  // }\n\n  // Encode as a JSON with all images (and buffers?) in separate binary files\n  // encodeAsSeparateFiles(options) {\n  //   throw new Error('Not yet imlemented');\n  // }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.nopack ? data : packBinaryJson(data, this, packOptions);\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtraData(key, data, packOptions = {}) {\n    const packedJson = !packOptions.nopack && packBinaryJson(data, this, packOptions);\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = packedJson;\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = !packOptions.nopack && packBinaryJson(data, this, packOptions);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = packedJson;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addRequiredExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = !packOptions.nopack && packBinaryJson(data, this, packOptions);\n    this.addExtension(extensionName, packedJson);\n    this.registerRequiredExtension(extensionName);\n    return this;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // POINTS:  0x0000,\n  // LINES: 0x0001,\n  // LINE_LOOP: 0x0002,\n  // LINE_STRIP:  0x0003,\n  // TRIANGLES: 0x0004,\n  // TRIANGLE_STRIP:  0x0005,\n  // TRIANGLE_FAN:  0x0006,\n\n  addMesh(attributes, indices, mode = 4) {\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/\n  //   KHR_draco_mesh_compression\n  // NOTE: in contrast to glTF spec, does not add fallback data\n  addCompressedMesh(attributes, indices, mode = 4) {\n    if (!this.DracoEncoder || !this.DracoDecoder) {\n      throw new Error('DracoEncoder/Decoder not available');\n    }\n\n    const dracoEncoder = new this.DracoEncoder();\n    const compressedData = dracoEncoder.encodeMesh(attributes);\n\n    // Draco compression may change the order and number of vertices in a mesh.\n    // To satisfy the requirement that accessors properties be correct for both\n    // compressed and uncompressed data, generators should create uncompressed\n    // attributes and indices using data that has been decompressed from the Draco buffer,\n    // rather than the original source data.\n    const dracoDecoder = new this.DracoDecoder();\n    const decodedData = dracoDecoder.decodeMesh(attributes);\n    const fauxAccessors = this._addFauxAttributes(decodedData.attributes);\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: fauxAccessors,\n          mode, // GL.POINTS\n          extensions: {\n            [UBER_MESH_EXTENSION]: {\n              bufferView: bufferViewIndex\n            }\n          }\n        }\n      ]\n    };\n\n    this.registerRequiredExtension(UBER_MESH_EXTENSION);\n\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addCompressedPointCloud(attributes) {\n    if (!this.DracoEncoder || !this.DracoDecoder) {\n      throw new Error('DracoEncoder/Decoder not available');\n    }\n\n    const dracoEncoder = new this.DracoEncoder();\n    const compressedData = dracoEncoder.encodePointCloud(attributes);\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: {}, // This will be populated after decompression\n          mode: 0, // GL.POINTS\n          extensions: {\n            [UBER_POINT_CLOUD_EXTENSION]: {\n              bufferView: bufferViewIndex\n            }\n          }\n        }\n      ]\n    };\n\n    this.registerRequiredExtension(UBER_POINT_CLOUD_EXTENSION);\n\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData) {\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    // Get the properties of the image to add as metadata.\n    const sizeAndType = getImageSize(imageData) || {};\n    if (sizeAndType) {\n      // width and height are non-spec fields\n      const {mimeType, width, height} = sizeAndType;\n      this.json.images.push({\n        bufferView: bufferViewIndex,\n        mimeType,\n        width,\n        height\n      });\n    } else {\n      // TODO: Spec violation, if we are using a bufferView, mimeType must be defined\n      //       https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n      //       \"a reference to a bufferView; in that case mimeType must be defined.\"\n      this.json.images.push({\n        bufferView: bufferViewIndex\n      });\n    }\n\n    return this.json.images.length - 1;\n  }\n}\n"],"file":"gltf-builder.js"}