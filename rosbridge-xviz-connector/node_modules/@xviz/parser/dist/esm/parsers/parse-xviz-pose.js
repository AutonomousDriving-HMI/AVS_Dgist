function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
export function parseXVIZPose(pose) {
  var mapOrigin = pose.mapOrigin,
      position = pose.position,
      orientation = pose.orientation,
      timestamp = pose.timestamp;
  var result = {
    timestamp: timestamp
  };

  if (mapOrigin) {
    var longitude = mapOrigin.longitude,
        latitude = mapOrigin.latitude,
        altitude = mapOrigin.altitude;
    Object.assign(result, {
      longitude: longitude,
      latitude: latitude,
      altitude: altitude
    });
  }

  if (position) {
    var _position = _slicedToArray(position, 3),
        x = _position[0],
        y = _position[1],
        z = _position[2];

    Object.assign(result, {
      x: x,
      y: y,
      z: z
    });
  }

  if (orientation) {
    var _orientation = _slicedToArray(orientation, 3),
        roll = _orientation[0],
        pitch = _orientation[1],
        yaw = _orientation[2];

    Object.assign(result, {
      roll: roll,
      pitch: pitch,
      yaw: yaw
    });
  }

  return _objectSpread({}, pose, result);
}
//# sourceMappingURL=parse-xviz-pose.js.map