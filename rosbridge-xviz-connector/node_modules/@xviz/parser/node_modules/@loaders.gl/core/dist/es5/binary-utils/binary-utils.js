"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArrayBuffer = toArrayBuffer;
exports.blobToArrayBuffer = blobToArrayBuffer;
exports.toBuffer = toBuffer;
exports.toDataView = toDataView;
exports.isBuffer = exports.isBlob = exports.isArrayBuffer = void 0;

var _assert = _interopRequireDefault(require("../utils/assert"));

var _textEncoding = require("./text-encoding");

/* global FileReader, Blob, ArrayBuffer, Buffer */
var isArrayBuffer = function isArrayBuffer(x) {
  return x && x instanceof ArrayBuffer;
};

exports.isArrayBuffer = isArrayBuffer;

var isBlob = function isBlob(x) {
  return x && typeof Blob !== 'undefined' && x instanceof Blob;
};

exports.isBlob = isBlob;

var isBuffer = function isBuffer(x) {
  return x && x instanceof Buffer;
};

exports.isBuffer = isBuffer;

function toArrayBuffer(data) {
  if (isArrayBuffer(data)) {
    return data;
  } // TODO - per docs we should just be able to call buffer.buffer, but there are issues


  if (isBuffer(data)) {
    var typedArray = new Uint8Array(data);
    return typedArray.buffer;
  } // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)


  if (ArrayBuffer.isView(data)) {
    return data.buffer;
  }

  if (typeof data === 'string') {
    var text = data;
    var uint8Array = new _textEncoding.TextEncoder().encode(text);
    return uint8Array.buffer;
  }

  return (0, _assert.default)(false);
}

function blobToArrayBuffer(blob) {
  return new Promise(function (resolve, reject) {
    var arrayBuffer;
    var fileReader = new FileReader();

    fileReader.onload = function (event) {
      arrayBuffer = event.target.result;
    };

    fileReader.onloadend = function (event) {
      return resolve(arrayBuffer);
    };

    fileReader.onerror = reject;
    fileReader.readAsArrayBuffer(blob);
  });
} // Convert (copy) ArrayBuffer to Buffer


function toBuffer(binaryData) {
  if (ArrayBuffer.isView(binaryData)) {
    binaryData = binaryData.buffer;
  }

  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {
    /* global Buffer */
    var buffer = new Buffer(binaryData.byteLength);
    var view = new Uint8Array(binaryData);

    for (var i = 0; i < buffer.length; ++i) {
      buffer[i] = view[i];
    }

    return buffer;
  }

  return (0, _assert.default)(false);
}

function toDataView(buffer) {
  return new DataView(toArrayBuffer(buffer));
} // Helper functions
//# sourceMappingURL=binary-utils.js.map