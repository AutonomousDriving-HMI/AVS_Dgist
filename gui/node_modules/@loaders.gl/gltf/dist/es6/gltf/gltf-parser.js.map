{"version":3,"sources":["../../../src/gltf/gltf-parser.js"],"names":["getBytesFromComponentType","getSizeFromAccessorType","GLBParser","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_OPTIONS","createImages","GLTFParser","constructor","options","log","console","out","Object","assign","DracoDecoder","parse","gltf","optionsParam","ArrayBuffer","glbParser","json","_loadLinkedAssets","_resolveToTree","getApplicationData","key","data","getExtraData","extras","getExtension","extensionName","extensions","getRequiredExtensions","extensionsRequired","getUsedExtensions","extensionsUsed","unpackMesh","mesh","primitives","map","unpackPrimitive","bind","primitive","compressedMesh","UBER_draco_mesh_compression","compressedPointCloud","UBER_draco_point_cloud_compression","unpackedPrimitive","mode","material","dracoDecoder","decodedData","decodeMesh","destroy","indices","attributes","decodePointCloud","getScene","index","_get","getNode","getSkin","getMesh","getDecompressedMesh","Error","_decompressUberDracoPointCloud","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","warn","_postProcessGLTF","images","image","parseImage","filter","Boolean","scenes","scene","parseScene","undefined","bufferViews","forEach","bufView","i","_resolveBufferView","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","_resolveMaterial","meshes","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","_resolveScene","id","children","child","camera","inverseBindMatrices","attribute","normalTexture","occlusionTexture","emissiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","components","bytesPerElement","source","parameters","glEnum","_enumSamplerParameter","getImageAsync","buffer","bufferViewIndex","compressedData","decodedPrimitive","decode","header","drawMode","_resolveCamera","perspective","orthographic"],"mappings":"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","sourcesContent":["import {getBytesFromComponentType, getSizeFromAccessorType} from '../utils/gltf-type-utils';\nimport GLBParser from '../glb/glb-parser';\n\nconst GL_SAMPLER = {\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\nconst DEFAULT_OPTIONS = {\n  createImages: false\n};\n\nexport default class GLTFParser {\n  constructor(options = {}) {\n    // TODO - move parsing to parse\n    this.log = console; // eslint-disable-line\n    this.out = {};\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // Soft dependency on Draco, needs to be imported and supplied by app\n    this.DracoDecoder = this.options.DracoDecoder || null;\n  }\n\n  parse(gltf, optionsParam = {}) {\n\n    const options = Object.assign({}, this.options, optionsParam);\n\n    // GLTF can be JSON or binary (GLB)\n    if (gltf instanceof ArrayBuffer) {\n      this.glbParser = new GLBParser();\n      this.gltf = this.glbParser.parse(gltf).json;\n      this.json = this.gltf;\n    } else {\n      this.glbParser = null;\n      this.gltf = gltf;\n      this.json = gltf;\n    }\n\n    this._loadLinkedAssets(options); // TODO - not implemented\n    // this._postProcessGLTF(options); TODO - remove done differently now\n    this._resolveToTree(options);\n\n    return this.gltf;\n  }\n\n  // Accessors\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    // TODO - Data is already unpacked by GLBParser\n    return this.json.extensions[extensionName];\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired;\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed;\n  }\n\n  // DATA UNPACKING\n\n  // Unpacks all the primitives in a mesh\n  unpackMesh(mesh) {\n    return mesh.primitives.map(this.unpackPrimitive.bind(this));\n  }\n\n  // Unpacks one mesh primitive\n  unpackPrimitive(primitive) {\n    const compressedMesh =\n      primitive.extensions && primitive.extensions.UBER_draco_mesh_compression;\n    const compressedPointCloud =\n      primitive.extensions && primitive.extensions.UBER_draco_point_cloud_compression;\n\n    const unpackedPrimitive = {\n      mode: primitive.mode,\n      material: primitive.material\n    };\n\n    if (compressedMesh) {\n      const dracoDecoder = new this.DracoDecoder();\n      const decodedData = dracoDecoder.decodeMesh(compressedMesh);\n      dracoDecoder.destroy();\n\n      Object.assign(unpackedPrimitive, {\n        indices: decodedData.indices,\n        attributes: decodedData.attributes\n      });\n\n    } else if (compressedPointCloud) {\n      const dracoDecoder = new this.DracoDecoder();\n      const decodedData = dracoDecoder.decodePointCloud(compressedPointCloud);\n      dracoDecoder.destroy();\n\n      Object.assign(unpackedPrimitive, {\n        mode: 0,\n        attributes: decodedData.attributes\n      });\n    } else {\n      // No compression - just a glTF mesh primitive\n      // TODO - Resolve all accessors\n    }\n  }\n\n  // PRIVATE\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getDecompressedMesh(index) {\n    if (!this.DracoDecoder) {\n      throw new Error('DracoDecoder not available');\n    }\n\n    const mesh = this._get('meshes', index);\n\n    for (const primitive of mesh.primitives) {\n      // TODO: DracoMesh extension\n\n      const extensions = primitive.extensions;\n      if ('UBER_draco_point_cloud_compression' in extensions) {\n        this._decompressUberDracoPointCloud(primitive, extensions);\n      }\n    }\n\n    return mesh;\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  // Start loading linked assets\n  _loadLinkedAssets(options) {\n    // TODO: Not implemented\n    // TODO: Return a promise?\n  }\n\n  _postProcessGLTF(options = {}) {\n    // Create all images (if requested)\n    this.out.images = (this.gltf.images || [])\n      .map(image => this.parseImage(image, options))\n      .filter(Boolean);\n\n    // Normalize all scenes\n    this.out.scenes = (this.gltf.scenes || [])\n      .map(scene => this.parseScene(scene, options))\n      .filter(Boolean);\n\n    if (this.gltf.scene !== undefined) {\n      this.out.scene = this.gltf.scenes[this.gltf.scene];\n    }\n\n    return this;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // PREPARATION STEP: CROSS-LINK INDEX RESOLUTION, ENUM LOOKUP, CONVENIENCE CALCULATIONS\n  /* eslint-disable complexity */\n  _resolveToTree(options = {}) {\n    const {gltf} = this;\n\n    (gltf.bufferViews || []).forEach((bufView, i) => this._resolveBufferView(bufView, i));\n\n    (gltf.images || []).forEach((image, i) => this._resolveImage(image, i, options));\n    (gltf.samplers || []).forEach((sampler, i) => this._resolveSampler(sampler, i));\n    (gltf.textures || []).forEach((texture, i) => this._resolveTexture(texture, i));\n\n    (gltf.accessors || []).forEach((accessor, i) => this._resolveAccessor(accessor, i));\n    (gltf.materials || []).forEach((material, i) => this._resolveMaterial(material, i));\n    (gltf.meshes || []).forEach((mesh, i) => this._resolveMesh(mesh, i));\n\n    (gltf.nodes || []).forEach((node, i) => this._resolveNode(node, i));\n\n    (gltf.skins || []).forEach((skin, i) => this._resolveSkin(skin, i));\n\n    (gltf.scenes || []).forEach((scene, i) => this._resolveScene(scene, i));\n\n    if (gltf.scene !== undefined) {\n      gltf.scene = gltf.scenes[this.gltf.scene];\n    }\n\n    return gltf;\n  }\n  /* eslint-enable complexity */\n\n  _resolveScene(scene, index) {\n    scene.id = `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n  }\n\n  _resolveNode(node, index) {\n    node.id = `node-${index}`;\n    node.children = (node.children || []).map(child => this.getNode(child));\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n  }\n\n  _resolveSkin(skin, index) {\n    skin.id = `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh.id = `mesh-${index}`;\n    for (const primitive of mesh.primitives) {\n      for (const attribute in primitive.attributes) {\n        primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n      }\n      if (primitive.indices !== undefined) {\n        primitive.indices = this.getAccessor(primitive.indices);\n      }\n      if (primitive.material !== undefined) {\n        primitive.material = this.getMaterial(primitive.material);\n      }\n    }\n  }\n\n  _resolveMaterial(material, index) {\n    material.id = `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor.id = `accessor-${index}`;\n    accessor.bufferView = this.getBufferView(accessor.bufferView);\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor);\n    accessor.components = getSizeFromAccessorType(accessor);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n  }\n\n  _resolveTexture(texture, index) {\n    texture.id = `texture-${index}`;\n    texture.sampler = this.getSampler(texture.sampler);\n    texture.source = this.getImage(texture.source);\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler.id = `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index, options) {\n    image.id = `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n    // TODO - Image creation could be done on getImage instead of during load\n    const {createImages = true} = options;\n    if (createImages) {\n      image.image = this.glbParser.getImage(image);\n    } else {\n      image.getImageAsync = () => this.glbParser.getImageAsync(image);\n    }\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView.id = `bufferView-${index}`;\n    bufferView.buffer = this.getBuffer(bufferView.buffer);\n\n    if (this.glbParser) {\n      bufferView.data = this.glbParser.getBufferView(bufferView);\n    }\n  }\n\n  _decompressUberDracoPointCloud(primitive, extensions) {\n    const bufferViewIndex = extensions.UBER_draco_point_cloud_compression.bufferView;\n    const bufferView = this.getBufferView(bufferViewIndex);\n\n    // TODO: change to getArrayFromBufferView()\n    const compressedData = this.glbParser.getBufferView(bufferView);\n\n    const dracoDecoder = new this.DracoDecoder();\n    const decodedPrimitive = dracoDecoder.decode(compressedData);\n\n    // TODO: what to do about original attributes\n    primitive.attributes = decodedPrimitive.attributes;\n    // TODO: stashing header on primitive, not sure if necessary\n    primitive.header = decodedPrimitive.header;\n\n    // TODO: drawmode is currently undefined, look into dracodecoder to set to 0 for point cloud\n    primitive.drawMode = decodedPrimitive.drawMode || 0;\n  }\n\n  // PREPROC\n\n  _resolveCamera(camera) {\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n  }\n\n}\n"],"file":"gltf-parser.js"}