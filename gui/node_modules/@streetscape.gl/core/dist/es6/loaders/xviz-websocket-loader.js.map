{"version":3,"sources":["../../../src/loaders/xviz-websocket-loader.js"],"names":["assert","XVIZStreamBuffer","StreamSynchronizer","parseStreamMessage","LOG_STREAM_MESSAGE","PromiseRetry","XVIZLoaderInterface","XVIZController","XVIZWebsocketLoader","constructor","options","xvizHandler","socket","_debug","requestParams","_onOpen","message","type","METADATA","get","set","streamBuffer","_setMetadata","emit","TIMESLICE","oldVersion","valueOf","insert","bufferUpdated","getStreams","_onXVIZTimeslice","DONE","error","event","retrySettings","retries","minTimeout","randomize","WebSocketClass","WebSocket","isOpen","seek","timestamp","connect","url","retry","Promise","resolve","reject","ws","binaryType","onmessage","hasMetadata","Boolean","getMetadata","data","onResult","_onWSMessage","onError","_onWSError","debug","bind","worker","maxConcurrency","onerror","onclose","_onWSClose","onopen","_onWSOpen","err","catch","isAbnormalClosure","code","close","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global WebSocket,ArrayBuffer */\n/* eslint-disable camelcase */\nimport assert from 'assert';\nimport {\n  XVIZStreamBuffer,\n  StreamSynchronizer,\n  parseStreamMessage,\n  LOG_STREAM_MESSAGE\n} from '@xviz/parser';\nimport PromiseRetry from 'promise-retry';\n\nimport XVIZLoaderInterface from './xviz-loader-interface';\nimport XVIZController from './xviz-controller-v2';\n\n/**\n * Connect to XVIZ 2 websocket manage storage of XVIZ data into a XVIZStreamBuffer\n *\n * This class is a Websocket base class and is expected to be subclassed with\n * the following methods overridden:\n *\n * - _onOpen()\n * - _onXVIZTimeslice()\n */\nexport default class XVIZWebsocketLoader extends XVIZLoaderInterface {\n  /**\n   * constructor\n   * @params serverConfig {object}\n   *   - serverConfig.serverUrl {string}\n   *   - serverConfig.defaultLogLength {number, optional} - default 30\n   *   - serverConfig.queryParams {object, optional}\n   *   - serverConfig.retryAttempts {number, optional} - default 3\n   * @params worker {string|function, optional}\n   * @params maxConcurrency {number, optional} - default 3\n   * @params logGuid {string}\n   * @params logProfile {string, optional}\n   * @params duration {number, optional}\n   * @params timestamp {number, optional}\n   * @params bufferLength {number, optional}\n   */\n  constructor(options = {}) {\n    super(options);\n\n    this.socket = null;\n\n    this.retrySettings = {\n      retries: 3,\n      minTimeout: 500,\n      randomize: true\n    };\n\n    this.streamBuffer = new XVIZStreamBuffer();\n\n    // Handler object for the websocket events\n    // Note: needs to be last due to member dependencies\n    this.WebSocketClass = options.WebSocketClass || WebSocket;\n  }\n\n  isOpen() {\n    return this.socket; // && this.socket.readyState === WEB_SOCKET_OPEN_STATE;\n  }\n\n  seek(timestamp) {\n    super.seek(timestamp);\n  }\n\n  /**\n   * Open an XVIZ socket connection with automatic retry\n   *\n   * @returns {Promise} WebSocket connection\n   */\n  connect() {\n    assert(this.socket === null, 'Socket Manager still connected');\n\n    this._debug('stream_start');\n    const {url} = this.requestParams;\n\n    // Wrap retry logic around connection\n    return PromiseRetry(retry => {\n      return new Promise((resolve, reject) => {\n        try {\n          const ws = new this.WebSocketClass(url);\n          ws.binaryType = 'arraybuffer';\n\n          ws.onmessage = message => {\n            const hasMetadata = Boolean(this.getMetadata());\n\n            return parseStreamMessage({\n              message: message.data,\n              onResult: this._onWSMessage,\n              onError: this._onWSError,\n              debug: this._debug.bind('parse_message'),\n              worker: hasMetadata && this.options.worker,\n              maxConcurrency: this.options.maxConcurrency\n            });\n          };\n\n          ws.onerror = this._onWSError;\n          ws.onclose = event => {\n            this._onWSClose(event);\n            reject(event);\n          };\n\n          // On success, resolve the promise with the now ready socket\n          ws.onopen = () => {\n            this.socket = ws;\n            this._onWSOpen();\n            resolve(ws);\n          };\n        } catch (err) {\n          reject(err);\n        }\n      }).catch(event => {\n        this._onWSError(event);\n        const isAbnormalClosure = event.code > 1000 && event.code !== 1005;\n\n        // Retry if abnormal or connection never established\n        if (isAbnormalClosure || !this.socket) {\n          retry();\n        }\n      });\n    }, this.retrySettings).catch(this._onWSError);\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n\n  // Subclasses *MUST* implement these methods\n  _onOpen() {\n    throw new Error('_onOpen() method must be overridden');\n  }\n\n  /**\n   * Subclass hook for xviz message\n   *\n   * The messages will be inserted into the 'streamBuffer'\n   * prior to this hook being called.\n   *\n   * @params message {Object} Parsed XVIZ message\n   * @params bufferUpdated {Boolean} True if streamBuffer has changed\n   */\n  _onXVIZTimeslice(message, bufferUpdated) {}\n\n  // PRIVATE Methods\n\n  // Notifications and metric reporting\n  _onWSOpen = () => {\n    // Request data if we are restarting, otherwise wait for metadata\n    // TODO - protocol negotiation\n    this.xvizHandler = new XVIZController(this.socket);\n\n    this._debug('socket_open', this.requestParams);\n    this._onOpen();\n  };\n\n  // Handle dispatching events, triggering probes, and delegating to the XVIZ handler\n  /* eslint-disable complexity */\n  _onWSMessage = message => {\n    switch (message.type) {\n      case LOG_STREAM_MESSAGE.METADATA:\n        if (this.get('metadata')) {\n          // already has metadata\n          return;\n        }\n\n        this.set('logSynchronizer', new StreamSynchronizer(this.streamBuffer));\n        this._setMetadata(message);\n        this.emit('ready', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.TIMESLICE:\n        const oldVersion = this.streamBuffer.valueOf();\n        this.streamBuffer.insert(message);\n\n        const bufferUpdated = this.streamBuffer.valueOf() !== oldVersion;\n        if (bufferUpdated) {\n          this.set('streams', this.streamBuffer.getStreams());\n        }\n\n        this._onXVIZTimeslice(message, bufferUpdated);\n\n        this.emit('update', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.DONE:\n        this.emit('finish', message);\n        break;\n\n      default:\n        this.emit('error', message);\n    }\n  };\n  /* eslint-enable complexity */\n\n  _onWSError = error => {\n    this.emit('error', error);\n  };\n\n  _onWSClose = event => {\n    // Only called on connection closure, which would be an error case\n    this._debug('socket_closed', event);\n  };\n}\n"],"file":"xviz-websocket-loader.js"}