{"version":3,"sources":["../../../src/parse-file/parse-with-loader.js"],"names":["parseWithLoader","data","loader","options","url","addDefaultParserOptions","normalizeLegacyLoaderObject","worker","parseTextSync","dataType","promisify","parseSync","parse","promise","parseWithLoaderSync","parserFunc","Promise","resolve","reject","result","error","console","Error","name","Object","assign","DEFAULT_OPTIONS","log","NullLog","parseBinary","parseText"],"mappings":"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","sourcesContent":["import parseWithWorker from '../worker-utils/parse-with-worker';\nimport NullLog from '../log-utils/null-log';\n\n// TODO: support progress and abort\n// TODO: support moving loading to worker\nexport function parseWithLoader(data, loader, options = {}, url) {\n  // Normalize options\n  options = addDefaultParserOptions(options, loader);\n\n  // v0.5 support\n  normalizeLegacyLoaderObject(loader);\n\n  if (loader.worker) {\n    return parseWithWorker(loader.worker, data, options);\n  }\n\n  // First check for synchronous text parser, wrap results in promises\n  if (loader.parseTextSync && typeof data === 'string') {\n    options.dataType = 'text';\n    return promisify(loader.parseTextSync, loader, url, data, options);\n  }\n\n  // Now check for synchronous binary data parser, wrap results in promises\n  if (loader.parseSync) {\n    return promisify(loader.parseSync, loader, url, data, options);\n  }\n\n  // Check for asynchronous parser\n  if (loader.parse) {\n    const promise = loader.parse(data, options);\n    // NOTE: keep return on separate statement to facilitate breakpoints here when debugging\n    return promise;\n  }\n\n  // TBD - If asynchronous parser not available, return null\n  // => This loader does not work on loaded data and only supports `loadAndParseAsync`\n  return null;\n}\n\nexport function parseWithLoaderSync(data, loader, options = {}, url) {\n  // Normalize options\n  options = addDefaultParserOptions(options, loader);\n\n  // v0.5 support\n  normalizeLegacyLoaderObject(loader);\n\n  // First check for synchronous parsers\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options);\n  }\n  if (loader.parseSync) {\n    return loader.parseSync(data, options);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  return null;\n}\n\n// Helper function to wrap parser result/error in promise\nfunction promisify(parserFunc, loader, url, data, options) {\n  return new Promise((resolve, reject) => {\n    try {\n      const result = resolve(parserFunc(data, options));\n      // NOTE: return on separate statement to facilitate breakpoint setting here when debugging\n      resolve(result);\n    } catch (error) {\n      console.error(error); // eslint-disable-line\n      reject(new Error(`Could not parse ${url || 'data'} using ${loader.name} loader`));\n    }\n  });\n}\n\nfunction addDefaultParserOptions(options, loader) {\n  // TODO - explain why this optionb is needed for parsing\n  options = Object.assign({}, loader.DEFAULT_OPTIONS, options, {dataType: 'arraybuffer'});\n\n  // LOGGING\n\n  // options.log can be set to `null` to defeat logging\n  if (options.log === null) {\n    options.log = new NullLog();\n  }\n  // log defaults to console\n  if (!('log' in options)) {\n    /* global console */\n    options.log = console;\n  }\n\n  return options;\n}\n\n// Converts v0.5 loader object to v1.0\n// TODO - update all loaders and remove this function\nfunction normalizeLegacyLoaderObject(loader) {\n  if (loader.parseBinary) {\n    loader.parseSync = loader.parseBinary;\n    // delete loader.parseBinary;\n  }\n\n  if (loader.parseText) {\n    loader.parseTextSync = loader.parseText;\n    // delete loader.parseText;\n  }\n}\n"],"file":"parse-with-loader.js"}