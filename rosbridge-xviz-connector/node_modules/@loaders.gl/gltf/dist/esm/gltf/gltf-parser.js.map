{"version":3,"sources":["../../../src/gltf/gltf-parser.js"],"names":["getBytesFromComponentType","getSizeFromAccessorType","GLBParser","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_OPTIONS","createImages","GLTFParser","options","log","console","out","Object","assign","DracoDecoder","gltf","optionsParam","ArrayBuffer","glbParser","parse","json","_loadLinkedAssets","_resolveToTree","key","data","extras","extensionName","extensions","extensionsRequired","extensionsUsed","mesh","primitives","map","unpackPrimitive","bind","primitive","compressedMesh","UBER_draco_mesh_compression","compressedPointCloud","UBER_draco_point_cloud_compression","unpackedPrimitive","mode","material","dracoDecoder","decodedData","decodeMesh","destroy","indices","attributes","decodePointCloud","index","_get","Error","_decompressUberDracoPointCloud","array","object","warn","images","image","parseImage","filter","Boolean","scenes","scene","parseScene","undefined","bufferViews","forEach","bufView","i","_resolveBufferView","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","_resolveMaterial","meshes","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","_resolveScene","id","getNode","children","child","getMesh","camera","getCamera","getSkin","inverseBindMatrices","getAccessor","attribute","getMaterial","normalTexture","getTexture","occlusionTexture","emissiveTexture","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","getBufferView","bytesPerComponent","components","bytesPerElement","getSampler","source","getImage","parameters","glEnum","_enumSamplerParameter","getImageAsync","buffer","getBuffer","bufferViewIndex","compressedData","decodedPrimitive","decode","header","drawMode","perspective","orthographic"],"mappings":"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","sourcesContent":["import {getBytesFromComponentType, getSizeFromAccessorType} from '../utils/gltf-type-utils';\nimport GLBParser from '../glb/glb-parser';\n\nconst GL_SAMPLER = {\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\nconst DEFAULT_OPTIONS = {\n  createImages: false\n};\n\nexport default class GLTFParser {\n  constructor(options = {}) {\n    // TODO - move parsing to parse\n    this.log = console; // eslint-disable-line\n    this.out = {};\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // Soft dependency on Draco, needs to be imported and supplied by app\n    this.DracoDecoder = this.options.DracoDecoder || null;\n  }\n\n  parse(gltf, optionsParam = {}) {\n\n    const options = Object.assign({}, this.options, optionsParam);\n\n    // GLTF can be JSON or binary (GLB)\n    if (gltf instanceof ArrayBuffer) {\n      this.glbParser = new GLBParser();\n      this.gltf = this.glbParser.parse(gltf).json;\n      this.json = this.gltf;\n    } else {\n      this.glbParser = null;\n      this.gltf = gltf;\n      this.json = gltf;\n    }\n\n    this._loadLinkedAssets(options); // TODO - not implemented\n    // this._postProcessGLTF(options); TODO - remove done differently now\n    this._resolveToTree(options);\n\n    return this.gltf;\n  }\n\n  // Accessors\n\n  getApplicationData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    // TODO - Data is already unpacked by GLBParser\n    return this.json.extensions[extensionName];\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired;\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed;\n  }\n\n  // DATA UNPACKING\n\n  // Unpacks all the primitives in a mesh\n  unpackMesh(mesh) {\n    return mesh.primitives.map(this.unpackPrimitive.bind(this));\n  }\n\n  // Unpacks one mesh primitive\n  unpackPrimitive(primitive) {\n    const compressedMesh =\n      primitive.extensions && primitive.extensions.UBER_draco_mesh_compression;\n    const compressedPointCloud =\n      primitive.extensions && primitive.extensions.UBER_draco_point_cloud_compression;\n\n    const unpackedPrimitive = {\n      mode: primitive.mode,\n      material: primitive.material\n    };\n\n    if (compressedMesh) {\n      const dracoDecoder = new this.DracoDecoder();\n      const decodedData = dracoDecoder.decodeMesh(compressedMesh);\n      dracoDecoder.destroy();\n\n      Object.assign(unpackedPrimitive, {\n        indices: decodedData.indices,\n        attributes: decodedData.attributes\n      });\n\n    } else if (compressedPointCloud) {\n      const dracoDecoder = new this.DracoDecoder();\n      const decodedData = dracoDecoder.decodePointCloud(compressedPointCloud);\n      dracoDecoder.destroy();\n\n      Object.assign(unpackedPrimitive, {\n        mode: 0,\n        attributes: decodedData.attributes\n      });\n    } else {\n      // No compression - just a glTF mesh primitive\n      // TODO - Resolve all accessors\n    }\n  }\n\n  // PRIVATE\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getDecompressedMesh(index) {\n    if (!this.DracoDecoder) {\n      throw new Error('DracoDecoder not available');\n    }\n\n    const mesh = this._get('meshes', index);\n\n    for (const primitive of mesh.primitives) {\n      // TODO: DracoMesh extension\n\n      const extensions = primitive.extensions;\n      if ('UBER_draco_point_cloud_compression' in extensions) {\n        this._decompressUberDracoPointCloud(primitive, extensions);\n      }\n    }\n\n    return mesh;\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  // Start loading linked assets\n  _loadLinkedAssets(options) {\n    // TODO: Not implemented\n    // TODO: Return a promise?\n  }\n\n  _postProcessGLTF(options = {}) {\n    // Create all images (if requested)\n    this.out.images = (this.gltf.images || [])\n      .map(image => this.parseImage(image, options))\n      .filter(Boolean);\n\n    // Normalize all scenes\n    this.out.scenes = (this.gltf.scenes || [])\n      .map(scene => this.parseScene(scene, options))\n      .filter(Boolean);\n\n    if (this.gltf.scene !== undefined) {\n      this.out.scene = this.gltf.scenes[this.gltf.scene];\n    }\n\n    return this;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // PREPARATION STEP: CROSS-LINK INDEX RESOLUTION, ENUM LOOKUP, CONVENIENCE CALCULATIONS\n  /* eslint-disable complexity */\n  _resolveToTree(options = {}) {\n    const {gltf} = this;\n\n    (gltf.bufferViews || []).forEach((bufView, i) => this._resolveBufferView(bufView, i));\n\n    (gltf.images || []).forEach((image, i) => this._resolveImage(image, i, options));\n    (gltf.samplers || []).forEach((sampler, i) => this._resolveSampler(sampler, i));\n    (gltf.textures || []).forEach((texture, i) => this._resolveTexture(texture, i));\n\n    (gltf.accessors || []).forEach((accessor, i) => this._resolveAccessor(accessor, i));\n    (gltf.materials || []).forEach((material, i) => this._resolveMaterial(material, i));\n    (gltf.meshes || []).forEach((mesh, i) => this._resolveMesh(mesh, i));\n\n    (gltf.nodes || []).forEach((node, i) => this._resolveNode(node, i));\n\n    (gltf.skins || []).forEach((skin, i) => this._resolveSkin(skin, i));\n\n    (gltf.scenes || []).forEach((scene, i) => this._resolveScene(scene, i));\n\n    if (gltf.scene !== undefined) {\n      gltf.scene = gltf.scenes[this.gltf.scene];\n    }\n\n    return gltf;\n  }\n  /* eslint-enable complexity */\n\n  _resolveScene(scene, index) {\n    scene.id = `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map(node => this.getNode(node));\n  }\n\n  _resolveNode(node, index) {\n    node.id = `node-${index}`;\n    node.children = (node.children || []).map(child => this.getNode(child));\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n  }\n\n  _resolveSkin(skin, index) {\n    skin.id = `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n  }\n\n  _resolveMesh(mesh, index) {\n    mesh.id = `mesh-${index}`;\n    for (const primitive of mesh.primitives) {\n      for (const attribute in primitive.attributes) {\n        primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n      }\n      if (primitive.indices !== undefined) {\n        primitive.indices = this.getAccessor(primitive.indices);\n      }\n      if (primitive.material !== undefined) {\n        primitive.material = this.getMaterial(primitive.material);\n      }\n    }\n  }\n\n  _resolveMaterial(material, index) {\n    material.id = `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n\n    if (material.pbrMetallicRoughness) {\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n  }\n\n  _resolveAccessor(accessor, index) {\n    accessor.id = `accessor-${index}`;\n    accessor.bufferView = this.getBufferView(accessor.bufferView);\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor);\n    accessor.components = getSizeFromAccessorType(accessor);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n  }\n\n  _resolveTexture(texture, index) {\n    texture.id = `texture-${index}`;\n    texture.sampler = this.getSampler(texture.sampler);\n    texture.source = this.getImage(texture.source);\n  }\n\n  _resolveSampler(sampler, index) {\n    sampler.id = `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index, options) {\n    image.id = `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // TODO - Handle non-binary-chunk images, data URIs, URLs etc\n    // TODO - Image creation could be done on getImage instead of during load\n    const {createImages = true} = options;\n    if (createImages) {\n      image.image = this.glbParser.getImage(image);\n    } else {\n      image.getImageAsync = () => this.glbParser.getImageAsync(image);\n    }\n  }\n\n  _resolveBufferView(bufferView, index) {\n    bufferView.id = `bufferView-${index}`;\n    bufferView.buffer = this.getBuffer(bufferView.buffer);\n\n    if (this.glbParser) {\n      bufferView.data = this.glbParser.getBufferView(bufferView);\n    }\n  }\n\n  _decompressUberDracoPointCloud(primitive, extensions) {\n    const bufferViewIndex = extensions.UBER_draco_point_cloud_compression.bufferView;\n    const bufferView = this.getBufferView(bufferViewIndex);\n\n    // TODO: change to getArrayFromBufferView()\n    const compressedData = this.glbParser.getBufferView(bufferView);\n\n    const dracoDecoder = new this.DracoDecoder();\n    const decodedPrimitive = dracoDecoder.decode(compressedData);\n\n    // TODO: what to do about original attributes\n    primitive.attributes = decodedPrimitive.attributes;\n    // TODO: stashing header on primitive, not sure if necessary\n    primitive.header = decodedPrimitive.header;\n\n    // TODO: drawmode is currently undefined, look into dracodecoder to set to 0 for point cloud\n    primitive.drawMode = decodedPrimitive.drawMode || 0;\n  }\n\n  // PREPROC\n\n  _resolveCamera(camera) {\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n  }\n\n}\n"],"file":"gltf-parser.js"}