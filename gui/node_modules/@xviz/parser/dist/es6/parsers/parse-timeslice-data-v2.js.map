{"version":3,"sources":["../../../src/parsers/parse-timeslice-data-v2.js"],"names":["LOG_STREAM_MESSAGE","getXVIZConfig","parseXVIZPose","parseStreamFutures","parseStreamPrimitive","parseStreamVariable","parseStreamTimeSeries","parseStreamUIPrimitives","log","parseStreamSet","data","convertPrimitive","update_type","updates","error","type","INCOMPLETE","message","length","warn","streamSets","timestamp","reduce","t","stateUpdate","Math","max","newStreams","result","TIMESLICE","streams","xvizStreams","parseStreamSets","Object","assign","STREAM_BLACKLIST","poses","primitives","variables","timeSeries","futures","uiPrimitives","streamSet","future_instances","ui_primitives","time_series","push","keys","filter","streamName","has","forEach","primitive","variable","timeSeriesStreams","future"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Extracts a TIMESLICE message v2\nimport {LOG_STREAM_MESSAGE} from '../constants';\nimport {getXVIZConfig} from '../config/xviz-config';\nimport {parseXVIZPose} from './parse-xviz-pose';\nimport {\n  parseStreamFutures,\n  parseStreamPrimitive,\n  parseStreamVariable,\n  parseStreamTimeSeries,\n  parseStreamUIPrimitives\n} from './parse-xviz-stream';\nimport log from '../utils/log';\n\n/* eslint-disable camelcase */\n\nexport default function parseStreamSet(data, convertPrimitive) {\n  const {update_type, updates} = data;\n\n  if (update_type !== 'snapshot') {\n    log.error(\n      `Only XVIZ update_type of \"snapshot\" is currently supported. Type \"${update_type}\" is not supported.`\n    )();\n    return {type: LOG_STREAM_MESSAGE.INCOMPLETE, message: 'Unsupported update type'};\n  }\n\n  if (!updates) {\n    return {type: LOG_STREAM_MESSAGE.INCOMPLETE, message: 'Missing required \"updates\" property'};\n  }\n\n  if (updates && updates.length === 0) {\n    return {\n      type: LOG_STREAM_MESSAGE.INCOMPLETE,\n      message: 'Property \"updates\" has length of 0, no data?'\n    };\n  }\n\n  if (updates.length > 1) {\n    log.warn(\n      `Only XVIZ first update of \"snapshot\" is currently supported. Current updates has \"${\n        updates.length\n      }\" entries.`\n    )();\n  }\n\n  const streamSets = updates;\n\n  let timestamp = null;\n  if (!timestamp && streamSets) {\n    timestamp = streamSets.reduce((t, stateUpdate) => {\n      return Math.max(t, stateUpdate.timestamp);\n    }, 0);\n  }\n\n  if (!timestamp) {\n    // Incomplete stream message, just tag it accordingly so client can ignore it\n    return {type: LOG_STREAM_MESSAGE.INCOMPLETE, message: 'Missing timestamp in \"updates\"'};\n  }\n\n  const newStreams = {};\n  const result = {\n    type: LOG_STREAM_MESSAGE.TIMESLICE,\n    streams: newStreams,\n    timestamp\n    // TODO/Xintong validate primary vehicle pose in each update?\n  };\n\n  if (streamSets) {\n    const xvizStreams = parseStreamSets(streamSets, timestamp, convertPrimitive);\n    Object.assign(newStreams, xvizStreams);\n  }\n\n  return result;\n}\n\n/* eslint-disable max-statements */\nfunction parseStreamSets(streamSets, timestamp, convertPrimitive) {\n  const {STREAM_BLACKLIST} = getXVIZConfig();\n\n  const newStreams = {};\n  const poses = {};\n  const primitives = {};\n  const variables = {};\n  const timeSeries = [];\n  const futures = {};\n  const uiPrimitives = {};\n\n  for (const streamSet of streamSets) {\n    Object.assign(poses, streamSet.poses);\n    Object.assign(primitives, streamSet.primitives);\n    Object.assign(variables, streamSet.variables);\n    Object.assign(futures, streamSet.future_instances);\n    Object.assign(uiPrimitives, streamSet.ui_primitives);\n\n    if (streamSet.time_series) {\n      if (timeSeries) {\n        timeSeries.push(...streamSet.time_series);\n      }\n    }\n  }\n\n  Object.keys(poses)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(streamName => {\n      newStreams[streamName] = parseXVIZPose(poses[streamName]);\n    });\n\n  Object.keys(primitives)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(primitive => {\n      newStreams[primitive] = parseStreamPrimitive(\n        primitives[primitive],\n        primitive,\n        timestamp,\n        convertPrimitive\n      );\n    });\n\n  Object.keys(variables)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(variable => {\n      newStreams[variable] = parseStreamVariable(variables[variable], variable, timestamp);\n    });\n\n  if (timeSeries.length) {\n    const timeSeriesStreams = parseStreamTimeSeries(timeSeries, STREAM_BLACKLIST);\n    Object.assign(newStreams, timeSeriesStreams);\n  }\n\n  Object.keys(futures)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(future => {\n      newStreams[future] = parseStreamFutures(futures[future], future, timestamp, convertPrimitive);\n    });\n\n  Object.keys(uiPrimitives)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(primitive => {\n      newStreams[primitive] = parseStreamUIPrimitives(\n        uiPrimitives[primitive],\n        primitive,\n        timestamp\n      );\n    });\n\n  return newStreams;\n}\n/* eslint-enable max-statements */\n"],"file":"parse-timeslice-data-v2.js"}