function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { withTheme } from '../shared/theme';
import { ExpandedIcon, CollapsedIcon } from '../shared/icons';
import Input from './input';
import { Container, Expander } from './styled-components';
var SETTING_STYLES = {
  position: 'relative'
};

var Form =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Form, _PureComponent);

  function Form() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Form);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      collapsed: {}
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onChange", function (settingName, newValue) {
      _this.props.onChange(_defineProperty({}, settingName, newValue));
    });

    return _this;
  }

  _createClass(Form, [{
    key: "toggleCollapsed",
    value: function toggleCollapsed(_ref) {
      var settingName = _ref.settingName,
          collapsed = _ref.collapsed;

      var newCollapsedState = _objectSpread({}, this.state.collapsed, _defineProperty({}, settingName, !collapsed));

      this.setState({
        collapsed: newCollapsedState
      });
    }
    /* eslint-disable complexity */

  }, {
    key: "_renderSetting",
    value: function _renderSetting(_ref2) {
      var _this2 = this;

      var settingName = _ref2.settingName,
          setting = _ref2.setting,
          value = _ref2.value,
          _ref2$isEnabled = _ref2.isEnabled,
          isEnabled = _ref2$isEnabled === void 0 ? true : _ref2$isEnabled,
          level = _ref2.level;
      var _this$props = this.props,
          theme = _this$props.theme,
          style = _this$props.style;
      var _setting$enabled = setting.enabled,
          enabled = _setting$enabled === void 0 ? true : _setting$enabled,
          _setting$visible = setting.visible,
          visible = _setting$visible === void 0 ? true : _setting$visible,
          children = setting.children;
      var isVisible;

      if (typeof enabled === 'function') {
        isEnabled = isEnabled && enabled(this.props.values);
      } else {
        isEnabled = isEnabled && Boolean(enabled);
      }

      if (typeof visible === 'function') {
        isVisible = visible(this.props.values);
      } else {
        isVisible = Boolean(visible);
      }

      if (!isVisible) {
        return null;
      }

      var collapsed = typeof this.state.collapsed[settingName] !== 'undefined' ? this.state.collapsed[settingName] : false;
      var input = React.createElement(Input, _extends({
        key: settingName
      }, setting, {
        label: setting.title || settingName,
        name: settingName,
        value: value,
        theme: theme,
        style: style,
        level: level,
        isEnabled: isEnabled,
        onChange: this._onChange
      }));

      if (!children) {
        return input;
      }

      return React.createElement("div", {
        key: settingName,
        style: SETTING_STYLES
      }, setting.collapsible && React.createElement(Expander, {
        theme: theme,
        userStyle: style.expander,
        onClick: function onClick() {
          return _this2.toggleCollapsed({
            settingName: settingName,
            collapsed: collapsed
          });
        },
        isExpanded: !collapsed
      }, collapsed ? style.iconCollapsed || React.createElement(CollapsedIcon, null) : style.iconExpanded || React.createElement(ExpandedIcon, null)), input, !collapsed && this._renderSettings(children, {
        isEnabled: isEnabled,
        level: level + 1
      }));
    }
    /* eslint-enable complexity */

  }, {
    key: "_renderSettings",
    value: function _renderSettings(settings) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var values = this.props.values;
      var children = [];

      var _arr = Object.keys(settings);

      for (var _i = 0; _i < _arr.length; _i++) {
        var settingName = _arr[_i];
        var setting = settings[settingName];
        var value = values[settingName];
        var collapsed = this.state.collapsed[settingName];
        var level = opts.level || 0;

        var child = this._renderSetting(_objectSpread({}, opts, {
          settingName: settingName,
          setting: setting,
          value: value,
          collapsed: collapsed,
          level: level
        }));

        children.push(child);
      }

      return children;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          theme = _this$props2.theme,
          style = _this$props2.style,
          data = _this$props2.data;
      return React.createElement(Container, {
        theme: theme,
        userStyle: style.wrapper
      }, this._renderSettings(data));
    }
  }]);

  return Form;
}(PureComponent);

_defineProperty(Form, "propTypes", {
  data: PropTypes.object.isRequired,
  style: PropTypes.object,
  values: PropTypes.object.isRequired,
  onChange: PropTypes.func.isRequired
});

_defineProperty(Form, "defaultProps", {
  style: {}
});

export default withTheme(Form);
//# sourceMappingURL=form.js.map