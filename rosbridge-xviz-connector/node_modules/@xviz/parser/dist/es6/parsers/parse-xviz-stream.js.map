{"version":3,"sources":["../../../src/parsers/parse-xviz-stream.js"],"names":["getXVIZConfig","PRIMITIVE_CAT","normalizeXVIZPrimitive","XVIZObject","isMainThread","log","getPrimitiveData","XVIZPrimitiveSettingsV1","XVIZPrimitiveSettingsV2","createPrimitiveMap","result","key","parseXVIZStream","data","convertPrimitive","primitives","ui_primitives","variables","futures","streamName","Object","keys","map","datum","parseStreamPrimitive","timestamp","parseStreamVariable","parseStreamFutures","parseStreamUIPrimitives","time","OBJECT_STREAM","preProcessPrimitive","PRIMITIVE_SETTINGS","currentMajorVersion","primitiveData","Array","isArray","primType","type","objects","primitiveMap","category","objectIndex","length","object","LOOKAHEAD","push","j","primitive","id","observe","pointCloud","joinObjectPointCloudsToTypedArrays","parseStreamFuturesV1","parseStreamFuturesV2","forEach","future","filter","Boolean","lookAheads","timestamps","future_set","futureIndex","normalizedPrimitive","parseStreamVariableV1","parseStreamVariableV2","variable","values","v","i","entry","base","valueData","getVariableData","object_id","parseStreamTimeSeries","seriesArray","streamBlackList","parseStreamTimeSeriesV2","error","ValueTypes","valuesObject","includes","timeSeriesStreams","timeSeriesEntry","streams","entryIndex","has","tsStream","warn","getVertexCount","vertices","Number","isFinite","getColorStride","colors","vertexCount","stride","DEFAULT_COLOR","numInstances","vertexColorStride","positions","Float32Array","Uint8ClampedArray","ids","Uint32Array","vertexPositions","vertexColors","colorStride","color","isColorFlattenedArray","set","isPositionFlattenedArray","fill","vertex","subarray","components","assign"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getXVIZConfig} from '../config/xviz-config';\nimport {PRIMITIVE_CAT, normalizeXVIZPrimitive} from './parse-xviz-primitive';\nimport XVIZObject from '../objects/xviz-object';\nimport {isMainThread} from '../utils/globals';\nimport log from '../utils/log';\nimport {getPrimitiveData} from './xviz-v2-common';\n\nimport XVIZPrimitiveSettingsV1 from './xviz-primitives-v1';\nimport XVIZPrimitiveSettingsV2 from './xviz-primitives-v2';\n\nfunction createPrimitiveMap() {\n  const result = {};\n  for (const key in PRIMITIVE_CAT) {\n    result[PRIMITIVE_CAT[key]] = [];\n  }\n  return result;\n}\n\n/* eslint-disable max-depth, max-statements, complexity, camelcase */\n// Handle stream-sliced data, via the ETL flow.\nexport function parseXVIZStream(data, convertPrimitive) {\n  // data is an array of objects\n  // Each object is [{primitives, variables, timestamp},...]\n  // Each object represents a timestamp and array of objects\n\n  // V1 has a no-data entry that results in setting all top-level types to an\n  // empty array. See the test cases.\n  //\n  // Usually only one of these fields is valid and thus only one is normally\n  // iterated below.\n  const {primitives, ui_primitives, variables, futures} = data[0];\n\n  // At this point, we either have one or the other.\n  // TODO(twojtasz): BUG: there is an assumption that\n  // streamNames will be unique.  Need to put in a detection if\n  // that is violated.\n  if (primitives) {\n    const streamName = Object.keys(primitives)[0];\n    return data.map(datum =>\n      parseStreamPrimitive(\n        datum.primitives[streamName],\n        streamName,\n        datum.timestamp,\n        convertPrimitive\n      )\n    );\n  } else if (variables) {\n    const streamName = Object.keys(variables)[0];\n    return data.map(datum =>\n      parseStreamVariable(datum.variables[streamName], streamName, datum.timestamp)\n    );\n  } else if (futures) {\n    const streamName = Object.keys(futures)[0];\n    return data.map(datum =>\n      parseStreamFutures(datum.futures[streamName], streamName, datum.timestamp, convertPrimitive)\n    );\n  } else if (ui_primitives) {\n    const streamName = Object.keys(ui_primitives)[0];\n    return data.map(datum =>\n      parseStreamUIPrimitives(datum.ui_primitives[streamName], streamName, datum.timestamp)\n    );\n  }\n\n  return {};\n}\n\n/* Processes an individual primitive time sample and converts the\n * data to UI elements.\n */\nexport function parseStreamPrimitive(primitives, streamName, time, convertPrimitive) {\n  const {OBJECT_STREAM, preProcessPrimitive} = getXVIZConfig();\n  const PRIMITIVE_SETTINGS =\n    getXVIZConfig().currentMajorVersion === 1 ? XVIZPrimitiveSettingsV1 : XVIZPrimitiveSettingsV2;\n\n  const primitiveData = getPrimitiveData(primitives);\n\n  if (!primitiveData || !Array.isArray(primitiveData.primitives)) {\n    return {};\n  }\n\n  const {type: primType, primitives: objects} = primitiveData;\n\n  const primitiveMap = createPrimitiveMap();\n\n  let category = null;\n  // Primitives are an array of XVIZ objects\n  for (let objectIndex = 0; objectIndex < objects.length; objectIndex++) {\n    const object = objects[objectIndex];\n\n    // array of primitives\n    if (object && Array.isArray(object)) {\n      category = PRIMITIVE_CAT.LOOKAHEAD;\n      primitiveMap[category].push([]);\n\n      for (let j = 0; j < object.length; j++) {\n        // Apply custom XVIZ pre processing to this primitive\n        preProcessPrimitive({primitive: object[j], streamName, time});\n\n        // process each primitive\n        const primitive = normalizeXVIZPrimitive(\n          PRIMITIVE_SETTINGS,\n          object[j],\n          objectIndex,\n          streamName,\n          primType,\n          time,\n          convertPrimitive\n        );\n        if (primitive) {\n          primitiveMap[category][objectIndex].push(primitive);\n        }\n      }\n    } else {\n      // single primitive\n\n      // Apply custom XVIZ postprocessing to this primitive\n      preProcessPrimitive({primitive: object, streamName, time});\n\n      // normalize primitive\n      const primitive = normalizeXVIZPrimitive(\n        PRIMITIVE_SETTINGS,\n        object,\n        objectIndex,\n        streamName,\n        primType,\n        time,\n        convertPrimitive\n      );\n\n      // Allow for v1 inline type to override primitive type\n      category = PRIMITIVE_SETTINGS[object.type || primType].category;\n      if (primitive) {\n        primitiveMap[category].push(primitive);\n\n        if (\n          isMainThread &&\n          // OBJECT_STREAM is deprecated, only keeping for backward compatibility\n          (streamName === OBJECT_STREAM ||\n            (!OBJECT_STREAM && primitive.id && category === 'features'))\n        ) {\n          XVIZObject.observe(primitive.id, time);\n        }\n      }\n    }\n  }\n\n  primitiveMap.pointCloud = joinObjectPointCloudsToTypedArrays(primitiveMap.pointCloud);\n  primitiveMap.time = time;\n\n  return primitiveMap;\n}\n\n/* Processes the futures and converts the\n * data to UI elements.\n */\nexport function parseStreamFutures(objects, streamName, time, convertPrimitive) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  return currentMajorVersion === 1\n    ? parseStreamFuturesV1(objects, streamName, time, convertPrimitive)\n    : parseStreamFuturesV2(objects, streamName, time, convertPrimitive);\n}\n\nexport function parseStreamFuturesV1(objects, streamName, time, convertPrimitive) {\n  const futures = [];\n  // objects = array of objects\n  // [{timestamp, primitives[]}, ...]\n\n  // Futures are an array of array of primitives and\n  // the objectIndex is used to find the timestamp associated\n  // with the set of primitives.\n  objects.forEach((object, objectIndex) => {\n    const {primitives} = object;\n\n    const future = primitives\n      .map(primitive =>\n        normalizeXVIZPrimitive(\n          XVIZPrimitiveSettingsV1,\n          primitive,\n          objectIndex,\n          streamName,\n          primitive.type,\n          time,\n          convertPrimitive\n        )\n      )\n      .filter(Boolean);\n\n    futures.push(future);\n  });\n\n  return {\n    time,\n    lookAheads: futures\n  };\n}\n\nexport function parseStreamFuturesV2(objects, streamName, time, convertPrimitive) {\n  const futures = [];\n\n  // objects = {\n  //   timestamps: [1, 2, 3],\n  //   primitives: [\n  //    { <type>: [ <objects for ts[1]> ] },\n  //    { <type>: [ <objects for ts[2]> ] },\n  //    { <type>: [ <objects for ts[3]> ] }\n  //   ]\n  // }\n\n  const timestamps = objects.timestamps;\n  objects.primitives.forEach((future_set, futureIndex) => {\n    // Get the underlying primitive array\n    const data = getPrimitiveData(future_set);\n\n    const future = data.primitives\n      .map(primitive => {\n        const normalizedPrimitive = normalizeXVIZPrimitive(\n          XVIZPrimitiveSettingsV2,\n          primitive,\n          futureIndex,\n          streamName,\n          data.type,\n          time,\n          convertPrimitive\n        );\n\n        normalizedPrimitive.timestamp = timestamps[futureIndex];\n        return normalizedPrimitive;\n      })\n      .filter(Boolean);\n\n    futures.push(future);\n  });\n\n  return {\n    time,\n    lookAheads: futures\n  };\n}\n\n/* Processes an individual variable time sample and converts the\n * data to UI elements.\n */\nexport function parseStreamVariable(objects, streamName, time) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  return currentMajorVersion === 1\n    ? parseStreamVariableV1(objects, streamName, time)\n    : parseStreamVariableV2(objects, streamName, time);\n}\n\nexport function parseStreamVariableV1(objects, streamName, time) {\n  if (Array.isArray(objects)) {\n    return {time};\n  }\n\n  let variable;\n  const {timestamps, values} = objects;\n  if (values.length === 1) {\n    variable = values[0];\n  } else if (timestamps) {\n    variable = values.map((v, i) => [timestamps[i], v]);\n  } else {\n    variable = values;\n  }\n\n  const entry = {\n    time,\n    variable\n  };\n\n  return entry;\n}\n\nexport function parseStreamVariableV2(objects, streamName, time) {\n  if (Array.isArray(objects)) {\n    return {time};\n  }\n\n  const variables = objects.variables;\n  if (!variables || !Array.isArray(variables)) {\n    return {};\n  }\n\n  const result = {time};\n\n  result.variable = variables\n    .map(entry => {\n      const {base, values} = entry;\n\n      const valueData = getVariableData(values);\n      if (!valueData || !valueData.values) {\n        return null;\n      }\n\n      const datum = {\n        values: valueData.values\n      };\n\n      if (base && base.object_id) {\n        datum.id = base.object_id;\n      }\n\n      return datum;\n    })\n    .filter(Boolean);\n\n  return result;\n}\n\n/* Processes a time_series sample and converts the\n * data to UI elements.\n */\nexport function parseStreamTimeSeries(seriesArray, streamBlackList) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  if (currentMajorVersion === 2) {\n    return parseStreamTimeSeriesV2(seriesArray, streamBlackList);\n  }\n\n  log.error(`Invalid time_series data in XVIZ version ${currentMajorVersion}`)();\n  return null;\n}\n\nconst ValueTypes = ['doubles', 'int32s', 'bools', 'strings'];\n\nfunction getVariableData(valuesObject) {\n  // Primitives have the type as the first key\n  const keys = Object.keys(valuesObject);\n\n  for (const type of keys) {\n    if (ValueTypes.includes(type)) {\n      return {type, values: valuesObject[type]};\n    }\n  }\n\n  // TODO(twojtasz): a more informative error path that doesn't abort processing\n  return {};\n}\n\nfunction parseStreamTimeSeriesV2(seriesArray, streamBlackList) {\n  if (!Array.isArray(seriesArray)) {\n    return {};\n  }\n\n  const timeSeriesStreams = {};\n  seriesArray.forEach(timeSeriesEntry => {\n    const {timestamp, streams, values, object_id} = timeSeriesEntry;\n    const valueData = getVariableData(values);\n\n    if (!valueData || valueData.values.length !== streams.length) {\n      return null;\n    }\n\n    valueData.values.forEach((variable, entryIndex) => {\n      const streamName = streams[entryIndex];\n\n      if (!streamBlackList.has(streamName)) {\n        const entry = {time: timestamp, variable};\n        if (object_id) {\n          entry.id = object_id;\n        }\n\n        const tsStream = timeSeriesStreams[streamName];\n\n        if (tsStream) {\n          // a duplicate entry is seen, leave the first entry.\n          log.warn(`Unexpected time_series duplicate: ${streamName}`)();\n        } else {\n          timeSeriesStreams[streamName] = entry;\n        }\n      }\n    });\n\n    // eslint consistent-return warning\n    // This for loop we do not need to return any value\n    return timeSeriesStreams;\n  });\n\n  return timeSeriesStreams;\n}\n\nfunction getVertexCount(vertices) {\n  return Number.isFinite(vertices[0]) ? vertices.length / 3 : vertices.length;\n}\n\nfunction getColorStride(colors, vertexCount) {\n  if (colors) {\n    if (colors.length / 4 === vertexCount) {\n      return 4;\n    }\n    if (colors.length / 3 === vertexCount) {\n      return 3;\n    }\n    let stride;\n    if (Array.isArray(colors[0])) {\n      stride = colors[0].length;\n    } else {\n      stride = colors.length;\n    }\n    if (stride === 3 || stride === 4) {\n      return stride;\n    }\n    log.error('Unknown point color format');\n  }\n  return 0;\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\n// Joins a set of point clouds extracted from objects into a single point cloud\n// generates typed arrays that can be displayed efficiently by deck.gl\nfunction joinObjectPointCloudsToTypedArrays(objects) {\n  if (objects.length === 0) {\n    return null;\n  }\n\n  let numInstances = 0;\n  for (const object of objects) {\n    numInstances += getVertexCount(object.vertices);\n  }\n\n  let vertexColorStride = null;\n\n  const positions = new Float32Array(numInstances * 3);\n  const colors = new Uint8ClampedArray(numInstances * 4);\n\n  // Store object ids to enable recoloring.\n  // NOTE: Not a vertex attribute, ids are just efficiently stored as as 32 bit integers...\n  const ids = new Uint32Array(numInstances);\n\n  let i = 0;\n  objects.forEach(object => {\n    const vertexPositions = object.vertices;\n    // object.color is V1 and should be removed when deprecated\n    const vertexColors = object.colors;\n    const vertexCount = getVertexCount(vertexPositions);\n\n    if (vertexCount === 0) {\n      return;\n    }\n\n    // Setup for per-point color\n    const colorStride = getColorStride(vertexColors || object.color, vertexCount);\n    if (vertexColorStride !== null && vertexColorStride !== colorStride) {\n      log.error('Inconsistent point color format');\n    }\n    vertexColorStride = colorStride;\n\n    const isColorFlattenedArray =\n      vertexColors && vertexColors.length === vertexCount * vertexColorStride;\n    if (isColorFlattenedArray) {\n      colors.set(vertexColors, i * vertexColorStride);\n    }\n\n    const isPositionFlattenedArray = vertexPositions.length === vertexCount * 3;\n    if (isPositionFlattenedArray) {\n      positions.set(vertexPositions, i * 3);\n    }\n\n    if (Number.isFinite(object.id)) {\n      // v1 object ids\n      ids.fill(object.id, i, i + vertexCount);\n    }\n\n    if (isPositionFlattenedArray && (isColorFlattenedArray || !vertexColorStride)) {\n      // both positions and colors are populated\n      return;\n    }\n\n    let color = object.color || DEFAULT_COLOR;\n    for (let j = 0; j < vertexCount; j++, i++) {\n      if (!isPositionFlattenedArray) {\n        const vertex = vertexPositions[j];\n        positions[i * 3 + 0] = vertex[0];\n        positions[i * 3 + 1] = vertex[1];\n        positions[i * 3 + 2] = vertex[2];\n      }\n\n      if (!isColorFlattenedArray && vertexColorStride) {\n        if (vertexColors) {\n          color = vertexColors[j];\n        }\n        colors[i * vertexColorStride + 0] = color[0];\n        colors[i * vertexColorStride + 1] = color[1];\n        colors[i * vertexColorStride + 2] = color[2];\n        if (vertexColorStride === 4) {\n          colors[i * vertexColorStride + 3] = color[3] || 255;\n        }\n      }\n    }\n  });\n\n  return {\n    type: objects[0].type,\n    numInstances,\n    positions,\n    colors: vertexColorStride ? colors.subarray(0, vertexColorStride * numInstances) : null,\n    ids\n  };\n}\n\nexport function parseStreamUIPrimitives(components, streamName, time) {\n  return Object.assign({time}, components);\n}\n"],"file":"parse-xviz-stream.js"}