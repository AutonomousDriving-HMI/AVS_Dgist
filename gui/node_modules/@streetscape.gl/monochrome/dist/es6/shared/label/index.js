function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import styled from '@emotion/styled';
import { withTheme, evaluateStyle } from '../theme';
import { InfoIcon } from '../icons';
import { Tooltip } from '../popover';
const LabelComponent = styled.label(props => _objectSpread({}, props.theme.__reset__, {
  display: 'flex',
  alignItems: 'center',
  cursor: 'inherit',
  color: props.isEnabled ? props.theme.textColorPrimary : props.theme.textColorDisabled,
  '>*': {
    marginLeft: props.theme.spacingNormal
  }
}, evaluateStyle(props.userStyle, props)));
const LabelInfo = styled.div(props => _objectSpread({
  display: 'inline-block',
  color: props.isEnabled ? props.theme.controlColorPrimary : props.theme.controlColorDisabled,
  cursor: 'default',
  verticalAlign: 'middle',
  width: 16,
  height: 16,
  lineHeight: '16px',
  textAlign: 'center',
  path: {
    fill: 'currentColor'
  }
}, evaluateStyle(props.userStyle, props))); // Input component that can be toggled on and off

class Label extends PureComponent {
  render() {
    const _this$props = this.props,
          theme = _this$props.theme,
          isEnabled = _this$props.isEnabled,
          htmlFor = _this$props.for,
          style = _this$props.style,
          children = _this$props.children,
          tooltip = _this$props.tooltip,
          badge = _this$props.badge;
    const labelProps = {};

    if (htmlFor) {
      labelProps.htmlFor = htmlFor;
    }

    const styleProps = {
      theme,
      isEnabled
    };
    return React.createElement(LabelComponent, _extends({}, styleProps, {
      userStyle: style.label
    }), children, tooltip && React.createElement(Tooltip, {
      style: style.tooltip,
      content: tooltip
    }, React.createElement(LabelInfo, _extends({}, styleProps, {
      userStyle: style.tooltipTarget
    }), style.iconInfo || React.createElement(InfoIcon, null))), badge);
  }

}

_defineProperty(Label, "propTypes", {
  for: PropTypes.string,
  style: PropTypes.object,
  tooltip: PropTypes.string,
  badge: PropTypes.element,
  isEnabled: PropTypes.bool
});

_defineProperty(Label, "defaultProps", {
  style: {},
  isEnabled: true
});

export default withTheme(Label);
//# sourceMappingURL=index.js.map