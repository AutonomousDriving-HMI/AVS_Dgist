function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Draggable from '../shared/draggable';
import styled from '@emotion/styled';
import { withTheme, evaluateStyle } from '../shared/theme';
export const Container = styled.div(props => _objectSpread({}, props.theme.__reset__, {
  position: 'absolute',
  boxSizing: 'content-box',
  boxShadow: props.theme.shadow,
  borderStyle: 'solid',
  borderWidth: 1,
  borderColor: props.isMoving || props.isResizing ? props.theme.controlColorActive : props.theme.backgroundAlt
}, evaluateStyle(props.userStyle, props)));
export const ContentComponent = styled.div(props => _objectSpread({
  overflow: 'hidden',
  lineHeight: 0,
  boxSizing: 'content-box',
  position: 'relative'
}, evaluateStyle(props.userStyle, props)));
export const TitleComponent = styled.div(props => _objectSpread({
  background: props.isMoving || props.isResizing ? props.theme.controlColorActive : props.theme.backgroundAlt,
  color: props.isMoving || props.isResizing ? props.theme.textColorInvert : props.theme.textColorPrimary,
  textAlign: 'center',
  fontWeight: 'bold',
  lineHeight: 2
}, evaluateStyle(props.userStyle, props)));
export const Resizer = styled.div(props => ({
  position: 'absolute',
  width: 12,
  height: 12,
  right: 0,
  bottom: 0,
  zIndex: 1
}));
/**
 * @class
 */

class FloatPanel extends PureComponent {
  /**
   * @constructor
   *
   * @property {string|Element} title content to display in the title bar.
   *  If empty, the title bar will be hidden.
   * @property {number} x position from the left in pixels
   * @property {number} y position from the top in pixels
   * @property {number} width width of the panel
   * @property {number} height height of the panel
   * @property {string} [className] additional class name for the container
   * @property {number} [parentWidth] width of the parent window
   * @property {number} [parentHeight]} height of the parent window
   *  If parent window size is specified, the panel cannot be moved outside of its bounds.
   * @property {boolean} [minimized] whether the panel is minimized (show only title bar)
   * @property {boolean} [movable] whether the panel can be moved, default true
   * @property {boolean} [resizable] whether the panel can be resized, default false
   * @property {boolean} [minimizable] whether the panel can be minimized, default true
   * @property {function} [onUpdate] callback when user move/resize/minimize the panel
   */
  constructor(props) {
    super(props);

    _defineProperty(this, "_onMoveStart", () => {
      const _this$props = this.props,
            x = _this$props.x,
            y = _this$props.y,
            width = _this$props.width,
            height = _this$props.height,
            minimized = _this$props.minimized;
      this.setState({
        isMoving: true,
        startProps: {
          x,
          y,
          width,
          height,
          minimized
        }
      });
    });

    _defineProperty(this, "_onMoveDrag", (_ref) => {
      let deltaX = _ref.deltaX,
          deltaY = _ref.deltaY;
      const startProps = this.state.startProps;
      this.props.onUpdate(_objectSpread({}, startProps, {
        x: Math.max(0, startProps.x + deltaX),
        y: Math.max(0, startProps.y + deltaY)
      }));
    });

    _defineProperty(this, "_onMoveEnd", (_ref2) => {
      let hasDragged = _ref2.hasDragged;

      if (this.props.minimizable && this.props.title && !hasDragged) {
        const startProps = this.state.startProps;
        this.props.onUpdate(_objectSpread({}, startProps, {
          minimized: !startProps.minimized
        }));
      }

      this.setState({
        isMoving: false
      });
    });

    _defineProperty(this, "_onResizeStart", () => {
      const _this$props2 = this.props,
            x = _this$props2.x,
            y = _this$props2.y,
            width = _this$props2.width,
            height = _this$props2.height,
            minimized = _this$props2.minimized;
      this.setState({
        isResizing: true,
        startProps: {
          x,
          y,
          width,
          height,
          minimized
        }
      });
    });

    _defineProperty(this, "_onResizeDrag", (_ref3) => {
      let deltaX = _ref3.deltaX,
          deltaY = _ref3.deltaY;
      const startProps = this.state.startProps;
      this.props.onUpdate(_objectSpread({}, startProps, {
        width: Math.max(0, startProps.width + deltaX),
        height: Math.max(0, startProps.height + deltaY)
      }));
    });

    _defineProperty(this, "_onResizeEnd", () => {
      this.setState({
        isResizing: false
      });
    });

    this.state = {
      isMoving: false,
      isResizing: false,
      startProps: null
    };
  }

  renderMover(children) {
    const movable = this.props.movable;

    if (movable) {
      return React.createElement(Draggable, {
        onDragStart: this._onMoveStart,
        onDrag: this._onMoveDrag,
        onDragEnd: this._onMoveEnd
      }, children);
    }

    return children;
  }

  renderContent(styleProps) {
    const _this$props3 = this.props,
          style = _this$props3.style,
          height = _this$props3.height,
          minimized = _this$props3.minimized,
          minimizable = _this$props3.minimizable,
          resizable = _this$props3.resizable;

    if (minimizable && minimized) {
      return null;
    }

    return React.createElement(ContentComponent, _extends({}, styleProps, {
      userStyle: style.content,
      style: {
        height
      }
    }), this.props.children, resizable && React.createElement(Draggable, {
      onDragStart: this._onResizeStart,
      onDrag: this._onResizeDrag,
      onDragEnd: this._onResizeEnd,
      style: {
        cursor: 'nwse-resize'
      }
    }, React.createElement(Resizer, _extends({}, styleProps, {
      userStyle: style.resizer
    }))));
  }

  render() {
    const _this$props4 = this.props,
          theme = _this$props4.theme,
          style = _this$props4.style,
          title = _this$props4.title,
          x = _this$props4.x,
          y = _this$props4.y,
          width = _this$props4.width,
          height = _this$props4.height,
          className = _this$props4.className,
          parentWidth = _this$props4.parentWidth,
          parentHeight = _this$props4.parentHeight;
    const _this$state = this.state,
          isMoving = _this$state.isMoving,
          isResizing = _this$state.isResizing;
    const styleProps = {
      theme,
      isMoving,
      isResizing
    };
    const wrapperStyle = {
      left: Math.min(x, Math.max(0, parentWidth - width)),
      top: Math.min(y, Math.max(0, parentHeight - height)),
      width
    }; // Only title bar is draggable

    return React.createElement(Container, _extends({
      className: className
    }, styleProps, {
      userStyle: style.wrapper,
      style: wrapperStyle
    }), title ? this.renderMover(React.createElement(TitleComponent, _extends({}, styleProps, {
      userStyle: style.title
    }), title)) : this.renderMover(this.renderContent(styleProps)), title && this.renderContent(styleProps));
  }

}

_defineProperty(FloatPanel, "propTypes", {
  className: PropTypes.string,
  style: PropTypes.object,
  // container
  parentWidth: PropTypes.number,
  parentHeight: PropTypes.number,
  // state
  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  width: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,
  minimized: PropTypes.bool,
  // interactivity
  movable: PropTypes.bool,
  resizable: PropTypes.bool,
  minimizable: PropTypes.bool,
  // callbacks
  onUpdate: PropTypes.func
});

_defineProperty(FloatPanel, "defaultProps", {
  style: {},
  parentWidth: Infinity,
  parentHeight: Infinity,
  className: '',
  title: '',
  minimized: false,
  movable: true,
  resizable: false,
  minimizable: true,
  onUpdate: () => {}
});

export default withTheme(FloatPanel);
//# sourceMappingURL=index.js.map