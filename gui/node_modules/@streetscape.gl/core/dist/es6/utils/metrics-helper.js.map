{"version":3,"sources":["../../../src/utils/metrics-helper.js"],"names":["getTimeSeriesForStream","metadata","streamName","stream","nograph","mapper","valueMap","scale","getX","d","time","getY","variable","sampleDatum","Number","isFinite","metrics","id","title","unit","valueSeries","getTimeSeries","streams","timeSeries","hasOwnProperty","streamTimeSeries","Object","assign"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,sBAAT,CAAgC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,UAAX;AAAuBC,EAAAA;AAAvB,CAAhC,EAAgE;AAC9D;AACA,MAAI,CAACF,QAAD,IAAaA,QAAQ,CAACG,OAA1B,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,QAAxB;AACA,QAAMC,KAAK,GAAGN,QAAQ,CAACM,KAAT,IAAkB,CAAhC;;AACA,QAAMC,IAAI,GAAGC,CAAC,IAAIA,CAAC,CAACC,IAApB;;AACA,QAAMC,IAAI,GAAGN,MAAM,GAAGI,CAAC,IAAIJ,MAAM,CAACI,CAAC,CAACG,QAAH,CAAd,GAA6BH,CAAC,IAAIA,CAAC,CAACG,QAAF,GAAaL,KAAlE;AAEA,QAAMM,WAAW,GAAGV,MAAM,CAAC,CAAD,CAA1B;;AACA,MAAI,CAACU,WAAD,IAAgB,CAACC,MAAM,CAACC,QAAP,CAAgBJ,IAAI,CAACE,WAAD,CAApB,CAArB,EAAyD;AACvD,WAAO,IAAP;AACD;;AAED,QAAMG,OAAO,GAAG,EAAhB;AACAA,EAAAA,OAAO,CAACd,UAAD,CAAP;AACEe,IAAAA,EAAE,EAAEf;AADN,KAEKD,QAFL;AAGEO,IAAAA,IAHF;AAIEG,IAAAA,IAJF;AAKEO,IAAAA,KAAK,EAAEjB,QAAQ,CAACiB,KAAT,IAAkBhB,UAL3B;AAMEiB,IAAAA,IAAI,EAAElB,QAAQ,CAACkB,IAAT,IAAiB,EANzB;AAOEC,IAAAA,WAAW,EAAEjB;AAPf;AAUA,SAAOa,OAAP;AACD;AAED;;;;;;;;AAMA,OAAO,SAASK,aAAT,CAAuB;AAACpB,EAAAA,QAAQ,GAAG,EAAZ;AAAgBqB,EAAAA;AAAhB,CAAvB,EAAiD;AACtD,QAAMC,UAAU,GAAG,EAAnB;;AACA,OAAK,MAAMrB,UAAX,IAAyBoB,OAAzB,EAAkC;AAChC;AACA,QAAIA,OAAO,CAACE,cAAR,CAAuBtB,UAAvB,KAAsCD,QAAQ,CAACqB,OAA/C,IAA0DrB,QAAQ,CAACqB,OAAT,CAAiBpB,UAAjB,CAA9D,EAA4F;AAC1F,YAAMC,MAAM,GAAGmB,OAAO,CAACpB,UAAD,CAAtB;AACA,YAAMuB,gBAAgB,GAAGzB,sBAAsB,CAAC;AAC9CC,QAAAA,QAAQ,EAAEA,QAAQ,CAACqB,OAAT,CAAiBpB,UAAjB,CADoC;AAE9CA,QAAAA,UAF8C;AAG9CC,QAAAA;AAH8C,OAAD,CAA/C;AAKAuB,MAAAA,MAAM,CAACC,MAAP,CAAcJ,UAAd,EAA0BE,gBAA1B;AACD;AACF;;AAED,SAAOF,UAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// TODO add documentation and tests\n\nfunction getTimeSeriesForStream({metadata, streamName, stream}) {\n  // See if we have some metadata for this metric\n  if (!metadata || metadata.nograph) {\n    return null;\n  }\n\n  const mapper = metadata.valueMap;\n  const scale = metadata.scale || 1;\n  const getX = d => d.time;\n  const getY = mapper ? d => mapper[d.variable] : d => d.variable * scale;\n\n  const sampleDatum = stream[0];\n  if (!sampleDatum || !Number.isFinite(getY(sampleDatum))) {\n    return null;\n  }\n\n  const metrics = {};\n  metrics[streamName] = {\n    id: streamName,\n    ...metadata,\n    getX,\n    getY,\n    title: metadata.title || streamName,\n    unit: metadata.unit || '',\n    valueSeries: stream\n  };\n\n  return metrics;\n}\n\n/**\n * Get the time series for given streams\n * @param logMetadata {object} log metadata\n * @param streams array of streams data\n * @returns {Array} array of time series data\n */\nexport function getTimeSeries({metadata = {}, streams}) {\n  const timeSeries = {};\n  for (const streamName in streams) {\n    // if there is ui configuration for this stream\n    if (streams.hasOwnProperty(streamName) && metadata.streams && metadata.streams[streamName]) {\n      const stream = streams[streamName];\n      const streamTimeSeries = getTimeSeriesForStream({\n        metadata: metadata.streams[streamName],\n        streamName,\n        stream\n      });\n      Object.assign(timeSeries, streamTimeSeries);\n    }\n  }\n\n  return timeSeries;\n}\n"],"file":"metrics-helper.js"}