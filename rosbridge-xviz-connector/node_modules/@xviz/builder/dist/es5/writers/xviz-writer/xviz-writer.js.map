{"version":3,"sources":["../../../../src/writers/xviz-writer/xviz-writer.js"],"names":["frameName","index","FileSink","fs","module","require","path","scope","name","data","xvizMetadataFilename","join","options","flag","writeFileSync","XVIZWriter","dataSink","envelope","binary","json","draco","sink","frameTimings","frames","Map","wroteFrameIndex","xvizDirectory","xvizMetadata","_saveTimestamp","type","flattenArrays","writeSync","JSON","stringify","frameIndex","xvizFrame","Error","DracoEncoder","DracoDecoder","numberRounder","k","value","Number","toFixed","jsonXVIZFrame","startTime","endTime","frameTimes","Array","from","keys","sort","a","b","timing","forEach","limit","length","push","get","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","set"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {writeBinaryXVIZtoFile} from './xviz-binary-writer';\nimport {xvizConvertJson} from './xviz-json-encoder.js';\nimport {DracoEncoder, DracoDecoder} from '@loaders.gl/draco';\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst frameName = index => `${index + 2}-frame`;\n\n/**\n * Class to abstract away file IO\n */\nclass FileSink {\n  constructor() {\n    this.fs = module.require('fs');\n    this.path = module.require('path');\n  }\n\n  writeSync(scope, name, data) {\n    const xvizMetadataFilename = this.path.join(scope, name);\n    const options = {\n      flag: 'w'\n    };\n    this.fs.writeFileSync(xvizMetadataFilename, data, options);\n  }\n}\n\nexport default class XVIZWriter {\n  constructor(options = {}) {\n    const {\n      dataSink = new FileSink(),\n      envelope = true,\n      binary = true,\n      json = false,\n      draco = false\n    } = options;\n    this.sink = dataSink;\n    this.frameTimings = {\n      frames: new Map()\n    };\n    this.wroteFrameIndex = null;\n    this.options = {envelope, binary, json, draco};\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizDirectory, xvizMetadata) {\n    this._saveTimestamp(xvizMetadata);\n\n    if (this.options.envelope) {\n      xvizMetadata = {type: 'xviz/metadata', data: xvizMetadata};\n    }\n\n    if (this.options.binary) {\n      const options = {\n        flattenArrays: false\n      };\n\n      writeBinaryXVIZtoFile(this.sink, xvizDirectory, '1-frame', xvizMetadata, options);\n    }\n\n    if (this.options.json) {\n      this.sink.writeSync(xvizDirectory, '1-frame.json', JSON.stringify(xvizMetadata));\n    }\n  }\n\n  writeFrame(xvizDirectory, frameIndex, xvizFrame) {\n    if (this.wroteFrameIndex !== null) {\n      throw new Error(\n        `writeFrame() was called after writeFrameIndex().  The index was written with last frame of ${frameName(\n          this.wroteFrameIndex - 1\n        )}`\n      );\n    }\n\n    this._saveTimestamp(xvizFrame, frameIndex);\n\n    if (this.options.envelope) {\n      xvizFrame = {type: 'xviz/state_update', data: xvizFrame};\n    }\n\n    if (this.options.binary) {\n      const options = {\n        flattenArrays: false\n      };\n\n      if (this.options.draco) {\n        options.DracoEncoder = DracoEncoder;\n        options.DracoDecoder = DracoDecoder;\n      }\n\n      writeBinaryXVIZtoFile(this.sink, xvizDirectory, frameName(frameIndex), xvizFrame, options);\n    }\n\n    if (this.options.json) {\n      // Limit precision to save space\n      const numberRounder = (k, value) => {\n        if (typeof value === 'number') {\n          return Number(value.toFixed(10));\n        }\n\n        return value;\n      };\n\n      const jsonXVIZFrame = xvizConvertJson(xvizFrame);\n      this.sink.writeSync(\n        xvizDirectory,\n        `${frameName(frameIndex)}.json`,\n        JSON.stringify(jsonXVIZFrame, numberRounder)\n      );\n    }\n  }\n\n  writeFrameIndex(xvizDirectory) {\n    const {startTime, endTime, frames} = this.frameTimings;\n    const frameTimings = {};\n\n    if (startTime) {\n      frameTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      frameTimings.endTime = endTime;\n    }\n\n    // Sort frames by index before writing out as an array\n    const frameTimes = Array.from(frames.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    frameTimes.forEach((value, index) => {\n      // Value is two greater than frame index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so frame data starts at 2\n        throw new Error(\n          `Error writing time index file. Frames are missing between ${limit + 2} and ${value + 2}`\n        );\n      }\n\n      timing.push(frames.get(value));\n    });\n    frameTimings.timing = timing;\n\n    this.sink.writeSync(xvizDirectory, '0-frame.json', JSON.stringify(frameTimings));\n    this.wroteFrameIndex = timing.length;\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.frameTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.frameTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.frameTimings.frames.set(index, [min, max, index, frameName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n}\n"],"file":"xviz-writer.js"}