function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { withTheme } from '../shared/theme';
import { Table } from './table';
import TreeTableRow from './tree-table-row';

class TreeTable extends Table {
  constructor(props) {
    super(props);

    _defineProperty(this, "_isRowExpanded", id => {
      return this.state.expanded[id];
    });

    _defineProperty(this, "_toggleRowExpansion", (id, rootId) => {
      const _this$state = this.state,
            expanded = _this$state.expanded,
            rows = _this$state.rows;
      expanded[id] = !expanded[id];
      const rootRowIndex = rows.findIndex(row => row.id === rootId);

      this._cache.clear(rootRowIndex);

      this._list.recomputeRowHeights(rootRowIndex);
    });

    this.state.expanded = {};
  }

  _renderRow(_ref) {
    let key = _ref.key,
        index = _ref.index,
        style = _ref.style;
    const _this$props = this.props,
          indentSize = _this$props.indentSize,
          renderCell = _this$props.renderCell,
          theme = _this$props.theme,
          userStyle = _this$props.style;
    const row = this.state.rows[index];
    return React.createElement(TreeTableRow, {
      key: key,
      id: row.id,
      index: index,
      data: row,
      style: style,
      theme: theme,
      userStyle: userStyle,
      indentSize: indentSize,
      renderCell: renderCell,
      getIsExpanded: this._isRowExpanded,
      toggleExpansion: this._toggleRowExpansion,
      columns: this.state.columns
    });
  }

}

_defineProperty(TreeTable, "propTypes", _objectSpread({}, Table.propTypes, {
  indentSize: PropTypes.number
}));

_defineProperty(TreeTable, "defaultProps", _objectSpread({}, Table.defaultProps, {
  indentSize: 12
}));

export default withTheme(TreeTable);
//# sourceMappingURL=tree-table.js.map