function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * This component detects resize of divs using
 * react-virtualized's AutoSizer
 * with some enhancements
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';
import debounce from 'debounce';

const noop = () => null;

export default class SizeSensor extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_onResize", size => {
      if (this.resize) {
        this.resize(size);
      } else if (this.props.onResize) {
        const _this$props = this.props,
              onResize = _this$props.onResize,
              debounceTime = _this$props.debounceTime; // invoke callback immediately the first time

        onResize(size); // set up debounce for subsequent resize events

        this.resize = debounceTime > 0 ? debounce(onResize, debounceTime) : onResize;
      }
    });
  }

  render() {
    return React.createElement(AutoSizer, {
      onResize: this._onResize
    }, this.props.children || noop);
  }

}

_defineProperty(SizeSensor, "propTypes", {
  debounceTime: PropTypes.number
});
//# sourceMappingURL=index.js.map