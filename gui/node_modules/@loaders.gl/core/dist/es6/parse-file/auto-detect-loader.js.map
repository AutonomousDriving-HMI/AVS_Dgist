{"version":3,"sources":["../../../src/parse-file/auto-detect-loader.js"],"names":["EXT_PATTERN","autoDetectLoader","url","text","loaders","extension","match","length","substr","toLowerCase","loader","name","testText"],"mappings":"AAAA,MAAMA,WAAW,GAAG,SAApB,C,CAEA;AACA;;AACA,OAAO,SAASC,gBAAT,GAAmD;AAAA,MAAzBC,GAAyB,uEAAnB,EAAmB;AAAA,MAAfC,IAAe;AAAA,MAATC,OAAS;AACxD;AACA,MAAIC,SAAS,GAAGH,GAAG,CAACI,KAAJ,CAAUN,WAAV,KAA0BE,GAA1C;;AACA,MAAIG,SAAS,CAACE,MAAV,IAAoBF,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAzC,EAA8C;AAC5CA,IAAAA,SAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,EAAZ;AACD;;AAED,OAAK,MAAMC,MAAX,IAAqBN,OAArB,EAA8B;AAC5B,QAAIM,MAAM,CAACL,SAAP,KAAqBA,SAAzB,EAAoC;AAClC,aAAOK,MAAP;AACD;AACF;;AAED,OAAK,MAAMA,MAAX,IAAqBN,OAArB,EAA8B;AAC5B,QAAIM,MAAM,CAACC,IAAP,CAAYF,WAAZ,KAA4BJ,SAAhC,EAA2C;AACzC,aAAOK,MAAP;AACD;AACF;;AAED,OAAK,MAAMA,MAAX,IAAqBN,OAArB,EAA8B;AAC5B,QAAIM,MAAM,CAACE,QAAP,IAAmBF,MAAM,CAACE,QAAP,CAAgBT,IAAhB,CAAvB,EAA8C;AAC5C,aAAOO,MAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["const EXT_PATTERN = /[^\\.]+$/;\n\n// Find a loader that works for extension/text\n// Search the loaders array argument for a loader that matches extension or text\nexport function autoDetectLoader(url = '', text, loaders) {\n  // Get extension without\n  let extension = url.match(EXT_PATTERN) || url;\n  if (extension.length && extension[0] === '.') {\n    extension = extension.substr(1).toLowerCase();\n  }\n\n  for (const loader of loaders) {\n    if (loader.extension === extension) {\n      return loader;\n    }\n  }\n\n  for (const loader of loaders) {\n    if (loader.name.toLowerCase === extension) {\n      return loader;\n    }\n  }\n\n  for (const loader of loaders) {\n    if (loader.testText && loader.testText(text)) {\n      return loader;\n    }\n  }\n\n  return null;\n}\n"],"file":"auto-detect-loader.js"}