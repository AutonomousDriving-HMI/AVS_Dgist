"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xvizConvertJson = xvizConvertJson;

var _base64Js = _interopRequireDefault(require("base64-js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Recursively walk object performing the following conversions
// - primitives with typed array fields are turned into arrays
// - primtives of type image have the data turned into a base64 string

/* eslint-disable complexity */
function xvizConvertJson(object, keyName) {
  if (Array.isArray(object)) {
    return object.map(function (element) {
      return xvizConvertJson(element, keyName);
    });
  } // Typed arrays become normal arrays
  // TODO: no way to know if this should be 3 or 4


  if (ArrayBuffer.isView(object)) {
    // Return normal arrays
    if (!(keyName === 'vertices' || keyName === 'points')) {
      return Array.from(object);
    } // For primitives with key's 'vertices', we force nested arrays.
    // TODO(twojtasz): Support flat arrays


    var length = object.length;

    if (length % 3 !== 0) {
      throw new Error('TypeArray conversion failure. The array is expect to be divisible by 3');
    } // Construct points from flattened array


    var newObject = [];
    var count = length / 3;

    for (var i = 0; i < count; i++) {
      newObject.push(Array.from(object.slice(i * 3, i * 3 + 3)));
    }

    return newObject;
  }

  if (object !== null && _typeof(object) === 'object') {
    // Handle XVIZ Image Primitive
    var properties = Object.keys(object);

    if (properties.includes('data') && keyName === 'images') {
      return _objectSpread({}, object, {
        data: _base64Js.default.fromByteArray(object.data)
      });
    } // Handle all other objects


    var _newObject = {};

    for (var key in object) {
      _newObject[key] = xvizConvertJson(object[key], key, keyName);
    }

    return _newObject;
  }

  return object;
}
/* eslint-enable complexity */
//# sourceMappingURL=xviz-json-encoder.js.map