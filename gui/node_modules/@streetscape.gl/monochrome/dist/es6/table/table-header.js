function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import AutoSizer from '../shared/autosizer';
import { HeaderContainer, HeaderCell, SortIcon } from './styled-components';
const SORT = {
  NONE: 0,
  ASCEND: 1,
  DESCEND: 2
};
export default class TableHeader extends PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "_onResize", () => {
      const columns = this.state.columns;
      columns.map((col, colIndex) => {
        const ref = this._cells[colIndex];

        if (ref) {
          col.width = ref.clientWidth;
        }
      });
      this.props.onResize(columns);
    });

    _defineProperty(this, "_sortColumn", index => {
      const columns = this.state.columns;
      const sortType = columns[index].sort === SORT.ASCEND ? SORT.DESCEND : SORT.ASCEND;
      columns.forEach((col, colIndex) => {
        col.sort = colIndex === index ? sortType : SORT.NONE;
      });
      const multiplier = sortType === SORT.ASCEND ? 1 : -1;

      const sortFunc = (row1, row2) => {
        return row1.data[index] <= row2.data[index] ? -multiplier : multiplier;
      };

      this.props.onSort(sortFunc); // Trigger rerender

      this.forceUpdate();
    });

    _defineProperty(this, "_renderColumn", (column, colIndex) => {
      const _this$props = this.props,
            renderHeader = _this$props.renderHeader,
            theme = _this$props.theme,
            userStyle = _this$props.userStyle;
      const styleProps = {
        theme,
        isAscending: column.sort === SORT.ASCEND,
        isDescending: column.sort === SORT.DESCEND
      };
      let icon = null;

      if (styleProps.isAscending) {
        icon = userStyle.iconAscending || '↑';
      } else if (styleProps.isDescending) {
        icon = userStyle.iconDescending || '↓';
      }

      return React.createElement(HeaderCell, _extends({}, styleProps, {
        userStyle: userStyle.headerCell,
        style: {
          width: column.defaultWidth
        },
        key: colIndex,
        index: colIndex,
        ref: cell => {
          this._cells[colIndex] = cell;
        },
        onClick: () => this._sortColumn(colIndex)
      }), renderHeader({
        column: column.srcObject,
        columnIndex: colIndex
      }), icon && React.createElement(SortIcon, _extends({}, styleProps, {
        userStyle: userStyle.sort
      }), icon));
    });

    this.state = {
      columns: this._formatColumns(props.columns)
    };
    this._cells = [];
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (this.props.columns !== nextProps.columns) {
      this.setState({
        columns: this._formatColumns(nextProps.columns)
      });
    }
  }

  _formatColumns(columns) {
    let totalWeight = 0;
    const weights = [];
    columns.forEach((col, colIndex) => {
      let weight = 1;

      if (colIndex === 0) {
        weight++;
      }

      if (col.type === 'string') {
        weight++;
      }

      weights[colIndex] = weight;
      totalWeight += weight;
    });
    return columns.map((col, colIndex) => ({
      srcObject: col,
      name: col.name,
      type: col.type,
      sort: SORT.NONE,
      defaultWidth: `${100 / totalWeight * weights[colIndex]}%`
    }));
  }

  render() {
    const _this$props2 = this.props,
          theme = _this$props2.theme,
          userStyle = _this$props2.userStyle;
    const columns = this.state.columns;
    return React.createElement(HeaderContainer, {
      theme: theme,
      userStyle: userStyle.header
    }, columns.map(this._renderColumn), React.createElement(AutoSizer, {
      onResize: this._onResize,
      debounceTime: 200
    }));
  }

}

_defineProperty(TableHeader, "propTypes", {
  columns: PropTypes.arrayOf(PropTypes.object),
  renderHeader: PropTypes.func,
  onSort: PropTypes.func,
  onResize: PropTypes.func
});
//# sourceMappingURL=table-header.js.map