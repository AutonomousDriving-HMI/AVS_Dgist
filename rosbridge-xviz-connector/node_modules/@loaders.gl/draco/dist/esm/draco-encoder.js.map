{"version":3,"sources":["../../src/draco-encoder.js"],"names":["draco3d","require","DEFAULT_ENCODING_OPTIONS","method","speed","quantization","POSITION","noop","dracoInt8ArrayToArrayBuffer","dracoData","byteLength","size","outputBuffer","ArrayBuffer","outputData","Int8Array","i","GetValue","DRACOEncoder","opts","dracoEncoderModule","createEncoderModule","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","setOptions","Object","assign","log","destroyEncodedObject","object","destroy","SetSpeedOptions","dracoMethod","SetEncodingMethod","attribute","bits","dracoPosition","SetAttributeQuantization","attributes","dracoPointCloud","_createDracoPointCloud","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoMesh","_createDracoMesh","EncodeMeshToDracoBuffer","Mesh","positions","_getPositionAttribute","vertexCount","length","attributeName","_addAttributeToMesh","error","PointCloud","isView","dracoAttributeType","_getDracoAttributeType","numFaces","AddFacesToMesh","constructor","name","AddInt8Attribute","AddInt16Attribute","AddInt32Attribute","AddUInt8Attribute","AddUInt16Attribute","AddUInt32Attribute","AddFloatAttribute","toLowerCase","NORMAL","COLOR","TEX_COORD","GENERIC","dracoType"],"mappings":";;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAMC,wBAAwB,GAAG;AAC/BC,EAAAA,MAAM,EAAE,2BADuB;AAE/BC,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFwB;AAG/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AADE;AAHiB,CAAjC;;AAQA,SAASC,IAAT,GAAgB,CAAE,C,CAElB;;;AACA,SAASC,2BAAT,CAAqCC,SAArC,EAAgD;AAC9C,MAAMC,UAAU,GAAGD,SAAS,CAACE,IAAV,EAAnB;AACA,MAAMC,YAAY,GAAG,IAAIC,WAAJ,CAAgBH,UAAhB,CAArB;AACA,MAAMI,UAAU,GAAG,IAAIC,SAAJ,CAAcH,YAAd,CAAnB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgC,EAAEM,CAAlC,EAAqC;AACnCF,IAAAA,UAAU,CAACE,CAAD,CAAV,GAAgBP,SAAS,CAACQ,QAAV,CAAmBD,CAAnB,CAAhB;AACD;;AACD,SAAOJ,YAAP;AACD;AAED;;;;;;;IAKqBM,Y;;;AACnB,0BAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACrB,SAAKC,kBAAL,GAA0BpB,OAAO,CAACqB,mBAAR,CAA4B,EAA5B,CAA1B;AACA,SAAKC,YAAL,GAAoB,IAAI,KAAKF,kBAAL,CAAwBG,OAA5B,EAApB;AACA,SAAKC,gBAAL,GAAwB,IAAI,KAAKJ,kBAAL,CAAwBK,WAA5B,EAAxB;AACA,SAAKC,UAAL,CAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB1B,wBAAlB,EAA4CiB,IAA5C,CAAhB;AAEA,SAAKU,GAAL,GAAWV,IAAI,CAACU,GAAL,IAAYtB,IAAvB;AACD;;;;8BAES;AACR,WAAKuB,oBAAL,CAA0B,KAAKN,gBAA/B;AACA,WAAKM,oBAAL,CAA0B,KAAKR,YAA/B;AACA,WAAKE,gBAAL,GAAwB,IAAxB;AACA,WAAKF,YAAL,GAAoB,IAApB;AACA,WAAKF,kBAAL,GAA0B,IAA1B;AACD;;;yCAEoBW,M,EAAQ;AAC3B,UAAIA,MAAJ,EAAY;AACV,aAAKX,kBAAL,CAAwBY,OAAxB,CAAgCD,MAAhC;AACD;AACF,K,CAED;;;;iCACsB;AAAA,UAAXZ,IAAW,uEAAJ,EAAI;;AACpB,UAAI,WAAWA,IAAf,EAAqB;AAAA;;AACnB,mCAAKG,YAAL,EAAkBW,eAAlB,8CAAqCd,IAAI,CAACf,KAA1C;AACD;;AACD,UAAI,YAAYe,IAAhB,EAAsB;AACpB,YAAMe,WAAW,GAAG,KAAKd,kBAAL,CAAwBD,IAAI,CAAChB,MAA7B,CAApB,CADoB,CAEpB;;AACA,aAAKmB,YAAL,CAAkBa,iBAAlB,CAAoCD,WAApC;AACD;;AACD,UAAI,kBAAkBf,IAAtB,EAA4B;AAC1B,aAAK,IAAMiB,SAAX,IAAwBjB,IAAI,CAACd,YAA7B,EAA2C;AACzC,cAAMgC,IAAI,GAAGlB,IAAI,CAACd,YAAL,CAAkB+B,SAAlB,CAAb;AACA,cAAME,aAAa,GAAG,KAAKlB,kBAAL,CAAwBgB,SAAxB,CAAtB;AACA,eAAKd,YAAL,CAAkBiB,wBAAlB,CAA2CD,aAA3C,EAA0DD,IAA1D;AACD;AACF;AACF;;;qCAEgBG,U,EAAY;AAC3B;AACA,UAAMC,eAAe,GAAG,KAAKC,sBAAL,CAA4BF,UAA5B,CAAxB;;AAEA,UAAM/B,SAAS,GAAG,IAAI,KAAKW,kBAAL,CAAwBuB,cAA5B,EAAlB;;AAEA,UAAI;AACF,YAAMC,UAAU,GACd,KAAKtB,YAAL,CAAkBuB,6BAAlB,CAAgDJ,eAAhD,EAAiE,KAAjE,EAAwEhC,SAAxE,CADF;;AAGA,YAAI,EAAEmC,UAAU,GAAG,CAAf,CAAJ,EAAuB;AACrB,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,aAAKjB,GAAL,yBAA0BY,eAAe,CAACM,UAAhB,EAA1B,mCACSN,eAAe,CAACO,cAAhB,EADT,8BAC6DJ,UAD7D;AAGA,eAAOpC,2BAA2B,CAACC,SAAD,CAAlC;AAED,OAbD,SAaU;AACR,aAAKqB,oBAAL,CAA0BrB,SAA1B;AACA,aAAKqB,oBAAL,CAA0BW,eAA1B;AACD;AACF;;;+BAEUD,U,EAAY;AACrB;AACA,UAAMS,SAAS,GAAG,KAAKC,gBAAL,CAAsBV,UAAtB,CAAlB;;AAEA,UAAM/B,SAAS,GAAG,IAAI,KAAKW,kBAAL,CAAwBuB,cAA5B,EAAlB;;AAEA,UAAI;AACF,YAAMC,UAAU,GAAG,KAAKtB,YAAL,CAAkB6B,uBAAlB,CAA0CF,SAA1C,EAAqDxC,SAArD,CAAnB;;AACA,YAAImC,UAAU,IAAI,CAAlB,EAAqB;AACnB,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,aAAKjB,GAAL,yBAA0BoB,SAAS,CAACF,UAAV,EAA1B,mCACSE,SAAS,CAACD,cAAV,EADT,8BACuDJ,UADvD;AAGA,eAAOpC,2BAA2B,CAACC,SAAD,CAAlC;AAED,OAXD,SAWU;AACR,aAAKqB,oBAAL,CAA0BrB,SAA1B;AACA,aAAKqB,oBAAL,CAA0BmB,SAA1B;AACD;AACF;;;qCAEgBT,U,EAAY;AAC3B,UAAMS,SAAS,GAAG,IAAI,KAAK7B,kBAAL,CAAwBgC,IAA5B,EAAlB;;AAEA,UAAI;AACF,YAAMC,SAAS,GAAG,KAAKC,qBAAL,CAA2Bd,UAA3B,CAAlB;;AACA,YAAI,CAACa,SAAL,EAAgB;AACd,gBAAM,IAAIP,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMS,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAvC;;AAEA,aAAK,IAAMC,aAAX,IAA4BjB,UAA5B,EAAwC;AACtC,cAAMJ,SAAS,GAAGI,UAAU,CAACiB,aAAD,CAA5B;;AACA,eAAKC,mBAAL,CAAyBT,SAAzB,EAAoCQ,aAApC,EAAmDrB,SAAnD,EAA8DmB,WAA9D;AACD;AAEF,OAZD,CAYE,OAAOI,KAAP,EAAc;AACd,aAAK7B,oBAAL,CAA0BmB,SAA1B;AACA,cAAMU,KAAN;AACD;;AAED,aAAOV,SAAP;AACD;;;2CAEsBT,U,EAAY;AACjC,UAAMC,eAAe,GAAG,IAAI,KAAKrB,kBAAL,CAAwBwC,UAA5B,EAAxB;;AAEA,UAAI;AACF,YAAMP,SAAS,GAAG,KAAKC,qBAAL,CAA2Bd,UAA3B,CAAlB;;AACA,YAAI,CAACa,SAAL,EAAgB;AACd,gBAAM,IAAIP,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMS,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAvC;;AAEA,aAAK,IAAMC,aAAX,IAA4BjB,UAA5B,EAAwC;AACtC,cAAMJ,SAAS,GAAGI,UAAU,CAACiB,aAAD,CAA5B;;AACA,eAAKC,mBAAL,CAAyBjB,eAAzB,EAA0CgB,aAA1C,EAAyDrB,SAAzD,EAAoEmB,WAApE;AACD;AAEF,OAZD,CAYE,OAAOI,KAAP,EAAc;AACd,aAAK7B,oBAAL,CAA0BW,eAA1B;AACA,cAAMkB,KAAN;AACD;;AAED,aAAOlB,eAAP;AACD;;;wCAEmBQ,S,EAAWQ,a,EAAerB,S,EAAWmB,W,EAAa;AACpE,UAAI,CAAC1C,WAAW,CAACgD,MAAZ,CAAmBzB,SAAnB,CAAL,EAAoC;AAClC;AACD;;AAED,UAAM0B,kBAAkB,GAAG,KAAKC,sBAAL,CAA4BN,aAA5B,EAA2CrB,SAA3C,CAA3B;;AACA,UAAMzB,IAAI,GAAGyB,SAAS,CAACoB,MAAV,GAAmBD,WAAhC;;AAEA,UAAIO,kBAAkB,KAAK,SAA3B,EAAsC;AACpC,YAAME,QAAQ,GAAG5B,SAAS,CAACoB,MAAV,GAAmB,CAApC;AACA,aAAK3B,GAAL,4BAA6B4B,aAA7B,oBAAoDO,QAApD;AACA,aAAKxC,gBAAL,CAAsByC,cAAtB,CAAqChB,SAArC,EAAgDe,QAAhD,EAA0D5B,SAA1D;AACA;AACD;;AAED,WAAKP,GAAL,4BAA6B4B,aAA7B,oBAAoD9C,IAApD;;AAEA,cAAQyB,SAAS,CAAC8B,WAAV,CAAsBC,IAA9B;AACA,aAAK,WAAL;AACE,eAAK3C,gBAAL,CAAsB4C,gBAAtB,CACEnB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAGA;;AAEF,aAAK,YAAL;AACE,eAAKZ,gBAAL,CAAsB6C,iBAAtB,CACEpB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAGA;;AAEF,aAAK,YAAL;AACE,eAAKZ,gBAAL,CAAsB8C,iBAAtB,CACErB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAGA;;AAEF,aAAK,YAAL;AACA,aAAK,mBAAL;AACE,eAAKZ,gBAAL,CAAsB+C,iBAAtB,CACEtB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAGA;;AAEF,aAAK,aAAL;AACE,eAAKZ,gBAAL,CAAsBgD,kBAAtB,CACEvB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAGA;;AAEF,aAAK,aAAL;AACE,eAAKZ,gBAAL,CAAsBiD,kBAAtB,CACExB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAGA;;AAEF,aAAK,cAAL;AACA;AACE,eAAKZ,gBAAL,CAAsBkD,iBAAtB,CACEzB,SADF,EACaa,kBADb,EACiCP,WADjC,EAC8C5C,IAD9C,EACoDyB,SADpD;AAxCF;AA4CD,K,CAED;AACA;;;;2CACuBqB,a,EAAerB,S,EAAW;AAC/C,cAAQqB,aAAa,CAACkB,WAAd,EAAR;AACA,aAAK,SAAL;AACE,iBAAO,SAAP;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACA,aAAK,UAAL;AACE,iBAAO,KAAKvD,kBAAL,CAAwBd,QAA/B;;AACF,aAAK,QAAL;AACA,aAAK,SAAL;AACE,iBAAO,KAAKc,kBAAL,CAAwBwD,MAA/B;;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACE,iBAAO,KAAKxD,kBAAL,CAAwByD,KAA/B;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACE,iBAAO,KAAKzD,kBAAL,CAAwB0D,SAA/B;;AACF;AACE,iBAAO,KAAK1D,kBAAL,CAAwB2D,OAA/B;AAjBF;AAmBD;;;0CAEqBvC,U,EAAY;AAChC,WAAK,IAAMiB,aAAX,IAA4BjB,UAA5B,EAAwC;AACtC,YAAMJ,SAAS,GAAGI,UAAU,CAACiB,aAAD,CAA5B;;AACA,YAAMuB,SAAS,GAAG,KAAKjB,sBAAL,CAA4BN,aAA5B,EAA2CrB,SAA3C,CAAlB;;AACA,YAAI4C,SAAS,KAAK,KAAK5D,kBAAL,CAAwBd,QAA1C,EAAoD;AAClD,iBAAO8B,SAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;;;;SAzOkBlB,Y","sourcesContent":["// This code is based on example code from the DRACO repository\n\n// Copyright 2017 The Draco Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the 'License');\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS IS' BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nconst draco3d = require('draco3d');\n\nconst DEFAULT_ENCODING_OPTIONS = {\n  method: 'MESH_EDGEBREAKER_ENCODING',\n  speed: [5, 5],\n  quantization: {\n    POSITION: 10\n  }\n};\n\nfunction noop() {}\n\n// Copy encoded data to buffer\nfunction dracoInt8ArrayToArrayBuffer(dracoData) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/* Encoder API:\nhttps://github.com/google/draco/blob/master/src/draco/javascript/emscripten/draco_web_encoder.idl\n   Example:\nhttps://github.com/google/draco/blob/master/javascript/npm/draco3d/draco_nodejs_example.js\n */\nexport default class DRACOEncoder {\n  constructor(opts = {}) {\n    this.dracoEncoderModule = draco3d.createEncoderModule({});\n    this.dracoEncoder = new this.dracoEncoderModule.Encoder();\n    this.dracoMeshBuilder = new this.dracoEncoderModule.MeshBuilder();\n    this.setOptions(Object.assign({}, DEFAULT_ENCODING_OPTIONS, opts));\n\n    this.log = opts.log || noop;\n  }\n\n  destroy() {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.dracoMeshBuilder = null;\n    this.dracoEncoder = null;\n    this.dracoEncoderModule = null;\n  }\n\n  destroyEncodedObject(object) {\n    if (object) {\n      this.dracoEncoderModule.destroy(object);\n    }\n  }\n\n  // Set encoding options.\n  setOptions(opts = {}) {\n    if ('speed' in opts) {\n      this.dracoEncoder.SetSpeedOptions(...opts.speed);\n    }\n    if ('method' in opts) {\n      const dracoMethod = this.dracoEncoderModule[opts.method];\n      // if (dracoMethod === undefined) {}\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in opts) {\n      for (const attribute in opts.quantization) {\n        const bits = opts.quantization[attribute];\n        const dracoPosition = this.dracoEncoderModule[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  encodePointCloud(attributes) {\n    // Build a `DracoPointCloud` from the input data\n    const dracoPointCloud = this._createDracoPointCloud(attributes);\n\n    const dracoData = new this.dracoEncoderModule.DracoInt8Array();\n\n    try {\n      const encodedLen =\n        this.dracoEncoder.EncodePointCloudToDracoBuffer(dracoPointCloud, false, dracoData);\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  encodeMesh(attributes) {\n    // Build a `DracoMesh` from the input data\n    const dracoMesh = this._createDracoMesh(attributes);\n\n    const dracoData = new this.dracoEncoderModule.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  _createDracoMesh(attributes) {\n    const dracoMesh = new this.dracoEncoderModule.Mesh();\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n      }\n\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  _createDracoPointCloud(attributes) {\n    const dracoPointCloud = new this.dracoEncoderModule.PointCloud();\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        this._addAttributeToMesh(dracoPointCloud, attributeName, attribute, vertexCount);\n      }\n\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  _addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return;\n    }\n\n    const dracoAttributeType = this._getDracoAttributeType(attributeName, attribute);\n    const size = attribute.length / vertexCount;\n\n    if (dracoAttributeType === 'indices') {\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n      this.dracoMeshBuilder.AddFacesToMesh(dracoMesh, numFaces, attribute);\n      return;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    switch (attribute.constructor.name) {\n    case 'Int8Array':\n      this.dracoMeshBuilder.AddInt8Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Int16Array':\n      this.dracoMeshBuilder.AddInt16Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Int32Array':\n      this.dracoMeshBuilder.AddInt32Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n      this.dracoMeshBuilder.AddUInt8Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Uint16Array':\n      this.dracoMeshBuilder.AddUInt16Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Uint32Array':\n      this.dracoMeshBuilder.AddUInt32Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Float32Array':\n    default:\n      this.dracoMeshBuilder.AddFloatAttribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n    }\n  }\n\n  // DRACO can compress attributes of know type better\n  // TODO - expose an attribute type map?\n  _getDracoAttributeType(attributeName, attribute) {\n    switch (attributeName.toLowerCase()) {\n    case 'indices':\n      return 'indices';\n    case 'position':\n    case 'positions':\n    case 'vertices':\n      return this.dracoEncoderModule.POSITION;\n    case 'normal':\n    case 'normals':\n      return this.dracoEncoderModule.NORMAL;\n    case 'color':\n    case 'colors':\n      return this.dracoEncoderModule.COLOR;\n    case 'texCoord':\n    case 'texCoords':\n      return this.dracoEncoderModule.TEX_COORD;\n    default:\n      return this.dracoEncoderModule.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName, attribute);\n      if (dracoType === this.dracoEncoderModule.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"draco-encoder.js"}