{"version":3,"sources":["../../../src/builders/xviz-builder.js"],"names":["defaultValidateWarn","console","warn","defaultValidateError","error","XVIZBuilder","metadata","disableStreams","validateWarn","validateError","_validator","XVIZValidator","_streamBuilder","_poseBuilder","XVIZPoseBuilder","validator","_variablesBuilder","XVIZVariableBuilder","_primitivesBuilder","XVIZPrimitiveBuilder","_futureInstanceBuilder","XVIZFutureInstanceBuilder","_uiPrimitivesBuilder","XVIZUIPrimitiveBuilder","_timeSeriesBuilder","XVIZTimeSeriesBuilder","streamId","PRIMARY_POSE_STREAM","stream","timestamp","_timestamp","getData","poses","primitives","futures","variables","timeSeries","uiPrimitives","data","future_instances","time_series","ui_primitives","frame","update_type","updates"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Note: XVIZ data structures use snake_case\n/* eslint-disable camelcase */\nimport XVIZPoseBuilder from './xviz-pose-builder';\nimport XVIZPrimitiveBuilder from './xviz-primitive-builder';\nimport XVIZFutureInstanceBuilder from './xviz-future-instance-builder';\nimport XVIZUIPrimitiveBuilder from './xviz-ui-primitive-builder';\nimport XVIZTimeSeriesBuilder from './xviz-time-series-builder';\nimport XVIZValidator from './xviz-validator';\nimport XVIZVariableBuilder from './xviz-variable-builder';\nimport {PRIMARY_POSE_STREAM} from './constant';\n\n/* global console */\n/* eslint-disable no-console */\nconst defaultValidateWarn = console.warn;\nconst defaultValidateError = console.error;\n/* eslint-enable no-console */\n\n// TODO: Builder could validate against stream metadata!\nexport default class XVIZBuilder {\n  constructor({\n    metadata = {},\n    disableStreams = [],\n    validateWarn = defaultValidateWarn,\n    validateError = defaultValidateError\n  } = {}) {\n    this._validator = new XVIZValidator({\n      validateWarn,\n      validateError\n    });\n\n    this.metadata = metadata;\n    this.disableStreams = disableStreams;\n\n    // Current streamBuilder\n    this._streamBuilder = null;\n\n    // Construct different builders\n    this._poseBuilder = new XVIZPoseBuilder({\n      metadata: this.metadata,\n      validator: this._validator\n    });\n    this._variablesBuilder = new XVIZVariableBuilder({\n      metadata: this.metadata,\n      validator: this._validator\n    });\n    this._primitivesBuilder = new XVIZPrimitiveBuilder({\n      metadata: this.metadata,\n      validator: this._validator\n    });\n    this._futureInstanceBuilder = new XVIZFutureInstanceBuilder({\n      metadata: this.metadata,\n      validator: this._validator\n    });\n    this._uiPrimitivesBuilder = new XVIZUIPrimitiveBuilder({\n      metadata: this.metadata,\n      validator: this._validator\n    });\n    this._timeSeriesBuilder = new XVIZTimeSeriesBuilder({\n      metadata: this.metadata,\n      validator: this._validator\n    });\n  }\n\n  pose(streamId = PRIMARY_POSE_STREAM) {\n    this._streamBuilder = this._poseBuilder.stream(streamId);\n    return this._streamBuilder;\n  }\n\n  variable(streamId) {\n    this._streamBuilder = this._variablesBuilder.stream(streamId);\n    return this._streamBuilder;\n  }\n\n  primitive(streamId) {\n    this._streamBuilder = this._primitivesBuilder.stream(streamId);\n    return this._streamBuilder;\n  }\n\n  futureInstance(streamId, timestamp) {\n    this._streamBuilder = this._futureInstanceBuilder.stream(streamId);\n    this._streamBuilder._timestamp(timestamp);\n    return this._streamBuilder;\n  }\n\n  uiPrimitive(streamId) {\n    this._streamBuilder = this._uiPrimitivesBuilder.stream(streamId);\n    return this._streamBuilder;\n  }\n\n  timeSeries(streamId) {\n    this._streamBuilder = this._timeSeriesBuilder.stream(streamId);\n    return this._streamBuilder;\n  }\n\n  /*\n  frame data:\n  {\n    update_type: 'snapshot',\n    updates: [{\n      timestamp,\n      poses: {'/vehicle-pose': {}, ...},\n      primitives: {},\n      variables: {},\n      future_instances: {}\n    }]\n  }\n   */\n  getFrame() {\n    const {poses} = this._poseBuilder.getData();\n\n    if (!poses || !poses[PRIMARY_POSE_STREAM]) {\n      this._validator.error(`Every frame requires a ${PRIMARY_POSE_STREAM} stream`);\n    }\n\n    const primitives = this._primitivesBuilder.getData();\n    const futures = this._futureInstanceBuilder.getData();\n    const variables = this._variablesBuilder.getData();\n    const timeSeries = this._timeSeriesBuilder.getData();\n    const uiPrimitives = this._uiPrimitivesBuilder.getData();\n\n    const data = {\n      timestamp: poses[PRIMARY_POSE_STREAM].timestamp,\n      poses\n    };\n\n    if (primitives) {\n      data.primitives = primitives;\n    }\n    if (futures) {\n      data.future_instances = futures;\n    }\n    if (variables) {\n      data.variables = variables;\n    }\n    if (timeSeries) {\n      data.time_series = timeSeries;\n    }\n    if (uiPrimitives) {\n      data.ui_primitives = uiPrimitives;\n    }\n\n    const frame = {\n      update_type: 'snapshot',\n      updates: [data]\n    };\n\n    return frame;\n  }\n\n  _reset() {\n    this._streamBuilder = null;\n  }\n}\n"],"file":"xviz-builder.js"}