function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Spinner from '../shared/spinner';
import { Tooltip } from '../shared/popover';
import { withTheme } from '../shared/theme';
import { CardContainer, CardTitle, ErrorMessage } from './styled-components';
/**
 * MetricCard places a chart in a container with padding, title,
 * selection marker etc
 */

var MetricCard =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(MetricCard, _PureComponent);

  function MetricCard() {
    _classCallCheck(this, MetricCard);

    return _possibleConstructorReturn(this, _getPrototypeOf(MetricCard).apply(this, arguments));
  }

  _createClass(MetricCard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          style = _this$props.style,
          error = _this$props.error,
          isLoading = _this$props.isLoading,
          className = _this$props.className,
          title = _this$props.title,
          description = _this$props.description;
      var styleProps = {
        theme: theme,
        hasError: Boolean(error),
        isLoading: isLoading
      };
      return React.createElement(CardContainer, _extends({
        className: className
      }, styleProps, {
        userStyle: style.wrapper
      }), title && React.createElement(CardTitle, _extends({}, styleProps, {
        userStyle: style.title
      }), React.createElement(Tooltip, {
        style: style.tooltip,
        content: description
      }, title)), !isLoading && !error && this.props.children, isLoading && React.createElement(Spinner, {
        style: style.spinner
      }), error && React.createElement(ErrorMessage, _extends({}, styleProps, {
        userStyle: style.error
      }), error));
    }
  }]);

  return MetricCard;
}(PureComponent);

_defineProperty(MetricCard, "propTypes", {
  className: PropTypes.string,
  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  description: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  style: PropTypes.object,
  error: PropTypes.string,
  isLoading: PropTypes.bool,
  children: PropTypes.element
});

_defineProperty(MetricCard, "defaultProps", {
  className: '',
  title: '',
  description: '',
  style: {},
  error: null,
  isLoading: false
});

export default withTheme(MetricCard);
//# sourceMappingURL=metric-card.js.map