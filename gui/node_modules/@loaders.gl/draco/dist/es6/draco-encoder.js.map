{"version":3,"sources":["../../src/draco-encoder.js"],"names":["draco3d","require","DEFAULT_ENCODING_OPTIONS","method","speed","quantization","POSITION","noop","dracoInt8ArrayToArrayBuffer","dracoData","byteLength","size","outputBuffer","ArrayBuffer","outputData","Int8Array","i","GetValue","DRACOEncoder","constructor","opts","dracoEncoderModule","createEncoderModule","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","setOptions","Object","assign","log","destroy","destroyEncodedObject","object","SetSpeedOptions","dracoMethod","SetEncodingMethod","attribute","bits","dracoPosition","SetAttributeQuantization","encodePointCloud","attributes","dracoPointCloud","_createDracoPointCloud","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","encodeMesh","dracoMesh","_createDracoMesh","EncodeMeshToDracoBuffer","Mesh","positions","_getPositionAttribute","vertexCount","length","attributeName","_addAttributeToMesh","error","PointCloud","isView","dracoAttributeType","_getDracoAttributeType","numFaces","AddFacesToMesh","name","AddInt8Attribute","AddInt16Attribute","AddInt32Attribute","AddUInt8Attribute","AddUInt16Attribute","AddUInt32Attribute","AddFloatAttribute","toLowerCase","NORMAL","COLOR","TEX_COORD","GENERIC","dracoType"],"mappings":"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","sourcesContent":["// This code is based on example code from the DRACO repository\n\n// Copyright 2017 The Draco Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the 'License');\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS IS' BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nconst draco3d = require('draco3d');\n\nconst DEFAULT_ENCODING_OPTIONS = {\n  method: 'MESH_EDGEBREAKER_ENCODING',\n  speed: [5, 5],\n  quantization: {\n    POSITION: 10\n  }\n};\n\nfunction noop() {}\n\n// Copy encoded data to buffer\nfunction dracoInt8ArrayToArrayBuffer(dracoData) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/* Encoder API:\nhttps://github.com/google/draco/blob/master/src/draco/javascript/emscripten/draco_web_encoder.idl\n   Example:\nhttps://github.com/google/draco/blob/master/javascript/npm/draco3d/draco_nodejs_example.js\n */\nexport default class DRACOEncoder {\n  constructor(opts = {}) {\n    this.dracoEncoderModule = draco3d.createEncoderModule({});\n    this.dracoEncoder = new this.dracoEncoderModule.Encoder();\n    this.dracoMeshBuilder = new this.dracoEncoderModule.MeshBuilder();\n    this.setOptions(Object.assign({}, DEFAULT_ENCODING_OPTIONS, opts));\n\n    this.log = opts.log || noop;\n  }\n\n  destroy() {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.dracoMeshBuilder = null;\n    this.dracoEncoder = null;\n    this.dracoEncoderModule = null;\n  }\n\n  destroyEncodedObject(object) {\n    if (object) {\n      this.dracoEncoderModule.destroy(object);\n    }\n  }\n\n  // Set encoding options.\n  setOptions(opts = {}) {\n    if ('speed' in opts) {\n      this.dracoEncoder.SetSpeedOptions(...opts.speed);\n    }\n    if ('method' in opts) {\n      const dracoMethod = this.dracoEncoderModule[opts.method];\n      // if (dracoMethod === undefined) {}\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in opts) {\n      for (const attribute in opts.quantization) {\n        const bits = opts.quantization[attribute];\n        const dracoPosition = this.dracoEncoderModule[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  encodePointCloud(attributes) {\n    // Build a `DracoPointCloud` from the input data\n    const dracoPointCloud = this._createDracoPointCloud(attributes);\n\n    const dracoData = new this.dracoEncoderModule.DracoInt8Array();\n\n    try {\n      const encodedLen =\n        this.dracoEncoder.EncodePointCloudToDracoBuffer(dracoPointCloud, false, dracoData);\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  encodeMesh(attributes) {\n    // Build a `DracoMesh` from the input data\n    const dracoMesh = this._createDracoMesh(attributes);\n\n    const dracoData = new this.dracoEncoderModule.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  _createDracoMesh(attributes) {\n    const dracoMesh = new this.dracoEncoderModule.Mesh();\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n      }\n\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  _createDracoPointCloud(attributes) {\n    const dracoPointCloud = new this.dracoEncoderModule.PointCloud();\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        this._addAttributeToMesh(dracoPointCloud, attributeName, attribute, vertexCount);\n      }\n\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  _addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return;\n    }\n\n    const dracoAttributeType = this._getDracoAttributeType(attributeName, attribute);\n    const size = attribute.length / vertexCount;\n\n    if (dracoAttributeType === 'indices') {\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n      this.dracoMeshBuilder.AddFacesToMesh(dracoMesh, numFaces, attribute);\n      return;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    switch (attribute.constructor.name) {\n    case 'Int8Array':\n      this.dracoMeshBuilder.AddInt8Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Int16Array':\n      this.dracoMeshBuilder.AddInt16Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Int32Array':\n      this.dracoMeshBuilder.AddInt32Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n      this.dracoMeshBuilder.AddUInt8Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Uint16Array':\n      this.dracoMeshBuilder.AddUInt16Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Uint32Array':\n      this.dracoMeshBuilder.AddUInt32Attribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n      break;\n\n    case 'Float32Array':\n    default:\n      this.dracoMeshBuilder.AddFloatAttribute(\n        dracoMesh, dracoAttributeType, vertexCount, size, attribute\n      );\n    }\n  }\n\n  // DRACO can compress attributes of know type better\n  // TODO - expose an attribute type map?\n  _getDracoAttributeType(attributeName, attribute) {\n    switch (attributeName.toLowerCase()) {\n    case 'indices':\n      return 'indices';\n    case 'position':\n    case 'positions':\n    case 'vertices':\n      return this.dracoEncoderModule.POSITION;\n    case 'normal':\n    case 'normals':\n      return this.dracoEncoderModule.NORMAL;\n    case 'color':\n    case 'colors':\n      return this.dracoEncoderModule.COLOR;\n    case 'texCoord':\n    case 'texCoords':\n      return this.dracoEncoderModule.TEX_COORD;\n    default:\n      return this.dracoEncoderModule.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName, attribute);\n      if (dracoType === this.dracoEncoderModule.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"draco-encoder.js"}