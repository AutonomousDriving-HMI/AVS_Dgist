"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeWorkers = initializeWorkers;
exports.parseStreamMessage = parseStreamMessage;

var _parseStreamDataMessage = require("./parse-stream-data-message");

var _serialize = require("./serialize");

var _parseStreamWorkerfarm = require("./parse-stream-workerfarm");

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Public function for initializing workers
function initializeWorkers(_ref) {
  var worker = _ref.worker,
      _ref$maxConcurrency = _ref.maxConcurrency,
      maxConcurrency = _ref$maxConcurrency === void 0 ? 4 : _ref$maxConcurrency;
  (0, _parseStreamWorkerfarm.initializeWorkerFarm)({
    worker: worker,
    maxConcurrency: maxConcurrency
  });
}

function parseStreamMessage(_ref2) {
  var message = _ref2.message,
      onResult = _ref2.onResult,
      onError = _ref2.onError,
      debug = _ref2.debug,
      _ref2$worker = _ref2.worker,
      worker = _ref2$worker === void 0 ? false : _ref2$worker,
      _ref2$maxConcurrency = _ref2.maxConcurrency,
      maxConcurrency = _ref2$maxConcurrency === void 0 ? 4 : _ref2$maxConcurrency;

  if (worker) {
    if (!(0, _parseStreamWorkerfarm.getWorkerFarm)()) {
      initializeWorkers({
        worker: worker,
        maxConcurrency: maxConcurrency
      });
    }

    var workerFarm = (0, _parseStreamWorkerfarm.getWorkerFarm)();

    if (debug) {
      workerFarm.debug = debug;
    }

    var onMessage = function onMessage(data) {
      return onResult((0, _serialize.postDeserialize)(data));
    };

    workerFarm.process(message, onMessage, onError);
  } else {
    (0, _parseStreamDataMessage.parseStreamDataMessage)(message, onResult, onError);
  }
}
//# sourceMappingURL=parse-stream-message.js.map