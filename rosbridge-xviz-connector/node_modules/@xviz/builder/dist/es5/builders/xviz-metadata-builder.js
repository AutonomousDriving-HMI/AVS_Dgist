"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("math.gl");

var _constant = require("./constant");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* global console */

/* eslint-disable no-console */
var defaultValidateWarn = console.warn;
var defaultValidateError = console.error;
/* eslint-enable no-console */

var XVIZMetadataBuilder =
/*#__PURE__*/
function () {
  function XVIZMetadataBuilder() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$validateWarn = _ref.validateWarn,
        validateWarn = _ref$validateWarn === void 0 ? defaultValidateWarn : _ref$validateWarn,
        _ref$validateError = _ref.validateError,
        validateError = _ref$validateError === void 0 ? defaultValidateError : _ref$validateError;

    _classCallCheck(this, XVIZMetadataBuilder);

    this._validateWarn = validateWarn;
    this._validateError = validateError;
    this.data = {
      streams: {}
    };
    this.streamId = null;
    this.tmp_ui_builder = null;
    this.tmp_stream = {};
    this.tmp_matrix_transform = null;
    this.tmp_pose_transform = null;
    this.tmp_log_info = {};
    this.tmp_type = null; // TODO:
    // cameras
    // stream_aliases
    // ui_config
    // map_info
    // vehicle_info
  }

  _createClass(XVIZMetadataBuilder, [{
    key: "getMetadata",
    value: function getMetadata() {
      this._flush();

      var metadata = _objectSpread({
        version: '2.0.0'
      }, this.data);

      if (Object.keys(this.tmp_log_info).length > 0) {
        metadata.log_info = this.tmp_log_info;
      }

      if (this.tmp_ui_builder) {
        metadata.ui_config = this.tmp_ui_builder.getUI();
      }

      return metadata;
    }
  }, {
    key: "startTime",
    value: function startTime(time) {
      this.tmp_log_info.start_time = time;
      return this;
    }
  }, {
    key: "endTime",
    value: function endTime(time) {
      this.tmp_log_info.end_time = time;
      return this;
    }
  }, {
    key: "ui",
    value: function ui(xvizUIBuilder) {
      this.tmp_ui_builder = xvizUIBuilder;
      return this;
    }
  }, {
    key: "stream",
    value: function stream(streamId) {
      if (this.streamId) {
        this._flush();
      }

      this.streamId = streamId;
      return this;
    } // Used for validation in XVIZBuilder

  }, {
    key: "category",
    value: function category(_category) {
      this.tmp_stream.category = _category;
      return this;
    } // Used for validation in XVIZBuilder

  }, {
    key: "type",
    value: function type(t) {
      this.tmp_type = t;
      return this;
    }
  }, {
    key: "source",
    value: function source(_source) {
      this.tmp_stream.source = _source;
      return this;
    }
  }, {
    key: "unit",
    value: function unit(u) {
      this.tmp_stream.units = u;
      return this;
    }
  }, {
    key: "coordinate",
    value: function coordinate(_coordinate) {
      this.tmp_stream.coordinate = _coordinate;
      return this;
    }
  }, {
    key: "transformMatrix",
    value: function transformMatrix(matrix) {
      if (matrix instanceof Array) {
        matrix = new _math.Matrix4(matrix);
      }

      this.tmp_matrix_transform = matrix;
      return this;
    }
  }, {
    key: "pose",
    value: function pose() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var orientation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _position$x = position.x,
          x = _position$x === void 0 ? 0 : _position$x,
          _position$y = position.y,
          y = _position$y === void 0 ? 0 : _position$y,
          _position$z = position.z,
          z = _position$z === void 0 ? 0 : _position$z;
      var _orientation$roll = orientation.roll,
          roll = _orientation$roll === void 0 ? 0 : _orientation$roll,
          _orientation$pitch = orientation.pitch,
          pitch = _orientation$pitch === void 0 ? 0 : _orientation$pitch,
          _orientation$yaw = orientation.yaw,
          yaw = _orientation$yaw === void 0 ? 0 : _orientation$yaw;
      var pose = new _math._Pose({
        x: x,
        y: y,
        z: z,
        roll: roll,
        pitch: pitch,
        yaw: yaw
      });
      this.tmp_pose_transform = pose.getTransformationMatrix();
      return this;
    }
  }, {
    key: "streamStyle",
    value: function streamStyle(style) {
      this.tmp_stream.stream_style = style;
      return this;
    }
  }, {
    key: "styleClass",
    value: function styleClass(name, style) {
      if (!this.streamId) {
        this._validateError('A stream must set before adding a style rule.');

        return this;
      }

      var streamRule = {
        name: name,
        style: style
      };

      if (!this.tmp_stream.style_classes) {
        this.tmp_stream.style_classes = [streamRule];
      } else {
        this.tmp_stream.style_classes.push(streamRule);
      }

      return this;
    }
  }, {
    key: "logInfo",
    value: function logInfo(data) {
      this.tmp_log_info = _objectSpread({}, data, this.tmp_log_info);
      return this;
    }
  }, {
    key: "_flush",
    value: function _flush() {
      if (this.streamId) {
        var streamData = this.tmp_stream;
        var transform = null;

        if (this.tmp_pose_transform && this.tmp_matrix_transform) {
          this._validateError('`pose` and `transformMatrix` cannot be applied at the same time.');
        } else {
          transform = this.tmp_matrix_transform || this.tmp_pose_transform;
        }

        if (transform) {
          streamData.transform = transform;
        }

        if (streamData.category === _constant.CATEGORY.primitive || streamData.category === _constant.CATEGORY.future_instance) {
          streamData.primitive_type = this.tmp_type;
        } else if (streamData.category === _constant.CATEGORY.variable || streamData.category === _constant.CATEGORY.time_series) {
          streamData.scalar_type = this.tmp_type;
        }

        this.data.streams[this.streamId] = streamData;
      }

      this._reset();
    }
  }, {
    key: "_reset",
    value: function _reset() {
      this.streamId = null;
      this.tmp_stream = {};
      this.tmp_matrix_transform = null;
      this.tmp_pose_transform = null;
      this.tmp_type = null;
    }
  }]);

  return XVIZMetadataBuilder;
}();

exports.default = XVIZMetadataBuilder;
//# sourceMappingURL=xviz-metadata-builder.js.map