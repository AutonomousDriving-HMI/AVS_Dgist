import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";

/* global fetch */

/* global URL, location, File, FileReader */

/* global Buffer */
import fs from 'fs'; // `fs` will be empty object in browsers (see package.json "browser" field).

import http from 'http';
import https from 'https';
import util from 'util';
import { resolvePath } from './file-aliases';
import decodeDataUri from '../data-uri-utils/decode-data-uri';
import { toArrayBuffer } from '../binary-utils/binary-utils';
import { concatenateReadStream } from '../async-iterator-utils/stream-utils';
var isNode = Boolean(fs && fs.readFile);
var DEFAULT_OPTIONS = {
  dataType: 'arrayBuffer'
};

function getReadFileOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  options.responseType = options.responseType || options.dataType;

  if (fs) {
    // set encoding for fs.readFile
    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);
  }

  return options;
} // Reads raw file data from:
// * http/http urls
// * data urls
// * File/Blob objects
// etc?


export function readFile(uri) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  try {
    uri = resolvePath(uri);
    options = getReadFileOptions(options);

    if (uri.startsWith('data:')) {
      return Promise.resolve(decodeDataUri(uri));
    }

    if (typeof File !== 'undefined' && uri instanceof File) {
      readFileObject(uri, options);
    }

    if (isNode) {
      var isRequest = uri.startsWith('http:') || uri.startsWith('https:');

      if (isRequest) {
        return new Promise(function (resolve, reject) {
          options = _objectSpread({}, new URL(uri), options);
          var request = uri.startsWith('https:') ? https.request : http.request;
          request(uri, function (response) {
            return concatenateReadStream(response).then(resolve, reject);
          });
        });
      }

      return readFileNode(uri, options);
    } // Browser: Try to load all URLS via fetch, as they can be local requests (e.g. to a dev server)
    // In a web worker, XMLHttpRequest throws invalid URL error if using relative path
    // resolve url relative to original base


    uri = new URL(uri, location.href).href;
    return fetch(uri, options).then(function (res) {
      return res[options.dataType]();
    }); // return Promise.reject(new Error('Cannot load file URIs in browser'));
  } catch (error) {
    return Promise.reject(error.message);
  }
} // In a few cases (data URIs, node.js) "files" can be read synchronously

export function readFileSync(uri) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  uri = resolvePath(uri);
  options = getReadFileOptions(options);

  if (uri.startsWith('data:')) {
    return decodeDataUri(uri);
  }

  if (!isNode) {
    return null; // throw new Error('Cant load URI synchronously');
  }

  var buffer = fs.readFileSync(uri, options, function () {});
  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;
} // HELPERS

/**
 * File reader function for the browser
 * @param {File|Blob} file  HTML File or Blob object to read as string
 * @returns {Promise.string}  Resolves to a string containing file contents
 */

function readFileObject(file, options) {
  return new Promise(function (resolve, reject) {
    try {
      var reader = new FileReader();

      reader.onerror = function (error) {
        return reject(new Error(error));
      };

      reader.onabort = function () {
        return reject(new Error('Read operation was aborted.'));
      };

      reader.onload = function () {
        return resolve(reader.result);
      };

      if (options.dataType !== 'arraybuffer') {
        reader.readAsText(file);
      } else {
        reader.readAsArrayBuffer(file);
      }
    } catch (error) {
      reject(error);
    }
  });
}

function readFileNode(filename, options) {
  var readFileAsync = util.promisify(fs.readFile);
  return readFileAsync(filename, options).then(function (buffer) {
    return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;
  });
}
//# sourceMappingURL=read-file.js.map