{"version":3,"sources":["../../../src/parsers/parse-stream-data-message.js"],"names":["isJSON","encodedString","firstChar","String","fromCharCode","lastChar","length","decode","data","recursive","Uint8Array","jsonString","TextDecoder","JSON","parse","key","unpackEnvelope","parts","type","split","namespace","slice","join","isEnvelope","parseStreamDataMessage","message","onResult","onError","opts","Blob","v2Type","parseData","unpacked","result","parseStreamLogData","error","typeKey","update_type","parseTimesliceData","convertPrimitive","LOG_STREAM_MESSAGE","METADATA","DONE","ERROR","currentMajorVersion"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * This file contains parsers for XVIZ log stream protocol.\n * Naming conventions:\n  `message` refers to the raw message received via webSocket.onmessage\n * `data` refers to pre-processed data objects (blob, arraybuffer, JSON object)\n */\n/* global Blob, Uint8Array */\nimport {LOG_STREAM_MESSAGE} from '../constants';\nimport {parseBinaryXVIZ, isBinaryXVIZ} from '../loaders/xviz-loader/xviz-binary-loader';\nimport {parseLogMetadata} from './parse-log-metadata';\nimport {parseStreamVideoMessage} from './parse-stream-video-message';\nimport {TextDecoder} from '../utils/text-encoding';\nimport parseTimesliceDataV1 from './parse-timeslice-data-v1';\nimport parseTimesliceDataV2 from './parse-timeslice-data-v2';\nimport {getXVIZConfig} from '../config/xviz-config';\n\nfunction isJSON(encodedString) {\n  const firstChar = String.fromCharCode(encodedString[0]);\n  const lastChar = String.fromCharCode(encodedString[encodedString.length - 1]);\n\n  return (firstChar === '{' && lastChar === '}') || (firstChar === '[' && lastChar === ']');\n}\n\n// get JSON from binary\nfunction decode(data, recursive) {\n  if (!data) {\n    // ignore\n  } else if (isBinaryXVIZ(data)) {\n    return parseBinaryXVIZ(data);\n  } else if (data instanceof Uint8Array && isJSON(data)) {\n    const jsonString = new TextDecoder('utf8').decode(data);\n    return JSON.parse(jsonString);\n  } else if (recursive && typeof data === 'object') {\n    for (const key in data) {\n      // Only peek one-level deep\n      data[key] = decode(data[key], false);\n    }\n  }\n  return data;\n}\n\n// Parse apart the namespace and type for the enveloped data\nexport function unpackEnvelope(data) {\n  const parts = data.type.split('/');\n  return {\n    namespace: parts[0],\n    type: parts.slice(1).join('/'),\n    data: data.data\n  };\n}\n\n// Sniff out whether the JSON data provided is in the XVIZ envelope format\nexport function isEnvelope(data) {\n  return data.type && data.data;\n}\n\n// Post processes a stream message to make it easy to use for JavaScript applications\nexport function parseStreamDataMessage(message, onResult, onError, opts) {\n  // TODO(twojtasz): better message dispatching\n  // here, not all arraybuffer may be image (packed point cloud)\n  // TODO(jlisee): Node.js support for blobs for better unit testing\n  if (typeof Blob !== 'undefined' && message instanceof Blob) {\n    parseStreamVideoMessage(message, onResult, onError);\n    return;\n  }\n\n  try {\n    let data;\n    if (typeof message === 'string') {\n      data = JSON.parse(message);\n    } else {\n      data = decode(message, true);\n    }\n\n    let v2Type;\n    let parseData = true;\n    if (isEnvelope(data)) {\n      const unpacked = unpackEnvelope(data);\n      if (unpacked.namespace === 'xviz') {\n        v2Type = unpacked.type;\n        data = unpacked.data;\n      } else {\n        parseData = false;\n      }\n    }\n\n    if (parseData) {\n      const result = parseStreamLogData(data, {...opts, v2Type});\n      onResult(result);\n    }\n  } catch (error) {\n    onError(error);\n  }\n}\n\nexport function parseStreamLogData(data, opts = {}) {\n  // TODO(twojtasz): this data.message is due an\n  // uncoordinated change on the XVIZ server, temporary.\n  const typeKey = opts.v2Type || data.type || data.message || data.update_type;\n\n  switch (typeKey) {\n    case 'state_update':\n      return parseTimesliceData(data, opts.convertPrimitive);\n    case 'metadata':\n      return {\n        ...parseLogMetadata(data),\n        // ensure application sees the metadata type set to the uppercase version\n        type: LOG_STREAM_MESSAGE.METADATA\n      };\n    case 'transform_log_done':\n      return {...data, type: LOG_STREAM_MESSAGE.DONE};\n    case 'error':\n      return {...data, message: 'Stream server error', type: LOG_STREAM_MESSAGE.ERROR};\n\n    // v1 types\n    case 'done':\n      return {...data, type: LOG_STREAM_MESSAGE.DONE};\n    default:\n      //  TODO(twojtasz): XVIZ should be tagging this with a type\n      return parseTimesliceData(data, opts.convertPrimitive);\n  }\n}\n\nfunction parseTimesliceData(data, convertPrimitive) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  return currentMajorVersion === 1\n    ? parseTimesliceDataV1(data, convertPrimitive)\n    : parseTimesliceDataV2(data, convertPrimitive);\n}\n"],"file":"parse-stream-data-message.js"}