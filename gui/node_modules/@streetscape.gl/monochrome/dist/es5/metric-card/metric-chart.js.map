{"version":3,"sources":["../../../src/metric-card/metric-chart.js"],"names":["MetricChart","props","evt","onClick","state","hoveredX","key","value","hoveredValues","setState","isHovered","getX","onNearestX","onMouseLeave","currentValues","_getCurrentValues","nextProps","highlightX","data","Number","isFinite","result","hasOwnProperty","_onClick","_onNearestX","_onMouseLeave","PureComponent","Object","assign","PropTypes","number","Chart","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {findNearestValue} from './utils';\nimport Chart from './chart';\n\n/**\n * A metric chart draws a chart with optional percentiles and lags\n */\nexport default class MetricChart extends PureComponent {\n  static propTypes = Object.assign(\n    {\n      highlightX: PropTypes.number\n    },\n    Chart.propTypes\n  );\n\n  static defaultProps = Chart.defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHovered: false,\n      hoveredX: null,\n      // The nearest data point to the cursor in each series\n      hoveredValues: {},\n      // The nearest data point to the current time in each series\n      currentValues: this._getCurrentValues(props)\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.highlightX !== nextProps.highlightX || this.props.data !== nextProps.data) {\n      this.setState({\n        currentValues: this._getCurrentValues(nextProps)\n      });\n    }\n  }\n\n  // Find the closest data point in each series to the current time\n  _getCurrentValues({highlightX, data, getX}) {\n    if (!Number.isFinite(highlightX) || !data) {\n      return null;\n    }\n\n    const result = {};\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        result[key] = findNearestValue(data[key], highlightX, getX);\n      }\n    }\n    return result;\n  }\n\n  _onClick = evt => {\n    this.props.onClick(this.state.hoveredX, evt);\n  };\n\n  _onNearestX = (key, value, evt) => {\n    const {hoveredValues} = this.state;\n    hoveredValues[key] = value;\n\n    this.setState({\n      isHovered: true,\n      hoveredX: this.props.getX(value),\n      hoveredValues: {...hoveredValues}\n    });\n\n    this.props.onNearestX(key, value, evt);\n  };\n\n  _onMouseLeave = evt => {\n    this.setState({isHovered: false, hoveredX: null});\n    this.props.onMouseLeave(evt);\n  };\n\n  render() {\n    const {isHovered, hoveredValues, currentValues} = this.state;\n\n    return (\n      <Chart\n        {...this.props}\n        onClick={this._onClick}\n        onNearestX={this._onNearestX}\n        onMouseLeave={this._onMouseLeave}\n        highlightValues={isHovered ? hoveredValues : currentValues}\n      />\n    );\n  }\n}\n"],"file":"metric-chart.js"}