"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseTimesliceData;

var _xvizConfig = require("../config/xviz-config");

var _constants = require("../constants");

var _parseXvizStream = require("./parse-xviz-stream");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function parseTimesliceData(data, convertPrimitive) {
  var _getXVIZConfig = (0, _xvizConfig.getXVIZConfig)(),
      PRIMARY_POSE_STREAM = _getXVIZConfig.PRIMARY_POSE_STREAM;

  var vehiclePose = data.vehicle_pose,
      stateUpdates = data.state_updates,
      otherInfo = _objectWithoutProperties(data, ["vehicle_pose", "state_updates"]);

  var timestamp;

  if (vehiclePose) {
    timestamp = vehiclePose.time;
  } else if (stateUpdates) {
    timestamp = stateUpdates.reduce(function (t, stateUpdate) {
      return Math.max(t, stateUpdate.timestamp);
    }, 0);
  }

  if (!timestamp) {
    // Incomplete stream message, just tag it accordingly so client can ignore it
    return {
      type: _constants.LOG_STREAM_MESSAGE.INCOMPLETE
    };
  }

  var newStreams = {};

  var result = _objectSpread({}, otherInfo, {
    type: _constants.LOG_STREAM_MESSAGE.TIMESLICE,
    streams: newStreams,
    timestamp: timestamp
  });

  if (stateUpdates) {
    var xvizStreams = parseStateUpdates(stateUpdates, timestamp, convertPrimitive);
    Object.assign(newStreams, xvizStreams);
  }

  if (vehiclePose) {
    // v1 -> v2
    newStreams[PRIMARY_POSE_STREAM] = vehiclePose;
  }

  return result;
}

function parseStateUpdates(stateUpdates, timestamp, convertPrimitive) {
  var _getXVIZConfig2 = (0, _xvizConfig.getXVIZConfig)(),
      STREAM_BLACKLIST = _getXVIZConfig2.STREAM_BLACKLIST;

  var newStreams = {};
  var primitives = {};
  var variables = {};
  var futures = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = stateUpdates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var stateUpdate = _step.value;
      Object.assign(primitives, stateUpdate.primitives);
      Object.assign(variables, stateUpdate.variables);
      Object.assign(futures, stateUpdate.futures);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  Object.keys(primitives).filter(function (streamName) {
    return !STREAM_BLACKLIST.has(streamName);
  }).forEach(function (primitive) {
    newStreams[primitive] = (0, _parseXvizStream.parseStreamPrimitive)(primitives[primitive], primitive, timestamp, convertPrimitive);
  });
  Object.keys(variables).filter(function (streamName) {
    return !STREAM_BLACKLIST.has(streamName);
  }).forEach(function (variable) {
    newStreams[variable] = (0, _parseXvizStream.parseStreamVariable)(variables[variable], variable, timestamp);
  });
  Object.keys(futures).filter(function (streamName) {
    return !STREAM_BLACKLIST.has(streamName);
  }).forEach(function (future) {
    newStreams[future] = (0, _parseXvizStream.parseStreamFutures)(futures[future], future, timestamp, convertPrimitive);
  });
  return newStreams;
}
//# sourceMappingURL=parse-timeslice-data-v1.js.map