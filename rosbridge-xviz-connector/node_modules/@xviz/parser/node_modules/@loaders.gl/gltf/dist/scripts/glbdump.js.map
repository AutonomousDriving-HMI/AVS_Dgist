{"version":3,"sources":["../../scripts/glbdump.js"],"names":["require","GLBParser","GLTFParser","toArrayBuffer","fs","MAX_LENGTH","printHelp","console","log","process","exit","options","main","argv","args","length","parseOptions","filename","indexOf","dumpFile","binary","readFileSync","arrayBuffer","data","parse","ignoreMagic","getJSON","dumpGLTF","dumpGLTFScenes","dumpGLBSegments","dumpJSON","JSON","stringify","key","array","Array","isArray","logArray","logObject","prevHeading","printHeading","heading","toUpperCase","forEach","object","i","slice","field","Object","keys","gltfParser","gltf","asset","scenes","scene","opts","arg","warn"],"mappings":"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","sourcesContent":["/* global console, process */\n/* eslint-disable no-console */\n\nconst {GLBParser, GLTFParser} = require('@loaders.gl/gltf');\nconst {toArrayBuffer} = require('@loaders.gl/core');\n\nconst fs = require('fs');\n\nconst MAX_LENGTH = 76;\n\nfunction printHelp() {\n  console.log('glbdump: no glb files specified...');\n  console.log('glbdump --json Pretty prints the JSON chunk...');\n  console.log('glbdump --gltf Parses as glTF and pretty prints all scenes...');\n  process.exit(0); // eslint-disable-line\n}\n\nlet options;\n\nfunction main() {\n  const [,, ...args] = process.argv;\n\n  if (args.length === 0) {\n    printHelp();\n  }\n\n  options = parseOptions(args);\n\n  for (const filename of args) {\n    if (filename.indexOf('--') !== 0) {\n      dumpFile(filename);\n    }\n  }\n}\n\nmain();\n\nfunction dumpFile(filename) {\n  console.log(`\\nGLB dump of ${filename}:`);\n\n  const binary = fs.readFileSync(filename);\n  // process.stdout.write(binary.slice(0, 48));\n  // console.log('\\n');\n\n  const arrayBuffer = toArrayBuffer(binary);\n\n  const data = new GLBParser().parse(arrayBuffer, {ignoreMagic: true}).getJSON();\n\n  if (options.dumpGLTF) {\n    dumpGLTFScenes(data);\n  } else {\n    dumpGLBSegments(data);\n  }\n\n  if (options.dumpJSON) {\n    console.log(JSON.stringify(data, null, 2));\n  }\n}\n\n// GLB SEGMENTS\n\nfunction dumpGLBSegments(data) {\n  for (const key in data) {\n    const array = data[key];\n    if (Array.isArray(array)) {\n      logArray(key, array);\n    } else if (array && typeof array === 'object') {\n      logObject(key, array);\n    }\n  }\n}\n\n// Writes heading once\nlet prevHeading = null;\n\nfunction printHeading(heading) {\n  if (heading !== prevHeading) {\n    console.log(heading.toUpperCase());\n    prevHeading = heading;\n  }\n}\n\nfunction logArray(key, array) {\n  array.forEach((object, i) => {\n    printHeading(key);\n    console.log(` ${i}: ${JSON.stringify(object).slice(0, MAX_LENGTH)}...`);\n  });\n}\n\nfunction logObject(field, object) {\n  Object.keys(object).forEach((key, i) => {\n    printHeading(field);\n    console.log(` ${i}: ${JSON.stringify(object[key]).slice(0, MAX_LENGTH)}...`);\n  });\n}\n\n// GLTF\n\nfunction dumpGLTFScenes(data) {\n  const gltfParser = new GLTFParser();\n  const gltf = gltfParser.parse(data);\n  if (gltf.asset) {\n    console.log(JSON.stringify(gltf.asset, null, 2));\n  }\n  const scenes = gltf.scenes || [];\n  for (const scene of scenes) {\n    console.log(JSON.stringify(scene, null, 2));\n  }\n}\n\n// OPTIONS\n\nfunction parseOptions(args) {\n  const opts = {\n    dumpJSON: false\n  };\n\n  for (const arg of args) {\n    if (arg.indexOf('--') === 0) {\n      switch (arg) {\n      case '--json':\n        opts.dumpJSON = true;\n        break;\n      case '--gltf':\n        opts.dumpGLTF = true;\n        break;\n      case '--help':\n        printHelp();\n        break;\n      default:\n        console.warn(`Unknown option ${arg}`);\n      }\n    }\n  }\n  return opts;\n}\n"],"file":"glbdump.js"}