{"version":3,"sources":["../../../src/image-utils/image-loaders.js"],"names":["readFile","ImageBitmapLoader","parse","parseToImageBitmap","HTMLImageLoader","load","loadToHTMLImage","PlatformImageLoader","parseToPlatformImage","loadToPlatformImage","arrayBuffer","blob","Blob","Uint8Array","createImageBitmap","url","options","promise","test","dataType","then","xml","Promise","resolve","src","reject","image","Image","onload","onerror","err","Error","crossOrigin","error"],"mappings":"AAAA;AACA,SAAQA,QAAR,QAAuB,wBAAvB,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAEC;AADwB,CAA1B,C,CAIP;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAEC;AADuB,CAAxB,C,CAIP;;AACA,OAAO,MAAMC,mBAAmB,GAAG;AACjCL,EAAAA,KAAK,EAAEM,oBAD0B;AAEjCH,EAAAA,IAAI,EAAEI;AAF2B,CAA5B,C,CAKP;AACA;AAEA;;AACA,SAASN,kBAAT,CAA4BO,WAA5B,EAAyC;AACvC,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeH,WAAf,CAAD,CAAT,CAAb;AACA,SAAOI,iBAAiB,CAACH,IAAD,CAAxB;AACD;;AAED,SAASL,eAAT,CAAyBS,GAAzB,EAA8BC,OAA9B,EAAuC;AACrC,MAAIC,OAAJ;;AACA,MAAI,oBAAoBC,IAApB,CAAyBH,GAAzB,CAAJ,EAAmC;AACjC;AACAE,IAAAA,OAAO,GAAGjB,QAAQ,CAACe,GAAD,EAAM;AAACI,MAAAA,QAAQ,EAAE;AAAX,KAAN,CAAR,CACPC,IADO,CACFC,GAAG,IAAK,oCAAmCA,GAAI,EAD7C,CAAV;AAED,GAJD,MAIO;AACLJ,IAAAA,OAAO,GAAGK,OAAO,CAACC,OAAR,CAAgBR,GAAhB,CAAV;AACD;;AACD,SAAOE,OAAO,CAACG,IAAR,CAAaI,GAAG,IAAI,IAAIF,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AAC1D,QAAI;AACF,YAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AACAD,MAAAA,KAAK,CAACE,MAAN,GAAe,MAAML,OAAO,CAACG,KAAD,CAA5B;;AACAA,MAAAA,KAAK,CAACG,OAAN,GAAiBC,GAAD,IAASL,MAAM,CAAC,IAAIM,KAAJ,CAAW,wBAAuBhB,GAAI,KAAIe,GAAI,EAA9C,CAAD,CAA/B;;AACAJ,MAAAA,KAAK,CAACM,WAAN,GAAqBhB,OAAO,IAAIA,OAAO,CAACgB,WAApB,IAAoC,WAAxD;AACAN,MAAAA,KAAK,CAACF,GAAN,GAAYA,GAAZ;AACD,KAND,CAME,OAAOS,KAAP,EAAc;AACdR,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACD;AACF,GAV0B,CAApB,CAAP;AAWD;;AAED,SAASzB,oBAAT,CAA8BE,WAA9B,EAA2C;AACzC,MAAI,OAAOI,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C,WAAO,IAAP;AACD;;AACD,SAAOX,kBAAkB,CAACO,WAAD,CAAzB;AACD;;AAED,SAASD,mBAAT,CAA6BM,GAA7B,EAAkCC,OAAlC,EAA2C;AACzC,SAAOV,eAAe,CAACS,GAAD,EAAMC,OAAN,CAAtB;AACD","sourcesContent":["/* global Image, Blob, createImageBitmap */\nimport {readFile} from '../read-file/read-file';\n\n// Specifically loads an ImageBitmap (works on newer browser main and worker threads)\nexport const ImageBitmapLoader = {\n  parse: parseToImageBitmap\n};\n\n// Specifically loads an HTMLImage (works on alls browser main threads but not on worker threads)\nexport const HTMLImageLoader = {\n  load: loadToHTMLImage\n};\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\nexport const PlatformImageLoader = {\n  parse: parseToPlatformImage,\n  load: loadToPlatformImage\n};\n\n// TODO - export functions that work on \"platform images\",\n// e.g. extracts image data as typed array from any of the platform image formats.\n\n// Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\nfunction parseToImageBitmap(arrayBuffer) {\n  const blob = new Blob([new Uint8Array(arrayBuffer)]);\n  return createImageBitmap(blob);\n}\n\nfunction loadToHTMLImage(url, options) {\n  let promise;\n  if (/\\.svg((\\?|#).*)?$/.test(url)) {\n    // is SVG\n    promise = readFile(url, {dataType: 'text'})\n      .then(xml => `data:image/svg+xml;charset=utf-8,${xml}`);\n  } else {\n    promise = Promise.resolve(url);\n  }\n  return promise.then(src => new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = (err) => reject(new Error(`Could not load image ${url}: ${err}`));\n      image.crossOrigin = (options && options.crossOrigin) || 'anonymous';\n      image.src = src;\n    } catch (error) {\n      reject(error);\n    }\n  }));\n}\n\nfunction parseToPlatformImage(arrayBuffer) {\n  if (typeof createImageBitmap === 'undefined') {\n    return null;\n  }\n  return parseToImageBitmap(arrayBuffer);\n}\n\nfunction loadToPlatformImage(url, options) {\n  return loadToHTMLImage(url, options);\n}\n"],"file":"image-loaders.js"}