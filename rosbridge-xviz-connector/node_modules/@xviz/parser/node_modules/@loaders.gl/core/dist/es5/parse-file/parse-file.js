"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseFileSync = parseFileSync;
exports.parseFile = parseFile;
exports.parseFileAsIterator = parseFileAsIterator;
exports.parseFileAsAsyncIterator = parseFileAsAsyncIterator;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _autoDetectLoader = require("./auto-detect-loader");

var _parseWithLoader = require("./parse-with-loader");

function parseFileSync(data, loaders, options, url) {
  var loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, data, loaders) : loaders;
  return (0, _parseWithLoader.parseWithLoaderSync)(data, loader, options, url);
} // TODO - should accept loader.parseAsyncIterator and concatenate.


function parseFile(_x, _x2, _x3, _x4) {
  return _parseFile.apply(this, arguments);
}

function _parseFile() {
  _parseFile = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(data, loaders, options, url) {
    var loader;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return data;

          case 2:
            data = _context.sent;
            loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, data, loaders) : loaders;
            _context.next = 6;
            return (0, _parseWithLoader.parseWithLoader)(data, loader, options, url);

          case 6:
            return _context.abrupt("return", _context.sent);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseFile.apply(this, arguments);
}

function parseFileAsIterator(inputIterator, loaders, options, url) {
  var loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, null, loaders) : loaders;

  if (loader.parseIterator) {
    var iterator = loader.parseIterator(inputIterator, options, url);

    if (iterator) {
      return iterator;
    }
  } // TODO - look for parseSync and pre-concatenate the iterator input


  throw new Error("".concat(loader.name, " loader cannot parse data source using synchronous iterators"));
} // TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator


function parseFileAsAsyncIterator(_x5, _x6, _x7, _x8) {
  return _parseFileAsAsyncIterator.apply(this, arguments);
}

function _parseFileAsAsyncIterator() {
  _parseFileAsAsyncIterator = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(inputAsyncIterator, loaders, options, url) {
    var loader, asyncIterator;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return inputAsyncIterator;

          case 2:
            inputAsyncIterator = _context2.sent;
            loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, null, loaders) : loaders;

            if (!loader.parseAsyncIterator) {
              _context2.next = 8;
              break;
            }

            asyncIterator = loader.parseAsyncIterator(inputAsyncIterator, options, url);

            if (!asyncIterator) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", asyncIterator);

          case 8:
            throw new Error("".concat(loader.name, " loader cannot parse data source using async iterators"));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseFileAsAsyncIterator.apply(this, arguments);
}
//# sourceMappingURL=parse-file.js.map