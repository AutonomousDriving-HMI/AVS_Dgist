{"version":3,"sources":["../../../src/synchronizers/stream-synchronizer.js"],"names":["BaseSynchronizer","StreamSynchronizer","streamBuffer","opts","size","startTime","endTime","slices","getTimeslices","start","end","reverse","map","timeslice","streams","filter","Boolean"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP,MAA6B,qBAA7B;;IAEqBC,kB;;;;;AACnB;;;;;;;;;;AAUA,8BAAYC,YAAZ,EAA0BC,IAA1B,EAAgC;AAAA;;AAAA;;AAC9B,4FAAMA,IAAN;AAEA,UAAKD,YAAL,GAAoBA,YAApB;AAH8B;AAI/B;;;;6BAEQ;AACP,aAAO,CAAC,KAAKA,YAAN,IAAsB,CAAC,KAAKA,YAAL,CAAkBE,IAAhD;AACD;AAED;;;;;;;;;;2CAOuBC,S,EAAWC,O,EAAS;AACzC,UAAMC,MAAM,GAAG,KAAKL,YAAL,CAAkBM,aAAlB,CAAgC;AAACC,QAAAA,KAAK,EAAEJ,SAAR;AAAmBK,QAAAA,GAAG,EAAEJ;AAAxB,OAAhC,EAAkEK,OAAlE,EAAf;AACA,aAAOJ,MAAM,CAACK,GAAP,CAAW,UAAAC,SAAS;AAAA,eAAIA,SAAS,CAACC,OAAd;AAAA,OAApB,EAA2CC,MAA3C,CAAkDC,OAAlD,CAAP;AACD;;;;EA/B6ChB,gB;;SAA3BC,kB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseSynchronizer from './base-synchronizer';\n\nexport default class StreamSynchronizer extends BaseSynchronizer {\n  /**\n   * @classdesc\n   * Lets the application do synchronized walks through a set of time slices\n   * and allows the app to get the data object closes to a given time.\n   *\n   * @class\n   * @param Number startTime - The starting GPS time\n   * @param {XVIZStreamBuffer} streamBuffer - The stream buffer\n   * - Each timeslice object must contain a GPS timestamp\n   */\n  constructor(streamBuffer, opts) {\n    super(opts);\n\n    this.streamBuffer = streamBuffer;\n  }\n\n  _empty() {\n    return !this.streamBuffer || !this.streamBuffer.size;\n  }\n\n  /**\n   * Find and process stream data in the range (start, end] for process\n   * Returns a list of streams sorted by decending time\n   *\n   * @param Number startTime - The time to start from.\n   * @param Number endTime - The time to end at.\n   */\n  _getTimeRangeInReverse(startTime, endTime) {\n    const slices = this.streamBuffer.getTimeslices({start: startTime, end: endTime}).reverse();\n    return slices.map(timeslice => timeslice.streams).filter(Boolean);\n  }\n}\n"],"file":"stream-synchronizer.js"}