{"version":3,"sources":["../../src/draco-decoder.js"],"names":["getGLTFAccessors","getGLTFIndices","getGLTFAttributeMap","draco3d","require","GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","DRACODecoder","decoderModule","createDecoderModule","dracoGeometry","destroy","arrayBuffer","buffer","DecoderBuffer","Init","byteLength","decoder","Decoder","data","dracoStatus","header","geometryType","GetEncodedGeometryType","Mesh","DecodeBufferToMesh","type","faceCount","num_faces","attributeCount","num_attributes","vertexCount","num_points","PointCloud","DecodeBufferToPointCloud","Error","loaderData","ok","ptr","message","error_msg","extractDRACOGeometry","geometry","attributes","getAttributes","positionAttribute","getPositionAttributeMetadata","indices","drawMode","getMeshStripIndices","getMeshFaceIndices","mode","glTFAttributeMap","metadata","posTransform","AttributeQuantizationTransform","InitFromAttribute","position","isQuantized","maxRange","range","numQuantizationBits","quantization_bits","minValues","i","min_value","numPoints","attributeName","attributeType","attributeId","GetAttributeId","dracoAttribute","GetAttribute","getAttributeTypedArray","typedArray","value","size","length","numFaces","numIndices","dracoArray","DracoInt32Array","GetFaceFromMesh","index","GetValue","GetTriangleStripsFromMesh","data_type","numComponents","num_components","numValues","DracoFloat32Array","GetAttributeFloatForAllPoints","DracoInt8Array","GetAttributeInt8ForAllPoints","DracoInt16Array","GetAttributeInt16ForAllPoints","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","errorMsg","components"],"mappings":"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","sourcesContent":["// DRACO decompressor\nimport {getGLTFAccessors, getGLTFIndices, getGLTFAttributeMap} from '@loaders.gl/core';\n\nconst draco3d = require('draco3d');\n// const assert = require('assert');\n\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nexport default class DRACODecoder {\n  constructor() {\n    this.decoderModule = draco3d.createDecoderModule({});\n  }\n\n  destroy() {\n    // this.decoderModule.destroy();\n  }\n\n  destroyGeometry(dracoGeometry) {\n    if (dracoGeometry) {\n      this.decoderModule.destroy(dracoGeometry.dracoGeometry);\n    }\n  }\n\n  // NOTE: caller must call `destroyGeometry` on the return value after using it\n  decode(arrayBuffer) {\n    const buffer = new this.decoderModule.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    const decoder = new this.decoderModule.Decoder();\n\n    const data = {};\n    let dracoStatus;\n    let dracoGeometry;\n    let header;\n\n    try {\n      const geometryType = decoder.GetEncodedGeometryType(buffer);\n      switch (geometryType) {\n\n      case this.decoderModule.TRIANGULAR_MESH:\n        dracoGeometry = new this.decoderModule.Mesh();\n        dracoStatus = decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n        header = {\n          type: GEOMETRY_TYPE.TRIANGULAR_MESH,\n          faceCount: dracoGeometry.num_faces(),\n          attributeCount: dracoGeometry.num_attributes(),\n          vertexCount: dracoGeometry.num_points()\n        };\n        break;\n\n      case this.decoderModule.POINT_CLOUD:\n        dracoGeometry = new this.decoderModule.PointCloud();\n        dracoStatus = decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n        header = {\n          type: GEOMETRY_TYPE.POINT_CLOUD,\n          attributeCount: dracoGeometry.num_attributes(),\n          vertexCount: dracoGeometry.num_points()\n        };\n        break;\n\n      default:\n        throw new Error('Unknown DRACO geometry type.');\n      }\n\n      data.header = {\n        vertexCount: header.vertexCount\n      };\n      data.loaderData = {header};\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        if (dracoGeometry) {\n          this.decoderModule.destroy(dracoGeometry);\n        }\n        throw new Error(message);\n      }\n\n      this.extractDRACOGeometry(decoder, dracoGeometry, data, geometryType);\n\n    } finally {\n      this.decoderModule.destroy(decoder);\n      this.decoderModule.destroy(buffer);\n    }\n\n    return data;\n  }\n\n  extractDRACOGeometry(decoder, dracoGeometry, geometry, geometryType) {\n    // const numPoints = dracoGeometry.num_points();\n    // const numAttributes = dracoGeometry.num_attributes();\n\n    // Structure for converting to WebGL framework specific attributes later\n    const attributes = this.getAttributes(decoder, dracoGeometry);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO decompressor: No position attribute found.');\n    }\n\n    this.getPositionAttributeMetadata(positionAttribute);\n\n    // For meshes, we need indices to define the faces.\n    if (geometryType === this.decoderModule.TRIANGULAR_MESH) {\n      attributes.indices = this.drawMode === 'TRIANGLE_STRIP' ?\n        this.getMeshStripIndices(decoder, dracoGeometry) :\n        this.getMeshFaceIndices(decoder, dracoGeometry);\n      geometry.mode = this.drawMode === 'TRIANGLE_STRIP' ?\n        5 : // GL.TRIANGLE_STRIP\n        4;  // GL.TRIANGLES\n    } else {\n      geometry.mode = 0; // GL.POINTS\n    }\n\n    geometry.indices = getGLTFIndices(attributes);\n    geometry.attributes = getGLTFAccessors(attributes);\n    geometry.glTFAttributeMap = getGLTFAttributeMap(attributes);\n\n    return geometry;\n  }\n\n  getPositionAttributeMetadata(positionAttribute) {\n    this.metadata = this.metadata || {};\n    this.metadata.attributes = this.metadata.attributes || {};\n\n    const posTransform = new this.decoderModule.AttributeQuantizationTransform();\n    if (posTransform.InitFromAttribute(positionAttribute)) {\n      // Quantized attribute. Store the quantization parameters into the attribute\n      this.metadata.attributes.position.isQuantized = true;\n      this.metadata.attributes.position.maxRange = posTransform.range();\n      this.metadata.attributes.position.numQuantizationBits = posTransform.quantization_bits();\n      this.metadata.attributes.position.minValues = new Float32Array(3);\n      for (let i = 0; i < 3; ++i) {\n        this.metadata.attributes.position.minValues[i] = posTransform.min_value(i);\n      }\n    }\n    this.decoderModule.destroy(posTransform);\n  }\n\n  getAttributes(decoder, dracoGeometry) {\n    const attributes = {};\n    const numPoints = dracoGeometry.num_points();\n    // const attributeUniqueIdMap = {};\n\n    // Add native Draco attribute type to geometry.\n    for (const attributeName in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      // The native attribute type is only used when no unique Id is provided.\n      // For example, loading .drc files.\n\n      // if (attributeUniqueIdMap[attributeName] === undefined) {\n      const attributeType = this.decoderModule[attributeName];\n      const attributeId = decoder.GetAttributeId(dracoGeometry, attributeType);\n      if (attributeId !== -1) {\n        const dracoAttribute = decoder.GetAttribute(dracoGeometry, attributeId);\n        const {typedArray} = this.getAttributeTypedArray(\n          decoder, dracoGeometry, dracoAttribute, attributeName\n        );\n        attributes[DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[attributeName]] = {\n          value: typedArray,\n          size: typedArray.length / numPoints\n        };\n      }\n      // }\n    }\n\n    // // Add attributes of user specified unique id. E.g. GLTF models.\n    // for (const attributeName in attributeUniqueIdMap) {\n    //   const attributeType = attributeTypeMap[attributeName] || Float32Array;\n    //   const attributeId = attributeUniqueIdMap[attributeName];\n    //   const attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeId);\n    //   this.getAttributeTypedArray(decoder, dracoGeometry, attribute,attributeName,attributeType);\n    // }\n\n    return attributes;\n  }\n\n  // For meshes, we need indices to define the faces.\n  getMeshFaceIndices(decoder, dracoGeometry) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n\n    const numIndices = numFaces * 3;\n    const indices = new Uint32Array(numIndices);\n    const dracoArray = new this.decoderModule.DracoInt32Array();\n    for (let i = 0; i < numFaces; ++i) {\n      decoder.GetFaceFromMesh(dracoGeometry, i, dracoArray);\n      const index = i * 3;\n      indices[index] = dracoArray.GetValue(0);\n      indices[index + 1] = dracoArray.GetValue(1);\n      indices[index + 2] = dracoArray.GetValue(2);\n    }\n\n    this.decoderModule.destroy(dracoArray);\n    return indices;\n  }\n\n  // For meshes, we need indices to define the faces.\n  getMeshStripIndices(decoder, dracoGeometry) {\n    const dracoArray = new this.decoderModule.DracoInt32Array();\n    /* const numStrips = */ decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n    const indices = new Uint32Array(dracoArray.size());\n    for (let i = 0; i < dracoArray.size(); ++i) {\n      indices[i] = dracoArray.GetValue(i);\n    }\n    this.decoderModule.destroy(dracoArray);\n    return indices;\n  }\n\n  getAttributeTypedArray(decoder, dracoGeometry, dracoAttribute, attributeName) {\n    if (dracoAttribute.ptr === 0) {\n      const message = `DRACO decode bad attribute ${attributeName}`;\n      // console.error(message);\n      throw new Error(message);\n    }\n\n    const attributeType = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[dracoAttribute.data_type()];\n    const numComponents = dracoAttribute.num_components();\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    let dracoArray;\n    let typedArray;\n\n    switch (attributeType) {\n\n    case Float32Array:\n      dracoArray = new this.decoderModule.DracoFloat32Array();\n      decoder.GetAttributeFloatForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Float32Array(numValues);\n      break;\n\n    case Int8Array:\n      dracoArray = new this.decoderModule.DracoInt8Array();\n      decoder.GetAttributeInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Int8Array(numValues);\n      break;\n\n    case Int16Array:\n      dracoArray = new this.decoderModule.DracoInt16Array();\n      decoder.GetAttributeInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Int16Array(numValues);\n      break;\n\n    case Int32Array:\n      dracoArray = new this.decoderModule.DracoInt32Array();\n      decoder.GetAttributeInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Int32Array(numValues);\n      break;\n\n    case Uint8Array:\n      dracoArray = new this.decoderModule.DracoUInt8Array();\n      decoder.GetAttributeUInt8ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Uint8Array(numValues);\n      break;\n\n    case Uint16Array:\n      dracoArray = new this.decoderModule.DracoUInt16Array();\n      decoder.GetAttributeUInt16ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Uint16Array(numValues);\n      break;\n\n    case Uint32Array:\n      dracoArray = new this.decoderModule.DracoUInt32Array();\n      decoder.GetAttributeUInt32ForAllPoints(dracoGeometry, dracoAttribute, dracoArray);\n      typedArray = new Uint32Array(numValues);\n      break;\n\n    default:\n      const errorMsg = 'DRACO decoder: unexpected attribute type.';\n      // console.error(errorMsg);\n      throw new Error(errorMsg);\n\n    }\n\n    // Copy data from decoder.\n    for (let i = 0; i < numValues; i++) {\n      typedArray[i] = dracoArray.GetValue(i);\n    }\n\n    this.decoderModule.destroy(dracoArray);\n\n    return {typedArray, components: numComponents};\n  }\n}\n"],"file":"draco-decoder.js"}