function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* eslint-disable camelcase */
import XVIZPrimitiveBuilder from './xviz-primitive-builder';
import { insertTimestamp } from '../utils';
import { CATEGORY } from './constant';

var XVIZFutureInstanceBuilder =
/*#__PURE__*/
function (_XVIZPrimitiveBuilder) {
  _inherits(XVIZFutureInstanceBuilder, _XVIZPrimitiveBuilder);

  function XVIZFutureInstanceBuilder(props) {
    var _this;

    _classCallCheck(this, XVIZFutureInstanceBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(XVIZFutureInstanceBuilder).call(this, _objectSpread({}, props, {
      category: CATEGORY.future_instance
    })));

    _this.reset(); // futures: {[streamId]: {...,timestamps: [], primitives: []}}


    _this._futures = {};
    return _this;
  }

  _createClass(XVIZFutureInstanceBuilder, [{
    key: "_timestamp",
    value: function _timestamp(timestamp) {
      this._ts = timestamp;
      return this;
    }
  }, {
    key: "_flush",
    value: function _flush() {
      var future = this._futures[this._streamId];

      if (!future) {
        future = {
          timestamps: [],
          primitives: []
        };
        this._futures[this._streamId] = future;
      }

      var primitive = this._formatPrimitive();

      var _future = future,
          timestamps = _future.timestamps,
          primitives = _future.primitives; // Each type like "image" has an "images" array, this hack saves a
      // big switch statement.

      var update = {};
      update["".concat(this._type, "s")] = [primitive]; // insert ts and primitive to the position based on timestamp order

      insertTimestamp(timestamps, primitives, this._ts, "".concat(this._type, "s"), primitive);
      this.reset();
    }
  }, {
    key: "getData",
    value: function getData() {
      if (this._type) {
        this._flush();
      }

      if (Object.keys(this._futures).length === 0) {
        return null;
      }

      return this._futures;
    }
  }, {
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf(XVIZFutureInstanceBuilder.prototype), "reset", this).call(this);
    }
  }]);

  return XVIZFutureInstanceBuilder;
}(XVIZPrimitiveBuilder);

export { XVIZFutureInstanceBuilder as default };
//# sourceMappingURL=xviz-future-instance-builder.js.map