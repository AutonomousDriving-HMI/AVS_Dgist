{"version":3,"sources":["../../../src/image-utils/image-loaders.js"],"names":["ImageBitmapLoader","parse","parseToImageBitmap","HTMLImageLoader","load","loadToHTMLImage","PlatformImageLoader","parseToPlatformImage","loadToPlatformImage","arrayBuffer","blob","Blob","Uint8Array","createImageBitmap","url","options","Promise","resolve","reject","image","Image","onload","onerror","Error","crossOrigin","src","error"],"mappings":";;;;;;;AAAA;AAEA;AACO,IAAMA,iBAAiB,GAAG;AAC/BC,EAAAA,KAAK,EAAEC;AADwB,CAA1B,C,CAIP;;;AACO,IAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAEC;AADuB,CAAxB,C,CAIP;;;AACO,IAAMC,mBAAmB,GAAG;AACjCL,EAAAA,KAAK,EAAEM,oBAD0B;AAEjCH,EAAAA,IAAI,EAAEI;AAF2B,CAA5B,C,CAKP;AACA;AAEA;;;;AACA,SAASN,kBAAT,CAA4BO,WAA5B,EAAyC;AACvC,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeH,WAAf,CAAD,CAAT,CAAb;AACA,SAAOI,iBAAiB,CAACH,IAAD,CAAxB;AACD;;AAED,SAASL,eAAT,CAAyBS,GAAzB,EAA8BC,OAA9B,EAAuC;AACrC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AACAD,MAAAA,KAAK,CAACE,MAAN,GAAe;AAAA,eAAMJ,OAAO,CAACE,KAAD,CAAb;AAAA,OAAf;;AACAA,MAAAA,KAAK,CAACG,OAAN,GAAgB;AAAA,eAAMJ,MAAM,CAAC,IAAIK,KAAJ,gCAAkCT,GAAlC,OAAD,CAAZ;AAAA,OAAhB;;AACAK,MAAAA,KAAK,CAACK,WAAN,GAAqBT,OAAO,IAAIA,OAAO,CAACS,WAApB,IAAoC,WAAxD;AACAL,MAAAA,KAAK,CAACM,GAAN,GAAYX,GAAZ;AACD,KAND,CAME,OAAOY,KAAP,EAAc;AACdR,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACD;AACF,GAVM,CAAP;AAWD;;AAED,SAASnB,oBAAT,CAA8BE,WAA9B,EAA2C;AACzC,MAAI,OAAOI,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C,WAAO,IAAP;AACD;;AACD,SAAOX,kBAAkB,CAACO,WAAD,CAAzB;AACD;;AAED,SAASD,mBAAT,CAA6BM,GAA7B,EAAkCC,OAAlC,EAA2C;AACzC,SAAOV,eAAe,CAACS,GAAD,EAAMC,OAAN,CAAtB;AACD","sourcesContent":["/* global Image, Blob, createImageBitmap */\n\n// Specifically loads an ImageBitmap (works on newer browser main and worker threads)\nexport const ImageBitmapLoader = {\n  parse: parseToImageBitmap\n};\n\n// Specifically loads an HTMLImage (works on alls browser main threads but not on worker threads)\nexport const HTMLImageLoader = {\n  load: loadToHTMLImage\n};\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\nexport const PlatformImageLoader = {\n  parse: parseToPlatformImage,\n  load: loadToPlatformImage\n};\n\n// TODO - export functions that work on \"platform images\",\n// e.g. extracts image data as typed array from any of the platform image formats.\n\n// Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\nfunction parseToImageBitmap(arrayBuffer) {\n  const blob = new Blob([new Uint8Array(arrayBuffer)]);\n  return createImageBitmap(blob);\n}\n\nfunction loadToHTMLImage(url, options) {\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (options && options.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nfunction parseToPlatformImage(arrayBuffer) {\n  if (typeof createImageBitmap === 'undefined') {\n    return null;\n  }\n  return parseToImageBitmap(arrayBuffer);\n}\n\nfunction loadToPlatformImage(url, options) {\n  return loadToHTMLImage(url, options);\n}\n"],"file":"image-loaders.js"}