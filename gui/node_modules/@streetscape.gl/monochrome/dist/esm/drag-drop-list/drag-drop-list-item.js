function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* global window */
import * as React from 'react';
import PropTypes from 'prop-types';
import Draggable from '../shared/draggable';
import { ListItemContainer, ListItemTitle, ListItemPlaceholder } from './styled-components';

var noop = function noop() {};

var TRANSITION = 300;

var DragDropListItem =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(DragDropListItem, _React$PureComponent);

  function DragDropListItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DragDropListItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DragDropListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      isHovered: false,
      isDragging: false,
      isActive: false,
      width: 0,
      height: 0,
      dragStartOffset: {
        left: 0,
        top: 0
      },
      dragPos: {
        deltaX: 0,
        deltaY: 0
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_container", void 0);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_timer", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onMouseEnter", function () {
      return _this.setState({
        isHovered: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onMouseLeave", function () {
      return _this.setState({
        isHovered: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onDragStart", function (evt) {
      var container = _this._container;

      _this.setState({
        isDragging: true,
        isActive: true,
        width: container.offsetWidth,
        height: container.offsetHeight,
        dragStartOffset: container.getBoundingClientRect(),
        dragPos: evt
      });

      _this.props.onDragStart(evt);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onDragMove", function (evt) {
      _this.setState({
        dragPos: evt
      });

      _this.props.onDragMove(evt);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_onDragEnd", function (evt) {
      _this.setState({
        isDragging: false,
        dragStartOffset: _this._container.getBoundingClientRect(),
        dragPos: {
          deltaX: 0,
          deltaY: 0
        }
      });

      if (_this.props.removed) {
        // No transition for removed items
        _this.props.onDragEnd(evt);
      } else {
        // Wait for transition to be done, then remove z-index and drop shadow
        _this._timer = window.setTimeout(function () {
          _this.setState({
            isActive: false
          });

          _this.props.onDragEnd(evt);
        }, TRANSITION);
      }
    });

    return _this;
  }

  _createClass(DragDropListItem, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.clearTimeout(this._timer);
    }
  }, {
    key: "getBoundingBox",
    value: function getBoundingBox() {
      return this._container.getBoundingClientRect();
    }
  }, {
    key: "renderTitle",
    value: function renderTitle() {
      var title = this.props.title;
      return typeof title === 'function' ? title() : title;
    }
  }, {
    key: "renderMover",
    value: function renderMover(children) {
      return React.createElement(Draggable, {
        onDragStart: this._onDragStart,
        onDrag: this._onDragMove,
        onDragEnd: this._onDragEnd
      }, children);
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this$props = this.props,
          className = _this$props.className,
          removed = _this$props.removed,
          theme = _this$props.theme,
          style = _this$props.style;
      var _this$state = this.state,
          isHovered = _this$state.isHovered,
          isDragging = _this$state.isDragging,
          isActive = _this$state.isActive,
          width = _this$state.width,
          height = _this$state.height,
          dragPos = _this$state.dragPos,
          dragStartOffset = _this$state.dragStartOffset;
      var styleProps = {
        theme: theme,
        isRemoved: removed,
        isHovered: isHovered,
        isDragging: isDragging,
        isActive: isActive
      };
      var title = this.renderTitle();
      var itemStyle = isActive ? {
        left: dragStartOffset.left + dragPos.deltaX,
        top: dragStartOffset.top + dragPos.deltaY,
        width: width,
        height: height
      } : null;
      return title ? React.createElement(ListItemContainer, _extends({
        className: className
      }, styleProps, {
        userStyle: style.item,
        style: itemStyle
      }), this.renderMover(React.createElement(ListItemTitle, _extends({}, styleProps, {
        userStyle: style.title,
        onMouseEnter: this._onMouseEnter,
        onMouseLeave: this._onMouseLeave
      }), title)), this.props.children) : this.renderMover(React.createElement(ListItemContainer, _extends({
        onMouseEnter: this._onMouseEnter,
        onMouseLeave: this._onMouseLeave,
        className: className
      }, styleProps, {
        userStyle: style.item,
        style: itemStyle
      }), this.props.children));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          theme = _this$props2.theme,
          removed = _this$props2.removed,
          style = _this$props2.style;
      var _this$state2 = this.state,
          isHovered = _this$state2.isHovered,
          isDragging = _this$state2.isDragging,
          isActive = _this$state2.isActive,
          width = _this$state2.width,
          height = _this$state2.height;
      var styleProps = {
        theme: theme,
        isRemoved: removed,
        isHovered: isHovered,
        isDragging: isDragging,
        isActive: isActive
      };
      var placeholderStyle = {
        width: width,
        height: removed ? 0 : height
      };
      return React.createElement("div", {
        ref: function ref(_ref) {
          _this2._container = _ref;
        }
      }, this.renderContent(), isActive && React.createElement(ListItemPlaceholder, _extends({}, styleProps, {
        userStyle: style.placeholder,
        style: placeholderStyle
      })));
    }
  }]);

  return DragDropListItem;
}(React.PureComponent);

_defineProperty(DragDropListItem, "propTypes", {
  className: PropTypes.string,
  title: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
  removed: PropTypes.bool,
  style: PropTypes.object.isRequired,
  onDragStart: PropTypes.func,
  onDragMove: PropTypes.func,
  onDragEnd: PropTypes.func
});

_defineProperty(DragDropListItem, "defaultProps", {
  className: '',
  removed: false,
  onDragStart: noop,
  onDragMove: noop,
  onDragEnd: noop
});

export { DragDropListItem as default };
//# sourceMappingURL=drag-drop-list-item.js.map