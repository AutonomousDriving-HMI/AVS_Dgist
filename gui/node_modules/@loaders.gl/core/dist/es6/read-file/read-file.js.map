{"version":3,"sources":["../../../src/read-file/read-file.js"],"names":["getPathPrefix","getFileAlias","decodeDataUri","toArrayBuffer","fs","http","util","isNode","Boolean","readFile","DEFAULT_OPTIONS","dataType","getReadFileOptions","options","Object","assign","responseType","encoding","uri","alias","Promise","resolve","startsWith","File","readFileObject","isRequest","request","createImageBitmap","URL","location","pathname","href","fetch","then","res","readFileNode","reject","Error","error","message","readFileSync","buffer","Buffer","file","reader","FileReader","onerror","onabort","onload","result","readAsText","readAsArrayBuffer","filename","readFileAsync","promisify"],"mappings":"AAAA;;AACA;;AACA;AACA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,SAAQC,aAAR,QAA4B,8BAA5B;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAAqB;;AACrB,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACJ,EAAE,IAAIA,EAAE,CAACK,QAAV,CAAtB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE;AADY,CAAxB;;AAIA,SAASC,kBAAT,GAA0C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACxCA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,eAAlB,EAAmCG,OAAnC,CAAV;AACAA,EAAAA,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACG,YAAR,IAAwBH,OAAO,CAACF,QAAvD;;AACA,MAAIP,EAAJ,EAAQ;AACN;AACAS,IAAAA,OAAO,CAACI,QAAR,GAAmBJ,OAAO,CAACI,QAAR,KAAqBJ,OAAO,CAACF,QAAR,KAAqB,MAArB,GAA8B,MAA9B,GAAuC,IAA5D,CAAnB;AACD;;AACD,SAAOE,OAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASJ,QAAT,CAAkBS,GAAlB,EAAqC;AAAA,MAAdL,OAAc,uEAAJ,EAAI;;AAC1C,MAAI;AACFA,IAAAA,OAAO,GAAGD,kBAAkB,CAACC,OAAD,CAA5B;AACAK,IAAAA,GAAG,GAAGlB,aAAa,KAAKkB,GAAxB;AAEA,UAAMC,KAAK,GAAGlB,YAAY,CAACiB,GAAD,CAA1B;;AACA,QAAIC,KAAJ,EAAW;AACT,aAAOC,OAAO,CAACC,OAAR,CAAgBF,KAAhB,CAAP;AACD;;AAED,QAAID,GAAG,CAACI,UAAJ,CAAe,OAAf,CAAJ,EAA6B;AAC3B,aAAOF,OAAO,CAACC,OAAR,CAAgBnB,aAAa,CAACgB,GAAD,CAA7B,CAAP;AACD;;AAED,QAAI,OAAOK,IAAP,KAAgB,WAAhB,IAA+BL,GAAG,YAAYK,IAAlD,EAAwD;AACtDC,MAAAA,cAAc,CAACN,GAAD,EAAML,OAAN,CAAd;AACD;;AAED,UAAMY,SAAS,GAAGP,GAAG,CAACI,UAAJ,CAAe,OAAf,KAA2BJ,GAAG,CAACI,UAAJ,CAAe,QAAf,CAA7C;;AACA,QAAIG,SAAJ,EAAe;AACb,UAAIlB,MAAJ,EAAY;AACV,eAAOF,IAAI,CAACqB,OAAL,CAAaR,GAAb,EAAkBL,OAAlB,CAAP;AACD;;AACD,UAAI,OAAOc,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C;AACA;AACAT,QAAAA,GAAG,GAAG,IAAIU,GAAJ,CAAQV,GAAR,EAAaW,QAAQ,CAACC,QAAtB,EAAgCC,IAAtC;AACD;;AACD,aAAOC,KAAK,CAACd,GAAD,EAAML,OAAN,CAAL,CAAoBoB,IAApB,CAAyBC,GAAG,IAAIA,GAAG,CAACrB,OAAO,CAACF,QAAT,CAAH,EAAhC,CAAP;AACD;;AAED,QAAIJ,MAAJ,EAAY;AACV,aAAO4B,YAAY,CAACjB,GAAD,EAAML,OAAN,CAAnB;AACD;;AAED,WAAOO,OAAO,CAACgB,MAAR,CAAe,IAAIC,KAAJ,CAAU,kCAAV,CAAf,CAAP;AACD,GAnCD,CAmCE,OAAOC,KAAP,EAAc;AACd,WAAOlB,OAAO,CAACgB,MAAR,CAAeE,KAAK,CAACC,OAArB,CAAP;AACD;AACF,C,CAED;;AACA,OAAO,SAASC,YAAT,CAAsBtB,GAAtB,EAAyC;AAAA,MAAdL,OAAc,uEAAJ,EAAI;AAC9CA,EAAAA,OAAO,GAAGD,kBAAkB,CAACC,OAAD,CAA5B;AACAK,EAAAA,GAAG,GAAGlB,aAAa,KAAKkB,GAAxB;AAEA,QAAMC,KAAK,GAAGlB,YAAY,CAACiB,GAAD,CAA1B;;AACA,MAAIC,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AAED,MAAID,GAAG,CAACI,UAAJ,CAAe,OAAf,CAAJ,EAA6B;AAC3B,WAAOpB,aAAa,CAACgB,GAAD,CAApB;AACD;;AAED,MAAI,CAACX,MAAL,EAAa;AACX,WAAO,IAAP,CADW,CACE;AACd;;AAED,QAAMkC,MAAM,GAAGrC,EAAE,CAACoC,YAAH,CAAgBtB,GAAhB,EAAqBL,OAArB,EAA8B,MAAM,CAAE,CAAtC,CAAf;AACA,SAAO4B,MAAM,YAAYC,MAAlB,GAA2BvC,aAAa,CAACsC,MAAD,CAAxC,GAAmDA,MAA1D;AACD,C,CAED;;AAEA;;;;;;AAKA,SAASjB,cAAT,CAAwBmB,IAAxB,EAA8B9B,OAA9B,EAAuC;AACrC,SAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUe,MAAV,KAAqB;AACtC,QAAI;AACF,YAAMQ,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,OAAP,GAAiBR,KAAK,IAAIF,MAAM,CAAC,IAAIC,KAAJ,CAAUC,KAAV,CAAD,CAAhC;;AACAM,MAAAA,MAAM,CAACG,OAAP,GAAiB,MAAMX,MAAM,CAAC,IAAIC,KAAJ,CAAU,6BAAV,CAAD,CAA7B;;AACAO,MAAAA,MAAM,CAACI,MAAP,GAAgB,MAAM3B,OAAO,CAACuB,MAAM,CAACK,MAAR,CAA7B;;AACA,UAAIpC,OAAO,CAACF,QAAR,KAAqB,aAAzB,EAAwC;AACtCiC,QAAAA,MAAM,CAACM,UAAP,CAAkBP,IAAlB;AACD,OAFD,MAEO;AACLC,QAAAA,MAAM,CAACO,iBAAP,CAAyBR,IAAzB;AACD;AACF,KAVD,CAUE,OAAOL,KAAP,EAAc;AACdF,MAAAA,MAAM,CAACE,KAAD,CAAN;AACD;AACF,GAdM,CAAP;AAeD;;AAED,SAASH,YAAT,CAAsBiB,QAAtB,EAAgCvC,OAAhC,EAAyC;AACvC,QAAMwC,aAAa,GAAG/C,IAAI,CAACgD,SAAL,CAAelD,EAAE,CAACK,QAAlB,CAAtB;AACA,SAAO4C,aAAa,CAACD,QAAD,EAAWvC,OAAX,CAAb,CAAiCoB,IAAjC,CACLQ,MAAM,IAAIA,MAAM,YAAYC,MAAlB,GAA2BvC,aAAa,CAACsC,MAAD,CAAxC,GAAmDA,MADxD,CAAP;AAGD","sourcesContent":["/* global fetch */\n/* global URL, location, File, FileReader */\n/* global Buffer */\nimport {getPathPrefix} from './path-prefix';\nimport {getFileAlias} from './file-aliases';\nimport decodeDataUri from '../data-uri-utils/decode-data-uri';\nimport {toArrayBuffer} from '../binary-utils/binary-utils';\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport util from 'util';\n\nconst isNode = Boolean(fs && fs.readFile);\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arraybuffer'\n};\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  if (fs) {\n    // set encoding for fs.readFile\n    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);\n  }\n  return options;\n}\n\n// Reads raw file data from:\n// * http/http urls\n// * data urls\n// * File/Blob objects\n// etc?\nexport function readFile(uri, options = {}) {\n  try {\n    options = getReadFileOptions(options);\n    uri = getPathPrefix() + uri;\n\n    const alias = getFileAlias(uri);\n    if (alias) {\n      return Promise.resolve(alias);\n    }\n\n    if (uri.startsWith('data:')) {\n      return Promise.resolve(decodeDataUri(uri));\n    }\n\n    if (typeof File !== 'undefined' && uri instanceof File) {\n      readFileObject(uri, options);\n    }\n\n    const isRequest = uri.startsWith('http:') || uri.startsWith('https:');\n    if (isRequest) {\n      if (isNode) {\n        return http.request(uri, options);\n      }\n      if (typeof createImageBitmap === 'undefined') {\n        // In a web worker: XMLHttpRequest throws invalid URL error if using relative path\n        // resolve url relative to original base\n        uri = new URL(uri, location.pathname).href;\n      }\n      return fetch(uri, options).then(res => res[options.dataType]());\n    }\n\n    if (isNode) {\n      return readFileNode(uri, options);\n    }\n\n    return Promise.reject(new Error('Cannot load file URIs in browser'));\n  } catch (error) {\n    return Promise.reject(error.message);\n  }\n}\n\n// In a few cases (data URIs, node.js) \"files\" can be read synchronously\nexport function readFileSync(uri, options = {}) {\n  options = getReadFileOptions(options);\n  uri = getPathPrefix() + uri;\n\n  const alias = getFileAlias(uri);\n  if (alias) {\n    return alias;\n  }\n\n  if (uri.startsWith('data:')) {\n    return decodeDataUri(uri);\n  }\n\n  if (!isNode) {\n    return null; // throw new Error('Cant load URI synchronously');\n  }\n\n  const buffer = fs.readFileSync(uri, options, () => {});\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\n// HELPERS\n\n/**\n * File reader function for the browser\n * @param {File|Blob} file  HTML File or Blob object to read as string\n * @returns {Promise.string}  Resolves to a string containing file contents\n */\nfunction readFileObject(file, options) {\n  return new Promise((resolve, reject) => {\n    try {\n      const reader = new FileReader();\n      reader.onerror = error => reject(new Error(error));\n      reader.onabort = () => reject(new Error('Read operation was aborted.'));\n      reader.onload = () => resolve(reader.result);\n      if (options.dataType !== 'arraybuffer') {\n        reader.readAsText(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nfunction readFileNode(filename, options) {\n  const readFileAsync = util.promisify(fs.readFile);\n  return readFileAsync(filename, options).then(\n    buffer => buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer\n  );\n}\n\n"],"file":"read-file.js"}