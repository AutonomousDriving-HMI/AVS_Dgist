function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import styled from '@emotion/styled';
import { evaluateStyle } from '../shared/theme';
export const ListContainer = styled.div(props => _objectSpread({}, props.theme.__reset__, {
  userSelect: 'none'
}, evaluateStyle(props.userStyle, props)));
export const ListItemContainer = styled.div(props => {
  const style = props.isActive ? {
    boxSizing: 'border-box',
    position: 'fixed',
    zIndex: 999,
    transitionProperty: 'all',
    transitionTimingFunction: props.theme.transitionTimingFunction,
    transitionDuration: props.isDragging ? 0 : props.theme.transitionDuration,
    boxShadow: props.theme.shadow
  } : {};
  return Object.assign(style, evaluateStyle(props.userStyle, props));
});
export const ListItemTitle = styled.div(props => _objectSpread({}, evaluateStyle(props.userStyle, props)));
export const ListItemPlaceholder = styled.div(props => _objectSpread({
  boxSizing: 'border-box',
  transitionProperty: 'height',
  transitionTimingFunction: props.theme.transitionTimingFunction,
  transitionDuration: props.theme.transitionDuration,
  borderStyle: 'dotted',
  borderColor: props.theme.controlColorPrimary,
  borderWidth: 2
}, evaluateStyle(props.userStyle, props)));
//# sourceMappingURL=styled-components.js.map